
Sound_card_ALT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08009364  08009364  00019364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093cc  080093cc  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  080093cc  080093cc  000193cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093d4  080093d4  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093d4  080093d4  000193d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093d8  080093d8  000193d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  080093dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020130  2**0
                  CONTENTS
 10 .bss          000047a4  20000130  20000130  00020130  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200048d4  200048d4  00020130  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001893f  00000000  00000000  000201a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ec7  00000000  00000000  00038ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001688  00000000  00000000  0003c9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001161  00000000  00000000  0003e038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024f4e  00000000  00000000  0003f199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001dbe3  00000000  00000000  000640e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d1779  00000000  00000000  00081cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005efc  00000000  00000000  00153444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00159340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000130 	.word	0x20000130
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800934c 	.word	0x0800934c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000134 	.word	0x20000134
 80001c4:	0800934c 	.word	0x0800934c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <cs43l22_init>:
codec_state get_cs43l22_state()
{
	return cs43l22_state;
}
int cs43l22_init()
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status_i2c = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	71fb      	strb	r3, [r7, #7]
	uint8_t i2c_data;
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2110      	movs	r1, #16
 80004d2:	4853      	ldr	r0, [pc, #332]	; (8000620 <cs43l22_init+0x15c>)
 80004d4:	f001 fb60 	bl	8001b98 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80004d8:	2064      	movs	r0, #100	; 0x64
 80004da:	f000 fda1 	bl	8001020 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_4, GPIO_PIN_SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	2110      	movs	r1, #16
 80004e2:	484f      	ldr	r0, [pc, #316]	; (8000620 <cs43l22_init+0x15c>)
 80004e4:	f001 fb58 	bl	8001b98 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80004e8:	2064      	movs	r0, #100	; 0x64
 80004ea:	f000 fd99 	bl	8001020 <HAL_Delay>
	// power off the codec, page 38
	i2c_data = 0x01;
 80004ee:	2301      	movs	r3, #1
 80004f0:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON1_REG,
 80004f2:	2364      	movs	r3, #100	; 0x64
 80004f4:	9302      	str	r3, [sp, #8]
 80004f6:	2301      	movs	r3, #1
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	1dbb      	adds	r3, r7, #6
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2301      	movs	r3, #1
 8000500:	2202      	movs	r2, #2
 8000502:	2194      	movs	r1, #148	; 0x94
 8000504:	4847      	ldr	r0, [pc, #284]	; (8000624 <cs43l22_init+0x160>)
 8000506:	f001 fca5 	bl	8001e54 <HAL_I2C_Mem_Write>
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
	                                    1, &i2c_data, 1, 100);

	// output device is headphone 0xaf, page 38
	i2c_data = 0b10101111;
 800050e:	23af      	movs	r3, #175	; 0xaf
 8000510:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON2_REG,
 8000512:	2364      	movs	r3, #100	; 0x64
 8000514:	9302      	str	r3, [sp, #8]
 8000516:	2301      	movs	r3, #1
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	1dbb      	adds	r3, r7, #6
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	2204      	movs	r2, #4
 8000522:	2194      	movs	r1, #148	; 0x94
 8000524:	483f      	ldr	r0, [pc, #252]	; (8000624 <cs43l22_init+0x160>)
 8000526:	f001 fc95 	bl	8001e54 <HAL_I2C_Mem_Write>
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <cs43l22_init+0x74>
	{
		return status_i2c;
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	e06f      	b.n	8000618 <cs43l22_init+0x154>
	}

	// clock auto-detect and divide mclk by 2
	i2c_data = 0b10000001;
 8000538:	2381      	movs	r3, #129	; 0x81
 800053a:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_CLKCON_REG,
 800053c:	2364      	movs	r3, #100	; 0x64
 800053e:	9302      	str	r3, [sp, #8]
 8000540:	2301      	movs	r3, #1
 8000542:	9301      	str	r3, [sp, #4]
 8000544:	1dbb      	adds	r3, r7, #6
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2301      	movs	r3, #1
 800054a:	2205      	movs	r2, #5
 800054c:	2194      	movs	r1, #148	; 0x94
 800054e:	4835      	ldr	r0, [pc, #212]	; (8000624 <cs43l22_init+0x160>)
 8000550:	f001 fc80 	bl	8001e54 <HAL_I2C_Mem_Write>
 8000554:	4603      	mov	r3, r0
 8000556:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <cs43l22_init+0x9e>
	{
		return status_i2c;
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	e05a      	b.n	8000618 <cs43l22_init+0x154>
	}

	cs43l22_set_volume(200);
 8000562:	20c8      	movs	r0, #200	; 0xc8
 8000564:	f000 f862 	bl	800062c <cs43l22_set_volume>

	// i2s up to 24-bit interface, 16-bit data length, page 41
	i2c_data = 0b00000111;
 8000568:	2307      	movs	r3, #7
 800056a:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_INTERCON1_REG,
 800056c:	2364      	movs	r3, #100	; 0x64
 800056e:	9302      	str	r3, [sp, #8]
 8000570:	2301      	movs	r3, #1
 8000572:	9301      	str	r3, [sp, #4]
 8000574:	1dbb      	adds	r3, r7, #6
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	2301      	movs	r3, #1
 800057a:	2206      	movs	r2, #6
 800057c:	2194      	movs	r1, #148	; 0x94
 800057e:	4829      	ldr	r0, [pc, #164]	; (8000624 <cs43l22_init+0x160>)
 8000580:	f001 fc68 	bl	8001e54 <HAL_I2C_Mem_Write>
 8000584:	4603      	mov	r3, r0
 8000586:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <cs43l22_init+0xce>
	{
		return status_i2c;
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	e042      	b.n	8000618 <cs43l22_init+0x154>
	}

	// enable digital soft ramp and de-emphasis filter
	i2c_data = 0b00000110;
 8000592:	2306      	movs	r3, #6
 8000594:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_MISCON_REG,
 8000596:	2364      	movs	r3, #100	; 0x64
 8000598:	9302      	str	r3, [sp, #8]
 800059a:	2301      	movs	r3, #1
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	1dbb      	adds	r3, r7, #6
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2301      	movs	r3, #1
 80005a4:	220e      	movs	r2, #14
 80005a6:	2194      	movs	r1, #148	; 0x94
 80005a8:	481e      	ldr	r0, [pc, #120]	; (8000624 <cs43l22_init+0x160>)
 80005aa:	f001 fc53 	bl	8001e54 <HAL_I2C_Mem_Write>
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
											1, &i2c_data, 1, 100);
	if (status_i2c)
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <cs43l22_init+0xf8>
	{
		return status_i2c;
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	e02d      	b.n	8000618 <cs43l22_init+0x154>
	}

	//  PCM VOlume adjust, page 47
	i2c_data = 0x00;
 80005bc:	2300      	movs	r3, #0
 80005be:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_PCMAVOLCON_REG,
 80005c0:	2364      	movs	r3, #100	; 0x64
 80005c2:	9302      	str	r3, [sp, #8]
 80005c4:	2301      	movs	r3, #1
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	1dbb      	adds	r3, r7, #6
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2301      	movs	r3, #1
 80005ce:	221a      	movs	r2, #26
 80005d0:	2194      	movs	r1, #148	; 0x94
 80005d2:	4814      	ldr	r0, [pc, #80]	; (8000624 <cs43l22_init+0x160>)
 80005d4:	f001 fc3e 	bl	8001e54 <HAL_I2C_Mem_Write>
 80005d8:	4603      	mov	r3, r0
 80005da:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <cs43l22_init+0x122>
	{
		return status_i2c;
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	e018      	b.n	8000618 <cs43l22_init+0x154>
	}

	i2c_data = 0x00;
 80005e6:	2300      	movs	r3, #0
 80005e8:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_PCMBVOLCON_REG,
 80005ea:	2364      	movs	r3, #100	; 0x64
 80005ec:	9302      	str	r3, [sp, #8]
 80005ee:	2301      	movs	r3, #1
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	1dbb      	adds	r3, r7, #6
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2301      	movs	r3, #1
 80005f8:	221b      	movs	r2, #27
 80005fa:	2194      	movs	r1, #148	; 0x94
 80005fc:	4809      	ldr	r0, [pc, #36]	; (8000624 <cs43l22_init+0x160>)
 80005fe:	f001 fc29 	bl	8001e54 <HAL_I2C_Mem_Write>
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <cs43l22_init+0x14c>
	{
		return status_i2c;
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	e003      	b.n	8000618 <cs43l22_init+0x154>
	}

	cs43l22_state = READY;
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <cs43l22_init+0x164>)
 8000612:	2205      	movs	r2, #5
 8000614:	701a      	strb	r2, [r3, #0]
	return 0;
 8000616:	2300      	movs	r3, #0

}
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40020c00 	.word	0x40020c00
 8000624:	2000014c 	.word	0x2000014c
 8000628:	20000000 	.word	0x20000000

0800062c <cs43l22_set_volume>:
	HAL_I2C_Mem_Read(&CS43L22_I2C, CS43L22_I2C_ADDRESS, reg,
			1, reg_value, 1, 100);
}

int cs43l22_set_volume(uint8_t volume)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af04      	add	r7, sp, #16
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status_i2c = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	73fb      	strb	r3, [r7, #15]
	// page 52
	if (volume > 0xe6)
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2be6      	cmp	r3, #230	; 0xe6
 800063e:	d904      	bls.n	800064a <cs43l22_set_volume+0x1e>
	{
		volume -= 0xe7;
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	3319      	adds	r3, #25
 8000644:	b2db      	uxtb	r3, r3
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	e003      	b.n	8000652 <cs43l22_set_volume+0x26>
	}
	else
	{
		volume += 0x19;
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	3319      	adds	r3, #25
 800064e:	b2db      	uxtb	r3, r3
 8000650:	71fb      	strb	r3, [r7, #7]
	}
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_MASAVOL_REG,
 8000652:	2364      	movs	r3, #100	; 0x64
 8000654:	9302      	str	r3, [sp, #8]
 8000656:	2301      	movs	r3, #1
 8000658:	9301      	str	r3, [sp, #4]
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2301      	movs	r3, #1
 8000660:	2220      	movs	r2, #32
 8000662:	2194      	movs	r1, #148	; 0x94
 8000664:	480b      	ldr	r0, [pc, #44]	; (8000694 <cs43l22_set_volume+0x68>)
 8000666:	f001 fbf5 	bl	8001e54 <HAL_I2C_Mem_Write>
 800066a:	4603      	mov	r3, r0
 800066c:	73fb      	strb	r3, [r7, #15]
											1, &volume, 1, 100);
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_MASBVOL_REG,
 800066e:	2364      	movs	r3, #100	; 0x64
 8000670:	9302      	str	r3, [sp, #8]
 8000672:	2301      	movs	r3, #1
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	1dfb      	adds	r3, r7, #7
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2301      	movs	r3, #1
 800067c:	2221      	movs	r2, #33	; 0x21
 800067e:	2194      	movs	r1, #148	; 0x94
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <cs43l22_set_volume+0x68>)
 8000682:	f001 fbe7 	bl	8001e54 <HAL_I2C_Mem_Write>
 8000686:	4603      	mov	r3, r0
 8000688:	73fb      	strb	r3, [r7, #15]
												1, &volume, 1, 100);
	return status_i2c;
 800068a:	7bfb      	ldrb	r3, [r7, #15]

}
 800068c:	4618      	mov	r0, r3
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2000014c 	.word	0x2000014c

08000698 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  if(hi2s == &CS43L22_I2S)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <HAL_I2S_TxCpltCallback+0x1c>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d101      	bne.n	80006ac <HAL_I2S_TxCpltCallback+0x14>
  {
	AUDIO_I2S_TxCpltCallback();
 80006a8:	f000 f806 	bl	80006b8 <AUDIO_I2S_TxCpltCallback>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200001a0 	.word	0x200001a0

080006b8 <AUDIO_I2S_TxCpltCallback>:

    AUDIO_I2S_TxHalfCpltCallback();
  }
}
__weak void AUDIO_I2S_TxCpltCallback(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f000 fc37 	bl	8000f3c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ce:	f000 f811 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 f943 	bl	800095c <MX_GPIO_Init>
  MX_DMA_Init();
 80006d6:	f000 f921 	bl	800091c <MX_DMA_Init>
  MX_I2C1_Init();
 80006da:	f000 f875 	bl	80007c8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80006de:	f000 f8a1 	bl	8000824 <MX_I2S3_Init>
  MX_TIM4_Init();
 80006e2:	f000 f8cd 	bl	8000880 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 80006e6:	f008 f949 	bl	800897c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80006ea:	f008 f947 	bl	800897c <MX_USB_DEVICE_Init>
  cs43l22_init();
 80006ee:	f7ff fee9 	bl	80004c4 <cs43l22_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <main+0x2c>

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	; 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	2230      	movs	r2, #48	; 0x30
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f008 fdf6 	bl	80092f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <SystemClock_Config+0xcc>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a27      	ldr	r2, [pc, #156]	; (80007c0 <SystemClock_Config+0xcc>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <SystemClock_Config+0xcc>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <SystemClock_Config+0xd0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <SystemClock_Config+0xd0>)
 800073e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <SystemClock_Config+0xd0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000750:	2301      	movs	r3, #1
 8000752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075a:	2302      	movs	r3, #2
 800075c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000764:	2304      	movs	r3, #4
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000768:	2390      	movs	r3, #144	; 0x90
 800076a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000770:	2306      	movs	r3, #6
 8000772:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 0320 	add.w	r3, r7, #32
 8000778:	4618      	mov	r0, r3
 800077a:	f003 fda3 	bl	80042c4 <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000784:	f000 f9f8 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000788:	230f      	movs	r3, #15
 800078a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078c:	2302      	movs	r3, #2
 800078e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000794:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000798:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800079a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2104      	movs	r1, #4
 80007a6:	4618      	mov	r0, r3
 80007a8:	f004 f804 	bl	80047b4 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007b2:	f000 f9e1 	bl	8000b78 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3750      	adds	r7, #80	; 0x50
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_I2C1_Init+0x50>)
 80007ce:	4a13      	ldr	r2, [pc, #76]	; (800081c <MX_I2C1_Init+0x54>)
 80007d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_I2C1_Init+0x50>)
 80007d4:	4a12      	ldr	r2, [pc, #72]	; (8000820 <MX_I2C1_Init+0x58>)
 80007d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_I2C1_Init+0x50>)
 80007e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_I2C1_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_I2C1_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_I2C1_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_I2C1_Init+0x50>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_I2C1_Init+0x50>)
 8000806:	f001 f9e1 	bl	8001bcc <HAL_I2C_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000810:	f000 f9b2 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2000014c 	.word	0x2000014c
 800081c:	40005400 	.word	0x40005400
 8000820:	000186a0 	.word	0x000186a0

08000824 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_I2S3_Init+0x54>)
 800082a:	4a14      	ldr	r2, [pc, #80]	; (800087c <MX_I2S3_Init+0x58>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_I2S3_Init+0x54>)
 8000830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000834:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_LSB;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_I2S3_Init+0x54>)
 8000838:	2220      	movs	r2, #32
 800083a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_I2S3_Init+0x54>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <MX_I2S3_Init+0x54>)
 8000844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000848:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_I2S3_Init+0x54>)
 800084c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000850:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_I2S3_Init+0x54>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <MX_I2S3_Init+0x54>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_I2S3_Init+0x54>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_I2S3_Init+0x54>)
 8000866:	f001 fe0d 	bl	8002484 <HAL_I2S_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000870:	f000 f982 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200001a0 	.word	0x200001a0
 800087c:	40003c00 	.word	0x40003c00

08000880 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000894:	463b      	mov	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_TIM4_Init+0x94>)
 800089e:	4a1e      	ldr	r2, [pc, #120]	; (8000918 <MX_TIM4_Init+0x98>)
 80008a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_TIM4_Init+0x94>)
 80008a4:	2253      	movs	r2, #83	; 0x53
 80008a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_TIM4_Init+0x94>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_TIM4_Init+0x94>)
 80008b0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80008b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_TIM4_Init+0x94>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_TIM4_Init+0x94>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008c2:	4814      	ldr	r0, [pc, #80]	; (8000914 <MX_TIM4_Init+0x94>)
 80008c4:	f004 fac2 	bl	8004e4c <HAL_TIM_Base_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80008ce:	f000 f953 	bl	8000b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	4619      	mov	r1, r3
 80008de:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_TIM4_Init+0x94>)
 80008e0:	f004 fb03 	bl	8004eea <HAL_TIM_ConfigClockSource>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80008ea:	f000 f945 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008f6:	463b      	mov	r3, r7
 80008f8:	4619      	mov	r1, r3
 80008fa:	4806      	ldr	r0, [pc, #24]	; (8000914 <MX_TIM4_Init+0x94>)
 80008fc:	f004 fcf6 	bl	80052ec <HAL_TIMEx_MasterConfigSynchronization>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000906:	f000 f937 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000248 	.word	0x20000248
 8000918:	40000800 	.word	0x40000800

0800091c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_DMA_Init+0x3c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <MX_DMA_Init+0x3c>)
 800092c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_DMA_Init+0x3c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	2010      	movs	r0, #16
 8000944:	f000 fc6b 	bl	800121e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000948:	2010      	movs	r0, #16
 800094a:	f000 fc84 	bl	8001256 <HAL_NVIC_EnableIRQ>

}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08c      	sub	sp, #48	; 0x30
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
 8000976:	4b7a      	ldr	r3, [pc, #488]	; (8000b60 <MX_GPIO_Init+0x204>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a79      	ldr	r2, [pc, #484]	; (8000b60 <MX_GPIO_Init+0x204>)
 800097c:	f043 0310 	orr.w	r3, r3, #16
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b77      	ldr	r3, [pc, #476]	; (8000b60 <MX_GPIO_Init+0x204>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0310 	and.w	r3, r3, #16
 800098a:	61bb      	str	r3, [r7, #24]
 800098c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	4b73      	ldr	r3, [pc, #460]	; (8000b60 <MX_GPIO_Init+0x204>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a72      	ldr	r2, [pc, #456]	; (8000b60 <MX_GPIO_Init+0x204>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b70      	ldr	r3, [pc, #448]	; (8000b60 <MX_GPIO_Init+0x204>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b6c      	ldr	r3, [pc, #432]	; (8000b60 <MX_GPIO_Init+0x204>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a6b      	ldr	r2, [pc, #428]	; (8000b60 <MX_GPIO_Init+0x204>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b69      	ldr	r3, [pc, #420]	; (8000b60 <MX_GPIO_Init+0x204>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b65      	ldr	r3, [pc, #404]	; (8000b60 <MX_GPIO_Init+0x204>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a64      	ldr	r2, [pc, #400]	; (8000b60 <MX_GPIO_Init+0x204>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b62      	ldr	r3, [pc, #392]	; (8000b60 <MX_GPIO_Init+0x204>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	4b5e      	ldr	r3, [pc, #376]	; (8000b60 <MX_GPIO_Init+0x204>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a5d      	ldr	r2, [pc, #372]	; (8000b60 <MX_GPIO_Init+0x204>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b5b      	ldr	r3, [pc, #364]	; (8000b60 <MX_GPIO_Init+0x204>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b57      	ldr	r3, [pc, #348]	; (8000b60 <MX_GPIO_Init+0x204>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a56      	ldr	r2, [pc, #344]	; (8000b60 <MX_GPIO_Init+0x204>)
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b54      	ldr	r3, [pc, #336]	; (8000b60 <MX_GPIO_Init+0x204>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2108      	movs	r1, #8
 8000a1e:	4851      	ldr	r0, [pc, #324]	; (8000b64 <MX_GPIO_Init+0x208>)
 8000a20:	f001 f8ba 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2101      	movs	r1, #1
 8000a28:	484f      	ldr	r0, [pc, #316]	; (8000b68 <MX_GPIO_Init+0x20c>)
 8000a2a:	f001 f8b5 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a34:	484d      	ldr	r0, [pc, #308]	; (8000b6c <MX_GPIO_Init+0x210>)
 8000a36:	f001 f8af 	bl	8001b98 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4844      	ldr	r0, [pc, #272]	; (8000b64 <MX_GPIO_Init+0x208>)
 8000a52:	f000 ff05 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a56:	2301      	movs	r3, #1
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	483e      	ldr	r0, [pc, #248]	; (8000b68 <MX_GPIO_Init+0x20c>)
 8000a6e:	f000 fef7 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a72:	2308      	movs	r3, #8
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a82:	2305      	movs	r3, #5
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4836      	ldr	r0, [pc, #216]	; (8000b68 <MX_GPIO_Init+0x20c>)
 8000a8e:	f000 fee7 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a96:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4832      	ldr	r0, [pc, #200]	; (8000b70 <MX_GPIO_Init+0x214>)
 8000aa8:	f000 feda 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000aac:	23e0      	movs	r3, #224	; 0xe0
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000abc:	2305      	movs	r3, #5
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	482a      	ldr	r0, [pc, #168]	; (8000b70 <MX_GPIO_Init+0x214>)
 8000ac8:	f000 feca 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000acc:	2304      	movs	r3, #4
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	4825      	ldr	r0, [pc, #148]	; (8000b74 <MX_GPIO_Init+0x218>)
 8000ae0:	f000 febe 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000af6:	2305      	movs	r3, #5
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	481c      	ldr	r0, [pc, #112]	; (8000b74 <MX_GPIO_Init+0x218>)
 8000b02:	f000 fead 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b06:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b0a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4813      	ldr	r0, [pc, #76]	; (8000b6c <MX_GPIO_Init+0x210>)
 8000b20:	f000 fe9e 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b24:	2320      	movs	r3, #32
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	480d      	ldr	r0, [pc, #52]	; (8000b6c <MX_GPIO_Init+0x210>)
 8000b38:	f000 fe92 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b40:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_GPIO_Init+0x208>)
 8000b52:	f000 fe85 	bl	8001860 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b56:	bf00      	nop
 8000b58:	3730      	adds	r7, #48	; 0x30
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40020c00 	.word	0x40020c00
 8000b70:	40020000 	.word	0x40020000
 8000b74:	40020400 	.word	0x40020400

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <Error_Handler+0x8>
	...

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bc2:	2007      	movs	r0, #7
 8000bc4:	f000 fb20 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <HAL_I2C_MspInit+0x84>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d12c      	bne.n	8000c50 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c12:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c18:	2312      	movs	r3, #18
 8000c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c24:	2304      	movs	r3, #4
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480c      	ldr	r0, [pc, #48]	; (8000c60 <HAL_I2C_MspInit+0x8c>)
 8000c30:	f000 fe16 	bl	8001860 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c42:	6413      	str	r3, [r2, #64]	; 0x40
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c50:	bf00      	nop
 8000c52:	3728      	adds	r7, #40	; 0x28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40005400 	.word	0x40005400
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020400 	.word	0x40020400

08000c64 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08e      	sub	sp, #56	; 0x38
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a52      	ldr	r2, [pc, #328]	; (8000dd8 <HAL_I2S_MspInit+0x174>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	f040 809c 	bne.w	8000dce <HAL_I2S_MspInit+0x16a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c96:	2301      	movs	r3, #1
 8000c98:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 131;
 8000c9a:	2383      	movs	r3, #131	; 0x83
 8000c9c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f003 ff90 	bl	8004bcc <HAL_RCCEx_PeriphCLKConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000cb2:	f7ff ff61 	bl	8000b78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	4b48      	ldr	r3, [pc, #288]	; (8000ddc <HAL_I2S_MspInit+0x178>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a47      	ldr	r2, [pc, #284]	; (8000ddc <HAL_I2S_MspInit+0x178>)
 8000cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b45      	ldr	r3, [pc, #276]	; (8000ddc <HAL_I2S_MspInit+0x178>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b41      	ldr	r3, [pc, #260]	; (8000ddc <HAL_I2S_MspInit+0x178>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a40      	ldr	r2, [pc, #256]	; (8000ddc <HAL_I2S_MspInit+0x178>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b3e      	ldr	r3, [pc, #248]	; (8000ddc <HAL_I2S_MspInit+0x178>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	4b3a      	ldr	r3, [pc, #232]	; (8000ddc <HAL_I2S_MspInit+0x178>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a39      	ldr	r2, [pc, #228]	; (8000ddc <HAL_I2S_MspInit+0x178>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b37      	ldr	r3, [pc, #220]	; (8000ddc <HAL_I2S_MspInit+0x178>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d1a:	2306      	movs	r3, #6
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d22:	4619      	mov	r1, r3
 8000d24:	482e      	ldr	r0, [pc, #184]	; (8000de0 <HAL_I2S_MspInit+0x17c>)
 8000d26:	f000 fd9b 	bl	8001860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d2a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d3c:	2306      	movs	r3, #6
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d44:	4619      	mov	r1, r3
 8000d46:	4827      	ldr	r0, [pc, #156]	; (8000de4 <HAL_I2S_MspInit+0x180>)
 8000d48:	f000 fd8a 	bl	8001860 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000d4c:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <HAL_I2S_MspInit+0x184>)
 8000d4e:	4a27      	ldr	r2, [pc, #156]	; (8000dec <HAL_I2S_MspInit+0x188>)
 8000d50:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000d52:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <HAL_I2S_MspInit+0x184>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d58:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <HAL_I2S_MspInit+0x184>)
 8000d5a:	2240      	movs	r2, #64	; 0x40
 8000d5c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d5e:	4b22      	ldr	r3, [pc, #136]	; (8000de8 <HAL_I2S_MspInit+0x184>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d64:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <HAL_I2S_MspInit+0x184>)
 8000d66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d6a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <HAL_I2S_MspInit+0x184>)
 8000d6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d72:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <HAL_I2S_MspInit+0x184>)
 8000d76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d7a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <HAL_I2S_MspInit+0x184>)
 8000d7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d82:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <HAL_I2S_MspInit+0x184>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <HAL_I2S_MspInit+0x184>)
 8000d8c:	2204      	movs	r2, #4
 8000d8e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_I2S_MspInit+0x184>)
 8000d92:	2203      	movs	r2, #3
 8000d94:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <HAL_I2S_MspInit+0x184>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_I2S_MspInit+0x184>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000da2:	4811      	ldr	r0, [pc, #68]	; (8000de8 <HAL_I2S_MspInit+0x184>)
 8000da4:	f000 fa72 	bl	800128c <HAL_DMA_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 8000dae:	f7ff fee3 	bl	8000b78 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a0c      	ldr	r2, [pc, #48]	; (8000de8 <HAL_I2S_MspInit+0x184>)
 8000db6:	639a      	str	r2, [r3, #56]	; 0x38
 8000db8:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <HAL_I2S_MspInit+0x184>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2033      	movs	r0, #51	; 0x33
 8000dc4:	f000 fa2b 	bl	800121e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000dc8:	2033      	movs	r0, #51	; 0x33
 8000dca:	f000 fa44 	bl	8001256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000dce:	bf00      	nop
 8000dd0:	3738      	adds	r7, #56	; 0x38
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40003c00 	.word	0x40003c00
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020000 	.word	0x40020000
 8000de4:	40020800 	.word	0x40020800
 8000de8:	200001e8 	.word	0x200001e8
 8000dec:	40026088 	.word	0x40026088

08000df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <HAL_TIM_Base_MspInit+0x3c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d10d      	bne.n	8000e1e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_TIM_Base_MspInit+0x40>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	4a09      	ldr	r2, [pc, #36]	; (8000e30 <HAL_TIM_Base_MspInit+0x40>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6413      	str	r3, [r2, #64]	; 0x40
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <HAL_TIM_Base_MspInit+0x40>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40000800 	.word	0x40000800
 8000e30:	40023800 	.word	0x40023800

08000e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <NMI_Handler+0x4>

08000e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <MemManage_Handler+0x4>

08000e46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <BusFault_Handler+0x4>

08000e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <UsageFault_Handler+0x4>

08000e52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e80:	f000 f8ae 	bl	8000fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <DMA1_Stream5_IRQHandler+0x10>)
 8000e8e:	f000 faab 	bl	80013e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200001e8 	.word	0x200001e8

08000e9c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <SPI3_IRQHandler+0x10>)
 8000ea2:	f001 fc2f 	bl	8002704 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200001a0 	.word	0x200001a0

08000eb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <OTG_FS_IRQHandler+0x10>)
 8000eb6:	f002 f8d7 	bl	8003068 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000774 	.word	0x20000774

08000ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <SystemInit+0x20>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <SystemInit+0x20>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eee:	490e      	ldr	r1, [pc, #56]	; (8000f28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ef0:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef4:	e002      	b.n	8000efc <LoopCopyDataInit>

08000ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efa:	3304      	adds	r3, #4

08000efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f00:	d3f9      	bcc.n	8000ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f02:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f04:	4c0b      	ldr	r4, [pc, #44]	; (8000f34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f08:	e001      	b.n	8000f0e <LoopFillZerobss>

08000f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f0c:	3204      	adds	r2, #4

08000f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f10:	d3fb      	bcc.n	8000f0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f12:	f7ff ffd7 	bl	8000ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f16:	f008 f9f5 	bl	8009304 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1a:	f7ff fbd4 	bl	80006c6 <main>
  bx  lr    
 8000f1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8000f2c:	080093dc 	.word	0x080093dc
  ldr r2, =_sbss
 8000f30:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8000f34:	200048d4 	.word	0x200048d4

08000f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC_IRQHandler>
	...

08000f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <HAL_Init+0x40>)
 8000f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <HAL_Init+0x40>)
 8000f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <HAL_Init+0x40>)
 8000f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f64:	2003      	movs	r0, #3
 8000f66:	f000 f94f 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f000 f808 	bl	8000f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f70:	f7ff fe08 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023c00 	.word	0x40023c00

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x54>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_InitTick+0x58>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f967 	bl	8001272 <HAL_SYSTICK_Config>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00e      	b.n	8000fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b0f      	cmp	r3, #15
 8000fb2:	d80a      	bhi.n	8000fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f000 f92f 	bl	800121e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <HAL_InitTick+0x5c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e000      	b.n	8000fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	2000000c 	.word	0x2000000c
 8000fdc:	20000008 	.word	0x20000008

08000fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x20>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_IncTick+0x24>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	2000000c 	.word	0x2000000c
 8001004:	20000290 	.word	0x20000290

08001008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_GetTick+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000290 	.word	0x20000290

08001020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff ffee 	bl	8001008 <HAL_GetTick>
 800102c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	d005      	beq.n	8001046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_Delay+0x44>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001046:	bf00      	nop
 8001048:	f7ff ffde 	bl	8001008 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8f7      	bhi.n	8001048 <HAL_Delay+0x28>
  {
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000000c 	.word	0x2000000c

08001068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109a:	4a04      	ldr	r2, [pc, #16]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	60d3      	str	r3, [r2, #12]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	db0b      	blt.n	80010f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 021f 	and.w	r2, r3, #31
 80010e4:	4907      	ldr	r1, [pc, #28]	; (8001104 <__NVIC_EnableIRQ+0x38>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	095b      	lsrs	r3, r3, #5
 80010ec:	2001      	movs	r0, #1
 80010ee:	fa00 f202 	lsl.w	r2, r0, r2
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff ff8e 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff29 	bl	8001068 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff3e 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff8e 	bl	800115c <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5d 	bl	8001108 <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff31 	bl	80010cc <__NVIC_EnableIRQ>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffa2 	bl	80011c4 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff feb6 	bl	8001008 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e099      	b.n	80013dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2202      	movs	r2, #2
 80012ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0201 	bic.w	r2, r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012c8:	e00f      	b.n	80012ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ca:	f7ff fe9d 	bl	8001008 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b05      	cmp	r3, #5
 80012d6:	d908      	bls.n	80012ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2220      	movs	r2, #32
 80012dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2203      	movs	r2, #3
 80012e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e078      	b.n	80013dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1e8      	bne.n	80012ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	4b38      	ldr	r3, [pc, #224]	; (80013e4 <HAL_DMA_Init+0x158>)
 8001304:	4013      	ands	r3, r2
 8001306:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001316:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001322:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800132e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	4313      	orrs	r3, r2
 800133a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001340:	2b04      	cmp	r3, #4
 8001342:	d107      	bne.n	8001354 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134c:	4313      	orrs	r3, r2
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	4313      	orrs	r3, r2
 8001352:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f023 0307 	bic.w	r3, r3, #7
 800136a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	4313      	orrs	r3, r2
 8001374:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	2b04      	cmp	r3, #4
 800137c:	d117      	bne.n	80013ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	4313      	orrs	r3, r2
 8001386:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00e      	beq.n	80013ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 f9e9 	bl	8001768 <DMA_CheckFifoParam>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d008      	beq.n	80013ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2240      	movs	r2, #64	; 0x40
 80013a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013aa:	2301      	movs	r3, #1
 80013ac:	e016      	b.n	80013dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 f9a0 	bl	80016fc <DMA_CalcBaseAndBitshift>
 80013bc:	4603      	mov	r3, r0
 80013be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c4:	223f      	movs	r2, #63	; 0x3f
 80013c6:	409a      	lsls	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	f010803f 	.word	0xf010803f

080013e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013f4:	4b8e      	ldr	r3, [pc, #568]	; (8001630 <HAL_DMA_IRQHandler+0x248>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a8e      	ldr	r2, [pc, #568]	; (8001634 <HAL_DMA_IRQHandler+0x24c>)
 80013fa:	fba2 2303 	umull	r2, r3, r2, r3
 80013fe:	0a9b      	lsrs	r3, r3, #10
 8001400:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001406:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001412:	2208      	movs	r2, #8
 8001414:	409a      	lsls	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4013      	ands	r3, r2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d01a      	beq.n	8001454 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	2b00      	cmp	r3, #0
 800142a:	d013      	beq.n	8001454 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0204 	bic.w	r2, r2, #4
 800143a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001440:	2208      	movs	r2, #8
 8001442:	409a      	lsls	r2, r3
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144c:	f043 0201 	orr.w	r2, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001458:	2201      	movs	r2, #1
 800145a:	409a      	lsls	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4013      	ands	r3, r2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d012      	beq.n	800148a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00b      	beq.n	800148a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001476:	2201      	movs	r2, #1
 8001478:	409a      	lsls	r2, r3
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001482:	f043 0202 	orr.w	r2, r3, #2
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148e:	2204      	movs	r2, #4
 8001490:	409a      	lsls	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4013      	ands	r3, r2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d012      	beq.n	80014c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00b      	beq.n	80014c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ac:	2204      	movs	r2, #4
 80014ae:	409a      	lsls	r2, r3
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b8:	f043 0204 	orr.w	r2, r3, #4
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c4:	2210      	movs	r2, #16
 80014c6:	409a      	lsls	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d043      	beq.n	8001558 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d03c      	beq.n	8001558 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e2:	2210      	movs	r2, #16
 80014e4:	409a      	lsls	r2, r3
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d018      	beq.n	800152a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d108      	bne.n	8001518 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	2b00      	cmp	r3, #0
 800150c:	d024      	beq.n	8001558 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	4798      	blx	r3
 8001516:	e01f      	b.n	8001558 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151c:	2b00      	cmp	r3, #0
 800151e:	d01b      	beq.n	8001558 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	4798      	blx	r3
 8001528:	e016      	b.n	8001558 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001534:	2b00      	cmp	r3, #0
 8001536:	d107      	bne.n	8001548 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0208 	bic.w	r2, r2, #8
 8001546:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155c:	2220      	movs	r2, #32
 800155e:	409a      	lsls	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4013      	ands	r3, r2
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 808f 	beq.w	8001688 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0310 	and.w	r3, r3, #16
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 8087 	beq.w	8001688 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	2220      	movs	r2, #32
 8001580:	409a      	lsls	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b05      	cmp	r3, #5
 8001590:	d136      	bne.n	8001600 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0216 	bic.w	r2, r2, #22
 80015a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	695a      	ldr	r2, [r3, #20]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d103      	bne.n	80015c2 <HAL_DMA_IRQHandler+0x1da>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d007      	beq.n	80015d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0208 	bic.w	r2, r2, #8
 80015d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d6:	223f      	movs	r2, #63	; 0x3f
 80015d8:	409a      	lsls	r2, r3
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d07e      	beq.n	80016f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	4798      	blx	r3
        }
        return;
 80015fe:	e079      	b.n	80016f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d01d      	beq.n	800164a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10d      	bne.n	8001638 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001620:	2b00      	cmp	r3, #0
 8001622:	d031      	beq.n	8001688 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	4798      	blx	r3
 800162c:	e02c      	b.n	8001688 <HAL_DMA_IRQHandler+0x2a0>
 800162e:	bf00      	nop
 8001630:	20000004 	.word	0x20000004
 8001634:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163c:	2b00      	cmp	r3, #0
 800163e:	d023      	beq.n	8001688 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	4798      	blx	r3
 8001648:	e01e      	b.n	8001688 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10f      	bne.n	8001678 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0210 	bic.w	r2, r2, #16
 8001666:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168c:	2b00      	cmp	r3, #0
 800168e:	d032      	beq.n	80016f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d022      	beq.n	80016e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2205      	movs	r2, #5
 80016a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0201 	bic.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	3301      	adds	r3, #1
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d307      	bcc.n	80016d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f2      	bne.n	80016b4 <HAL_DMA_IRQHandler+0x2cc>
 80016ce:	e000      	b.n	80016d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80016d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d005      	beq.n	80016f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	4798      	blx	r3
 80016f2:	e000      	b.n	80016f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80016f4:	bf00      	nop
    }
  }
}
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	3b10      	subs	r3, #16
 800170c:	4a14      	ldr	r2, [pc, #80]	; (8001760 <DMA_CalcBaseAndBitshift+0x64>)
 800170e:	fba2 2303 	umull	r2, r3, r2, r3
 8001712:	091b      	lsrs	r3, r3, #4
 8001714:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001716:	4a13      	ldr	r2, [pc, #76]	; (8001764 <DMA_CalcBaseAndBitshift+0x68>)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b03      	cmp	r3, #3
 8001728:	d909      	bls.n	800173e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001732:	f023 0303 	bic.w	r3, r3, #3
 8001736:	1d1a      	adds	r2, r3, #4
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	659a      	str	r2, [r3, #88]	; 0x58
 800173c:	e007      	b.n	800174e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001746:	f023 0303 	bic.w	r3, r3, #3
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	aaaaaaab 	.word	0xaaaaaaab
 8001764:	080093c4 	.word	0x080093c4

08001768 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001778:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d11f      	bne.n	80017c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2b03      	cmp	r3, #3
 8001786:	d856      	bhi.n	8001836 <DMA_CheckFifoParam+0xce>
 8001788:	a201      	add	r2, pc, #4	; (adr r2, 8001790 <DMA_CheckFifoParam+0x28>)
 800178a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178e:	bf00      	nop
 8001790:	080017a1 	.word	0x080017a1
 8001794:	080017b3 	.word	0x080017b3
 8001798:	080017a1 	.word	0x080017a1
 800179c:	08001837 	.word	0x08001837
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d046      	beq.n	800183a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017b0:	e043      	b.n	800183a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017ba:	d140      	bne.n	800183e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017c0:	e03d      	b.n	800183e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ca:	d121      	bne.n	8001810 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d837      	bhi.n	8001842 <DMA_CheckFifoParam+0xda>
 80017d2:	a201      	add	r2, pc, #4	; (adr r2, 80017d8 <DMA_CheckFifoParam+0x70>)
 80017d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d8:	080017e9 	.word	0x080017e9
 80017dc:	080017ef 	.word	0x080017ef
 80017e0:	080017e9 	.word	0x080017e9
 80017e4:	08001801 	.word	0x08001801
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
      break;
 80017ec:	e030      	b.n	8001850 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d025      	beq.n	8001846 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017fe:	e022      	b.n	8001846 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001804:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001808:	d11f      	bne.n	800184a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800180e:	e01c      	b.n	800184a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d903      	bls.n	800181e <DMA_CheckFifoParam+0xb6>
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2b03      	cmp	r3, #3
 800181a:	d003      	beq.n	8001824 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800181c:	e018      	b.n	8001850 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	73fb      	strb	r3, [r7, #15]
      break;
 8001822:	e015      	b.n	8001850 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00e      	beq.n	800184e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
      break;
 8001834:	e00b      	b.n	800184e <DMA_CheckFifoParam+0xe6>
      break;
 8001836:	bf00      	nop
 8001838:	e00a      	b.n	8001850 <DMA_CheckFifoParam+0xe8>
      break;
 800183a:	bf00      	nop
 800183c:	e008      	b.n	8001850 <DMA_CheckFifoParam+0xe8>
      break;
 800183e:	bf00      	nop
 8001840:	e006      	b.n	8001850 <DMA_CheckFifoParam+0xe8>
      break;
 8001842:	bf00      	nop
 8001844:	e004      	b.n	8001850 <DMA_CheckFifoParam+0xe8>
      break;
 8001846:	bf00      	nop
 8001848:	e002      	b.n	8001850 <DMA_CheckFifoParam+0xe8>
      break;   
 800184a:	bf00      	nop
 800184c:	e000      	b.n	8001850 <DMA_CheckFifoParam+0xe8>
      break;
 800184e:	bf00      	nop
    }
  } 
  
  return status; 
 8001850:	7bfb      	ldrb	r3, [r7, #15]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop

08001860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	e16b      	b.n	8001b54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800187c:	2201      	movs	r2, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	429a      	cmp	r2, r3
 8001896:	f040 815a 	bne.w	8001b4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d005      	beq.n	80018b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d130      	bne.n	8001914 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	2203      	movs	r2, #3
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e8:	2201      	movs	r2, #1
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f003 0201 	and.w	r2, r3, #1
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b03      	cmp	r3, #3
 800191e:	d017      	beq.n	8001950 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2203      	movs	r2, #3
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d123      	bne.n	80019a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	08da      	lsrs	r2, r3, #3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3208      	adds	r2, #8
 8001964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	08da      	lsrs	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3208      	adds	r2, #8
 800199e:	69b9      	ldr	r1, [r7, #24]
 80019a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	2203      	movs	r2, #3
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0203 	and.w	r2, r3, #3
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 80b4 	beq.w	8001b4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b60      	ldr	r3, [pc, #384]	; (8001b6c <HAL_GPIO_Init+0x30c>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a5f      	ldr	r2, [pc, #380]	; (8001b6c <HAL_GPIO_Init+0x30c>)
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b5d      	ldr	r3, [pc, #372]	; (8001b6c <HAL_GPIO_Init+0x30c>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a02:	4a5b      	ldr	r2, [pc, #364]	; (8001b70 <HAL_GPIO_Init+0x310>)
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	089b      	lsrs	r3, r3, #2
 8001a08:	3302      	adds	r3, #2
 8001a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	220f      	movs	r2, #15
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a52      	ldr	r2, [pc, #328]	; (8001b74 <HAL_GPIO_Init+0x314>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d02b      	beq.n	8001a86 <HAL_GPIO_Init+0x226>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a51      	ldr	r2, [pc, #324]	; (8001b78 <HAL_GPIO_Init+0x318>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d025      	beq.n	8001a82 <HAL_GPIO_Init+0x222>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a50      	ldr	r2, [pc, #320]	; (8001b7c <HAL_GPIO_Init+0x31c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d01f      	beq.n	8001a7e <HAL_GPIO_Init+0x21e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4f      	ldr	r2, [pc, #316]	; (8001b80 <HAL_GPIO_Init+0x320>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d019      	beq.n	8001a7a <HAL_GPIO_Init+0x21a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4e      	ldr	r2, [pc, #312]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d013      	beq.n	8001a76 <HAL_GPIO_Init+0x216>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4d      	ldr	r2, [pc, #308]	; (8001b88 <HAL_GPIO_Init+0x328>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00d      	beq.n	8001a72 <HAL_GPIO_Init+0x212>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4c      	ldr	r2, [pc, #304]	; (8001b8c <HAL_GPIO_Init+0x32c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d007      	beq.n	8001a6e <HAL_GPIO_Init+0x20e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4b      	ldr	r2, [pc, #300]	; (8001b90 <HAL_GPIO_Init+0x330>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d101      	bne.n	8001a6a <HAL_GPIO_Init+0x20a>
 8001a66:	2307      	movs	r3, #7
 8001a68:	e00e      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a6a:	2308      	movs	r3, #8
 8001a6c:	e00c      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a6e:	2306      	movs	r3, #6
 8001a70:	e00a      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a72:	2305      	movs	r3, #5
 8001a74:	e008      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a76:	2304      	movs	r3, #4
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e004      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a86:	2300      	movs	r3, #0
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	f002 0203 	and.w	r2, r2, #3
 8001a8e:	0092      	lsls	r2, r2, #2
 8001a90:	4093      	lsls	r3, r2
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a98:	4935      	ldr	r1, [pc, #212]	; (8001b70 <HAL_GPIO_Init+0x310>)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa6:	4b3b      	ldr	r3, [pc, #236]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aca:	4a32      	ldr	r2, [pc, #200]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad0:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af4:	4a27      	ldr	r2, [pc, #156]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001afa:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b1e:	4a1d      	ldr	r2, [pc, #116]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b48:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3301      	adds	r3, #1
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	f67f ae90 	bls.w	800187c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3724      	adds	r7, #36	; 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40013800 	.word	0x40013800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40020400 	.word	0x40020400
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40021400 	.word	0x40021400
 8001b8c:	40021800 	.word	0x40021800
 8001b90:	40021c00 	.word	0x40021c00
 8001b94:	40013c00 	.word	0x40013c00

08001b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba8:	787b      	ldrb	r3, [r7, #1]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb4:	e003      	b.n	8001bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bb6:	887b      	ldrh	r3, [r7, #2]
 8001bb8:	041a      	lsls	r2, r3, #16
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	619a      	str	r2, [r3, #24]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e12b      	b.n	8001e36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d106      	bne.n	8001bf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7fe ffee 	bl	8000bd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2224      	movs	r2, #36	; 0x24
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0201 	bic.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c30:	f002 ffb8 	bl	8004ba4 <HAL_RCC_GetPCLK1Freq>
 8001c34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4a81      	ldr	r2, [pc, #516]	; (8001e40 <HAL_I2C_Init+0x274>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d807      	bhi.n	8001c50 <HAL_I2C_Init+0x84>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4a80      	ldr	r2, [pc, #512]	; (8001e44 <HAL_I2C_Init+0x278>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	bf94      	ite	ls
 8001c48:	2301      	movls	r3, #1
 8001c4a:	2300      	movhi	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	e006      	b.n	8001c5e <HAL_I2C_Init+0x92>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4a7d      	ldr	r2, [pc, #500]	; (8001e48 <HAL_I2C_Init+0x27c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	bf94      	ite	ls
 8001c58:	2301      	movls	r3, #1
 8001c5a:	2300      	movhi	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0e7      	b.n	8001e36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4a78      	ldr	r2, [pc, #480]	; (8001e4c <HAL_I2C_Init+0x280>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	0c9b      	lsrs	r3, r3, #18
 8001c70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4a6a      	ldr	r2, [pc, #424]	; (8001e40 <HAL_I2C_Init+0x274>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d802      	bhi.n	8001ca0 <HAL_I2C_Init+0xd4>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	e009      	b.n	8001cb4 <HAL_I2C_Init+0xe8>
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ca6:	fb02 f303 	mul.w	r3, r2, r3
 8001caa:	4a69      	ldr	r2, [pc, #420]	; (8001e50 <HAL_I2C_Init+0x284>)
 8001cac:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb0:	099b      	lsrs	r3, r3, #6
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	495c      	ldr	r1, [pc, #368]	; (8001e40 <HAL_I2C_Init+0x274>)
 8001cd0:	428b      	cmp	r3, r1
 8001cd2:	d819      	bhi.n	8001d08 <HAL_I2C_Init+0x13c>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1e59      	subs	r1, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ce2:	1c59      	adds	r1, r3, #1
 8001ce4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ce8:	400b      	ands	r3, r1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00a      	beq.n	8001d04 <HAL_I2C_Init+0x138>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1e59      	subs	r1, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d02:	e051      	b.n	8001da8 <HAL_I2C_Init+0x1dc>
 8001d04:	2304      	movs	r3, #4
 8001d06:	e04f      	b.n	8001da8 <HAL_I2C_Init+0x1dc>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d111      	bne.n	8001d34 <HAL_I2C_Init+0x168>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1e58      	subs	r0, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6859      	ldr	r1, [r3, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	440b      	add	r3, r1
 8001d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d22:	3301      	adds	r3, #1
 8001d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bf0c      	ite	eq
 8001d2c:	2301      	moveq	r3, #1
 8001d2e:	2300      	movne	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	e012      	b.n	8001d5a <HAL_I2C_Init+0x18e>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	1e58      	subs	r0, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6859      	ldr	r1, [r3, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	0099      	lsls	r1, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bf0c      	ite	eq
 8001d54:	2301      	moveq	r3, #1
 8001d56:	2300      	movne	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_I2C_Init+0x196>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e022      	b.n	8001da8 <HAL_I2C_Init+0x1dc>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10e      	bne.n	8001d88 <HAL_I2C_Init+0x1bc>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1e58      	subs	r0, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6859      	ldr	r1, [r3, #4]
 8001d72:	460b      	mov	r3, r1
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	440b      	add	r3, r1
 8001d78:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d86:	e00f      	b.n	8001da8 <HAL_I2C_Init+0x1dc>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1e58      	subs	r0, r3, #1
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6859      	ldr	r1, [r3, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	0099      	lsls	r1, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9e:	3301      	adds	r3, #1
 8001da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	6809      	ldr	r1, [r1, #0]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69da      	ldr	r2, [r3, #28]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6911      	ldr	r1, [r2, #16]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68d2      	ldr	r2, [r2, #12]
 8001de2:	4311      	orrs	r1, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	430b      	orrs	r3, r1
 8001dea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2220      	movs	r2, #32
 8001e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	000186a0 	.word	0x000186a0
 8001e44:	001e847f 	.word	0x001e847f
 8001e48:	003d08ff 	.word	0x003d08ff
 8001e4c:	431bde83 	.word	0x431bde83
 8001e50:	10624dd3 	.word	0x10624dd3

08001e54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af02      	add	r7, sp, #8
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	4608      	mov	r0, r1
 8001e5e:	4611      	mov	r1, r2
 8001e60:	461a      	mov	r2, r3
 8001e62:	4603      	mov	r3, r0
 8001e64:	817b      	strh	r3, [r7, #10]
 8001e66:	460b      	mov	r3, r1
 8001e68:	813b      	strh	r3, [r7, #8]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e6e:	f7ff f8cb 	bl	8001008 <HAL_GetTick>
 8001e72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b20      	cmp	r3, #32
 8001e7e:	f040 80d9 	bne.w	8002034 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	2319      	movs	r3, #25
 8001e88:	2201      	movs	r2, #1
 8001e8a:	496d      	ldr	r1, [pc, #436]	; (8002040 <HAL_I2C_Mem_Write+0x1ec>)
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f971 	bl	8002174 <I2C_WaitOnFlagUntilTimeout>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e0cc      	b.n	8002036 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_I2C_Mem_Write+0x56>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e0c5      	b.n	8002036 <HAL_I2C_Mem_Write+0x1e2>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d007      	beq.n	8001ed0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ede:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2221      	movs	r2, #33	; 0x21
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2240      	movs	r2, #64	; 0x40
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6a3a      	ldr	r2, [r7, #32]
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4a4d      	ldr	r2, [pc, #308]	; (8002044 <HAL_I2C_Mem_Write+0x1f0>)
 8001f10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f12:	88f8      	ldrh	r0, [r7, #6]
 8001f14:	893a      	ldrh	r2, [r7, #8]
 8001f16:	8979      	ldrh	r1, [r7, #10]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	9301      	str	r3, [sp, #4]
 8001f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	4603      	mov	r3, r0
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 f890 	bl	8002048 <I2C_RequestMemoryWrite>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d052      	beq.n	8001fd4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e081      	b.n	8002036 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f9f2 	bl	8002320 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00d      	beq.n	8001f5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d107      	bne.n	8001f5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e06b      	b.n	8002036 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	781a      	ldrb	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d11b      	bne.n	8001fd4 <HAL_I2C_Mem_Write+0x180>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d017      	beq.n	8001fd4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	781a      	ldrb	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	1c5a      	adds	r2, r3, #1
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1aa      	bne.n	8001f32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f9de 	bl	80023a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00d      	beq.n	8002008 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d107      	bne.n	8002004 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002002:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e016      	b.n	8002036 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	e000      	b.n	8002036 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002034:	2302      	movs	r3, #2
  }
}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	00100002 	.word	0x00100002
 8002044:	ffff0000 	.word	0xffff0000

08002048 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af02      	add	r7, sp, #8
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	4608      	mov	r0, r1
 8002052:	4611      	mov	r1, r2
 8002054:	461a      	mov	r2, r3
 8002056:	4603      	mov	r3, r0
 8002058:	817b      	strh	r3, [r7, #10]
 800205a:	460b      	mov	r3, r1
 800205c:	813b      	strh	r3, [r7, #8]
 800205e:	4613      	mov	r3, r2
 8002060:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002070:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	2200      	movs	r2, #0
 800207a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 f878 	bl	8002174 <I2C_WaitOnFlagUntilTimeout>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00d      	beq.n	80020a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002098:	d103      	bne.n	80020a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e05f      	b.n	8002166 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020a6:	897b      	ldrh	r3, [r7, #10]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	461a      	mov	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	6a3a      	ldr	r2, [r7, #32]
 80020ba:	492d      	ldr	r1, [pc, #180]	; (8002170 <I2C_RequestMemoryWrite+0x128>)
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 f8b0 	bl	8002222 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e04c      	b.n	8002166 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e4:	6a39      	ldr	r1, [r7, #32]
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f91a 	bl	8002320 <I2C_WaitOnTXEFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00d      	beq.n	800210e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d107      	bne.n	800210a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002108:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e02b      	b.n	8002166 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d105      	bne.n	8002120 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002114:	893b      	ldrh	r3, [r7, #8]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	611a      	str	r2, [r3, #16]
 800211e:	e021      	b.n	8002164 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002120:	893b      	ldrh	r3, [r7, #8]
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	b29b      	uxth	r3, r3
 8002126:	b2da      	uxtb	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800212e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002130:	6a39      	ldr	r1, [r7, #32]
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f8f4 	bl	8002320 <I2C_WaitOnTXEFlagUntilTimeout>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00d      	beq.n	800215a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	2b04      	cmp	r3, #4
 8002144:	d107      	bne.n	8002156 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002154:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e005      	b.n	8002166 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800215a:	893b      	ldrh	r3, [r7, #8]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	00010002 	.word	0x00010002

08002174 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	4613      	mov	r3, r2
 8002182:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002184:	e025      	b.n	80021d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218c:	d021      	beq.n	80021d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800218e:	f7fe ff3b 	bl	8001008 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d302      	bcc.n	80021a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d116      	bne.n	80021d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f043 0220 	orr.w	r2, r3, #32
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e023      	b.n	800221a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	0c1b      	lsrs	r3, r3, #16
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d10d      	bne.n	80021f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	4013      	ands	r3, r2
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	bf0c      	ite	eq
 80021ee:	2301      	moveq	r3, #1
 80021f0:	2300      	movne	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	e00c      	b.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	43da      	mvns	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	4013      	ands	r3, r2
 8002204:	b29b      	uxth	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	429a      	cmp	r2, r3
 8002216:	d0b6      	beq.n	8002186 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002230:	e051      	b.n	80022d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002240:	d123      	bne.n	800228a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002250:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800225a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2220      	movs	r2, #32
 8002266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f043 0204 	orr.w	r2, r3, #4
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e046      	b.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002290:	d021      	beq.n	80022d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002292:	f7fe feb9 	bl	8001008 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d302      	bcc.n	80022a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d116      	bne.n	80022d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2220      	movs	r2, #32
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f043 0220 	orr.w	r2, r3, #32
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e020      	b.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	0c1b      	lsrs	r3, r3, #16
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d10c      	bne.n	80022fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	43da      	mvns	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4013      	ands	r3, r2
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	bf14      	ite	ne
 80022f2:	2301      	movne	r3, #1
 80022f4:	2300      	moveq	r3, #0
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	e00b      	b.n	8002312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	43da      	mvns	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	4013      	ands	r3, r2
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf14      	ite	ne
 800230c:	2301      	movne	r3, #1
 800230e:	2300      	moveq	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d18d      	bne.n	8002232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800232c:	e02d      	b.n	800238a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 f878 	bl	8002424 <I2C_IsAcknowledgeFailed>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e02d      	b.n	800239a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002344:	d021      	beq.n	800238a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002346:	f7fe fe5f 	bl	8001008 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	429a      	cmp	r2, r3
 8002354:	d302      	bcc.n	800235c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d116      	bne.n	800238a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2220      	movs	r2, #32
 8002366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f043 0220 	orr.w	r2, r3, #32
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e007      	b.n	800239a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002394:	2b80      	cmp	r3, #128	; 0x80
 8002396:	d1ca      	bne.n	800232e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023ae:	e02d      	b.n	800240c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f837 	bl	8002424 <I2C_IsAcknowledgeFailed>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e02d      	b.n	800241c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c6:	d021      	beq.n	800240c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c8:	f7fe fe1e 	bl	8001008 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d302      	bcc.n	80023de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d116      	bne.n	800240c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	f043 0220 	orr.w	r2, r3, #32
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e007      	b.n	800241c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b04      	cmp	r3, #4
 8002418:	d1ca      	bne.n	80023b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800243a:	d11b      	bne.n	8002474 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002444:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f043 0204 	orr.w	r2, r3, #4
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e128      	b.n	80026e8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a90      	ldr	r2, [pc, #576]	; (80026f0 <HAL_I2S_Init+0x26c>)
 80024ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7fe fbd7 	bl	8000c64 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2202      	movs	r2, #2
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80024cc:	f023 030f 	bic.w	r3, r3, #15
 80024d0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2202      	movs	r2, #2
 80024d8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d060      	beq.n	80025a4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d102      	bne.n	80024f0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80024ea:	2310      	movs	r3, #16
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	e001      	b.n	80024f4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80024f0:	2320      	movs	r3, #32
 80024f2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b20      	cmp	r3, #32
 80024fa:	d802      	bhi.n	8002502 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002502:	2001      	movs	r0, #1
 8002504:	f002 fc44 	bl	8004d90 <HAL_RCCEx_GetPeriphCLKFreq>
 8002508:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002512:	d125      	bne.n	8002560 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d010      	beq.n	800253e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	fbb2 f2f3 	udiv	r2, r2, r3
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	461a      	mov	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	fbb2 f3f3 	udiv	r3, r2, r3
 8002538:	3305      	adds	r3, #5
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	e01f      	b.n	800257e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	fbb2 f2f3 	udiv	r2, r2, r3
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	461a      	mov	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	fbb2 f3f3 	udiv	r3, r2, r3
 800255a:	3305      	adds	r3, #5
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	e00e      	b.n	800257e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	fbb2 f2f3 	udiv	r2, r2, r3
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	461a      	mov	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	3305      	adds	r3, #5
 800257c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4a5c      	ldr	r2, [pc, #368]	; (80026f4 <HAL_I2S_Init+0x270>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	08db      	lsrs	r3, r3, #3
 8002588:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	085b      	lsrs	r3, r3, #1
 800259a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	021b      	lsls	r3, r3, #8
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	e003      	b.n	80025ac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80025a4:	2302      	movs	r3, #2
 80025a6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d902      	bls.n	80025b8 <HAL_I2S_Init+0x134>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	2bff      	cmp	r3, #255	; 0xff
 80025b6:	d907      	bls.n	80025c8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	f043 0210 	orr.w	r2, r3, #16
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e08f      	b.n	80026e8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	ea42 0103 	orr.w	r1, r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	430a      	orrs	r2, r1
 80025da:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80025e6:	f023 030f 	bic.w	r3, r3, #15
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6851      	ldr	r1, [r2, #4]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6892      	ldr	r2, [r2, #8]
 80025f2:	4311      	orrs	r1, r2
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	68d2      	ldr	r2, [r2, #12]
 80025f8:	4311      	orrs	r1, r2
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6992      	ldr	r2, [r2, #24]
 80025fe:	430a      	orrs	r2, r1
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800260a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d161      	bne.n	80026d8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a38      	ldr	r2, [pc, #224]	; (80026f8 <HAL_I2S_Init+0x274>)
 8002618:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a37      	ldr	r2, [pc, #220]	; (80026fc <HAL_I2S_Init+0x278>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d101      	bne.n	8002628 <HAL_I2S_Init+0x1a4>
 8002624:	4b36      	ldr	r3, [pc, #216]	; (8002700 <HAL_I2S_Init+0x27c>)
 8002626:	e001      	b.n	800262c <HAL_I2S_Init+0x1a8>
 8002628:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	4932      	ldr	r1, [pc, #200]	; (80026fc <HAL_I2S_Init+0x278>)
 8002634:	428a      	cmp	r2, r1
 8002636:	d101      	bne.n	800263c <HAL_I2S_Init+0x1b8>
 8002638:	4a31      	ldr	r2, [pc, #196]	; (8002700 <HAL_I2S_Init+0x27c>)
 800263a:	e001      	b.n	8002640 <HAL_I2S_Init+0x1bc>
 800263c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002640:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002644:	f023 030f 	bic.w	r3, r3, #15
 8002648:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a2b      	ldr	r2, [pc, #172]	; (80026fc <HAL_I2S_Init+0x278>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d101      	bne.n	8002658 <HAL_I2S_Init+0x1d4>
 8002654:	4b2a      	ldr	r3, [pc, #168]	; (8002700 <HAL_I2S_Init+0x27c>)
 8002656:	e001      	b.n	800265c <HAL_I2S_Init+0x1d8>
 8002658:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800265c:	2202      	movs	r2, #2
 800265e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a25      	ldr	r2, [pc, #148]	; (80026fc <HAL_I2S_Init+0x278>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d101      	bne.n	800266e <HAL_I2S_Init+0x1ea>
 800266a:	4b25      	ldr	r3, [pc, #148]	; (8002700 <HAL_I2S_Init+0x27c>)
 800266c:	e001      	b.n	8002672 <HAL_I2S_Init+0x1ee>
 800266e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800267e:	d003      	beq.n	8002688 <HAL_I2S_Init+0x204>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d103      	bne.n	8002690 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	e001      	b.n	8002694 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002690:	2300      	movs	r3, #0
 8002692:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800269e:	4313      	orrs	r3, r2
 80026a0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026a8:	4313      	orrs	r3, r2
 80026aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026b2:	4313      	orrs	r3, r2
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	897b      	ldrh	r3, [r7, #10]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026c0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <HAL_I2S_Init+0x278>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d101      	bne.n	80026d0 <HAL_I2S_Init+0x24c>
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <HAL_I2S_Init+0x27c>)
 80026ce:	e001      	b.n	80026d4 <HAL_I2S_Init+0x250>
 80026d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026d4:	897a      	ldrh	r2, [r7, #10]
 80026d6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	080027ff 	.word	0x080027ff
 80026f4:	cccccccd 	.word	0xcccccccd
 80026f8:	08002915 	.word	0x08002915
 80026fc:	40003800 	.word	0x40003800
 8002700:	40003400 	.word	0x40003400

08002704 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	4798      	blx	r3
}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	881a      	ldrh	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	1c9a      	adds	r2, r3, #2
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10e      	bne.n	8002798 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002788:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7fd ff80 	bl	8000698 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	b292      	uxth	r2, r2
 80027b4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	1c9a      	adds	r2, r3, #2
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10e      	bne.n	80027f6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027e6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff ff93 	bl	800271c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b086      	sub	sp, #24
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b04      	cmp	r3, #4
 8002818:	d13a      	bne.n	8002890 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b01      	cmp	r3, #1
 8002822:	d109      	bne.n	8002838 <I2S_IRQHandler+0x3a>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282e:	2b40      	cmp	r3, #64	; 0x40
 8002830:	d102      	bne.n	8002838 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff ffb4 	bl	80027a0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b40      	cmp	r3, #64	; 0x40
 8002840:	d126      	bne.n	8002890 <I2S_IRQHandler+0x92>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	2b20      	cmp	r3, #32
 800284e:	d11f      	bne.n	8002890 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800285e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002860:	2300      	movs	r3, #0
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	f043 0202 	orr.w	r2, r3, #2
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff ff50 	bl	8002730 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b03      	cmp	r3, #3
 800289a:	d136      	bne.n	800290a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d109      	bne.n	80028ba <I2S_IRQHandler+0xbc>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b0:	2b80      	cmp	r3, #128	; 0x80
 80028b2:	d102      	bne.n	80028ba <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ff45 	bl	8002744 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d122      	bne.n	800290a <I2S_IRQHandler+0x10c>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	2b20      	cmp	r3, #32
 80028d0:	d11b      	bne.n	800290a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028e0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	f043 0204 	orr.w	r2, r3, #4
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff13 	bl	8002730 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800290a:	bf00      	nop
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a92      	ldr	r2, [pc, #584]	; (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d101      	bne.n	8002932 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800292e:	4b92      	ldr	r3, [pc, #584]	; (8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002930:	e001      	b.n	8002936 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002932:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a8b      	ldr	r2, [pc, #556]	; (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d101      	bne.n	8002950 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800294c:	4b8a      	ldr	r3, [pc, #552]	; (8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800294e:	e001      	b.n	8002954 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002950:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002960:	d004      	beq.n	800296c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	f040 8099 	bne.w	8002a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b02      	cmp	r3, #2
 8002974:	d107      	bne.n	8002986 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f925 	bl	8002bd0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b01      	cmp	r3, #1
 800298e:	d107      	bne.n	80029a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f9c8 	bl	8002d30 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a6:	2b40      	cmp	r3, #64	; 0x40
 80029a8:	d13a      	bne.n	8002a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f003 0320 	and.w	r3, r3, #32
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d035      	beq.n	8002a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a6e      	ldr	r2, [pc, #440]	; (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d101      	bne.n	80029c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80029be:	4b6e      	ldr	r3, [pc, #440]	; (8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80029c0:	e001      	b.n	80029c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80029c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4969      	ldr	r1, [pc, #420]	; (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80029ce:	428b      	cmp	r3, r1
 80029d0:	d101      	bne.n	80029d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80029d2:	4b69      	ldr	r3, [pc, #420]	; (8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80029d4:	e001      	b.n	80029da <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80029d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029de:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	f043 0202 	orr.w	r2, r3, #2
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff fe88 	bl	8002730 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	f040 80c3 	bne.w	8002bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80bd 	beq.w	8002bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a46:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a49      	ldr	r2, [pc, #292]	; (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d101      	bne.n	8002a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002a52:	4b49      	ldr	r3, [pc, #292]	; (8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a54:	e001      	b.n	8002a5a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002a56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4944      	ldr	r1, [pc, #272]	; (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a62:	428b      	cmp	r3, r1
 8002a64:	d101      	bne.n	8002a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002a66:	4b44      	ldr	r3, [pc, #272]	; (8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a68:	e001      	b.n	8002a6e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002a6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a72:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a74:	2300      	movs	r3, #0
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f043 0204 	orr.w	r2, r3, #4
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff fe4a 	bl	8002730 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a9c:	e089      	b.n	8002bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d107      	bne.n	8002ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8be 	bl	8002c34 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d107      	bne.n	8002ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f8fd 	bl	8002ccc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad8:	2b40      	cmp	r3, #64	; 0x40
 8002ada:	d12f      	bne.n	8002b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d02a      	beq.n	8002b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002af4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a1e      	ldr	r2, [pc, #120]	; (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d101      	bne.n	8002b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002b00:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b02:	e001      	b.n	8002b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002b04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4919      	ldr	r1, [pc, #100]	; (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b10:	428b      	cmp	r3, r1
 8002b12:	d101      	bne.n	8002b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002b14:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b16:	e001      	b.n	8002b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002b18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b20:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	f043 0202 	orr.w	r2, r3, #2
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff fdfa 	bl	8002730 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d136      	bne.n	8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d031      	beq.n	8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d101      	bne.n	8002b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b5c:	e001      	b.n	8002b62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002b5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4902      	ldr	r1, [pc, #8]	; (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b6a:	428b      	cmp	r3, r1
 8002b6c:	d106      	bne.n	8002b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002b6e:	4b02      	ldr	r3, [pc, #8]	; (8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b70:	e006      	b.n	8002b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002b72:	bf00      	nop
 8002b74:	40003800 	.word	0x40003800
 8002b78:	40003400 	.word	0x40003400
 8002b7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b84:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b94:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	f043 0204 	orr.w	r2, r3, #4
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff fdc0 	bl	8002730 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bb0:	e000      	b.n	8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002bb2:	bf00      	nop
}
 8002bb4:	bf00      	nop
 8002bb6:	3720      	adds	r7, #32
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	1c99      	adds	r1, r3, #2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6251      	str	r1, [r2, #36]	; 0x24
 8002be2:	881a      	ldrh	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d113      	bne.n	8002c2a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c10:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d106      	bne.n	8002c2a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ffc9 	bl	8002bbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	1c99      	adds	r1, r3, #2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6251      	str	r1, [r2, #36]	; 0x24
 8002c46:	8819      	ldrh	r1, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <I2SEx_TxISR_I2SExt+0x90>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d101      	bne.n	8002c56 <I2SEx_TxISR_I2SExt+0x22>
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <I2SEx_TxISR_I2SExt+0x94>)
 8002c54:	e001      	b.n	8002c5a <I2SEx_TxISR_I2SExt+0x26>
 8002c56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c5a:	460a      	mov	r2, r1
 8002c5c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d121      	bne.n	8002cba <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <I2SEx_TxISR_I2SExt+0x90>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d101      	bne.n	8002c84 <I2SEx_TxISR_I2SExt+0x50>
 8002c80:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <I2SEx_TxISR_I2SExt+0x94>)
 8002c82:	e001      	b.n	8002c88 <I2SEx_TxISR_I2SExt+0x54>
 8002c84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	490d      	ldr	r1, [pc, #52]	; (8002cc4 <I2SEx_TxISR_I2SExt+0x90>)
 8002c90:	428b      	cmp	r3, r1
 8002c92:	d101      	bne.n	8002c98 <I2SEx_TxISR_I2SExt+0x64>
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <I2SEx_TxISR_I2SExt+0x94>)
 8002c96:	e001      	b.n	8002c9c <I2SEx_TxISR_I2SExt+0x68>
 8002c98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ca0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d106      	bne.n	8002cba <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff ff81 	bl	8002bbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40003800 	.word	0x40003800
 8002cc8:	40003400 	.word	0x40003400

08002ccc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68d8      	ldr	r0, [r3, #12]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	1c99      	adds	r1, r3, #2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002ce4:	b282      	uxth	r2, r0
 8002ce6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d113      	bne.n	8002d28 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d0e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ff4a 	bl	8002bbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a20      	ldr	r2, [pc, #128]	; (8002dc0 <I2SEx_RxISR_I2SExt+0x90>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d101      	bne.n	8002d46 <I2SEx_RxISR_I2SExt+0x16>
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <I2SEx_RxISR_I2SExt+0x94>)
 8002d44:	e001      	b.n	8002d4a <I2SEx_RxISR_I2SExt+0x1a>
 8002d46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d4a:	68d8      	ldr	r0, [r3, #12]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	1c99      	adds	r1, r3, #2
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002d56:	b282      	uxth	r2, r0
 8002d58:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d121      	bne.n	8002db6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a12      	ldr	r2, [pc, #72]	; (8002dc0 <I2SEx_RxISR_I2SExt+0x90>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d101      	bne.n	8002d80 <I2SEx_RxISR_I2SExt+0x50>
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <I2SEx_RxISR_I2SExt+0x94>)
 8002d7e:	e001      	b.n	8002d84 <I2SEx_RxISR_I2SExt+0x54>
 8002d80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	490d      	ldr	r1, [pc, #52]	; (8002dc0 <I2SEx_RxISR_I2SExt+0x90>)
 8002d8c:	428b      	cmp	r3, r1
 8002d8e:	d101      	bne.n	8002d94 <I2SEx_RxISR_I2SExt+0x64>
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <I2SEx_RxISR_I2SExt+0x94>)
 8002d92:	e001      	b.n	8002d98 <I2SEx_RxISR_I2SExt+0x68>
 8002d94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d98:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d9c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d106      	bne.n	8002db6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff ff03 	bl	8002bbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40003800 	.word	0x40003800
 8002dc4:	40003400 	.word	0x40003400

08002dc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dca:	b08f      	sub	sp, #60	; 0x3c
 8002dcc:	af0a      	add	r7, sp, #40	; 0x28
 8002dce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e10f      	b.n	8002ffa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d106      	bne.n	8002dfa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f005 ff5b 	bl	8008cb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f002 fbf8 	bl	800560e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	687e      	ldr	r6, [r7, #4]
 8002e26:	466d      	mov	r5, sp
 8002e28:	f106 0410 	add.w	r4, r6, #16
 8002e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e38:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e3c:	1d33      	adds	r3, r6, #4
 8002e3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e40:	6838      	ldr	r0, [r7, #0]
 8002e42:	f002 facf 	bl	80053e4 <USB_CoreInit>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0d0      	b.n	8002ffa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f002 fbe6 	bl	8005630 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e64:	2300      	movs	r3, #0
 8002e66:	73fb      	strb	r3, [r7, #15]
 8002e68:	e04a      	b.n	8002f00 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e6a:	7bfa      	ldrb	r2, [r7, #15]
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	333d      	adds	r3, #61	; 0x3d
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e7e:	7bfa      	ldrb	r2, [r7, #15]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	333c      	adds	r3, #60	; 0x3c
 8002e8e:	7bfa      	ldrb	r2, [r7, #15]
 8002e90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e92:	7bfa      	ldrb	r2, [r7, #15]
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	b298      	uxth	r0, r3
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	3344      	adds	r3, #68	; 0x44
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002eaa:	7bfa      	ldrb	r2, [r7, #15]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	3340      	adds	r3, #64	; 0x40
 8002eba:	2200      	movs	r2, #0
 8002ebc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ebe:	7bfa      	ldrb	r2, [r7, #15]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	3348      	adds	r3, #72	; 0x48
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	334c      	adds	r3, #76	; 0x4c
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ee6:	7bfa      	ldrb	r2, [r7, #15]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3354      	adds	r3, #84	; 0x54
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	3301      	adds	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d3af      	bcc.n	8002e6a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	e044      	b.n	8002f9a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f4e:	2200      	movs	r2, #0
 8002f50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f52:	7bfa      	ldrb	r2, [r7, #15]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f68:	7bfa      	ldrb	r2, [r7, #15]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f7e:	7bfa      	ldrb	r2, [r7, #15]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	3301      	adds	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
 8002f9a:	7bfa      	ldrb	r2, [r7, #15]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d3b5      	bcc.n	8002f10 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	603b      	str	r3, [r7, #0]
 8002faa:	687e      	ldr	r6, [r7, #4]
 8002fac:	466d      	mov	r5, sp
 8002fae:	f106 0410 	add.w	r4, r6, #16
 8002fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fc2:	1d33      	adds	r3, r6, #4
 8002fc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fc6:	6838      	ldr	r0, [r7, #0]
 8002fc8:	f002 fb7e 	bl	80056c8 <USB_DevInit>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e00d      	b.n	8002ffa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f003 fccd 	bl	8006992 <USB_DevDisconnect>

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003002 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b084      	sub	sp, #16
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_PCD_Start+0x1c>
 800301a:	2302      	movs	r3, #2
 800301c:	e020      	b.n	8003060 <HAL_PCD_Start+0x5e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	2b01      	cmp	r3, #1
 800302c:	d109      	bne.n	8003042 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003032:	2b01      	cmp	r3, #1
 8003034:	d005      	beq.n	8003042 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f002 fad0 	bl	80055ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f003 fc7d 	bl	8006950 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b08d      	sub	sp, #52	; 0x34
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f003 fd3b 	bl	8006afa <USB_GetMode>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 848a 	bne.w	80039a0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f003 fc9f 	bl	80069d4 <USB_ReadInterrupts>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8480 	beq.w	800399e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	0a1b      	lsrs	r3, r3, #8
 80030a8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f003 fc8c 	bl	80069d4 <USB_ReadInterrupts>
 80030bc:	4603      	mov	r3, r0
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d107      	bne.n	80030d6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695a      	ldr	r2, [r3, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f002 0202 	and.w	r2, r2, #2
 80030d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f003 fc7a 	bl	80069d4 <USB_ReadInterrupts>
 80030e0:	4603      	mov	r3, r0
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b10      	cmp	r3, #16
 80030e8:	d161      	bne.n	80031ae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699a      	ldr	r2, [r3, #24]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0210 	bic.w	r2, r2, #16
 80030f8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	f003 020f 	and.w	r2, r3, #15
 8003106:	4613      	mov	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	3304      	adds	r3, #4
 8003118:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	0c5b      	lsrs	r3, r3, #17
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	2b02      	cmp	r3, #2
 8003124:	d124      	bne.n	8003170 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800312c:	4013      	ands	r3, r2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d035      	beq.n	800319e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800313c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003140:	b29b      	uxth	r3, r3
 8003142:	461a      	mov	r2, r3
 8003144:	6a38      	ldr	r0, [r7, #32]
 8003146:	f003 fab1 	bl	80066ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003156:	441a      	add	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	6a1a      	ldr	r2, [r3, #32]
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	091b      	lsrs	r3, r3, #4
 8003164:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003168:	441a      	add	r2, r3
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	621a      	str	r2, [r3, #32]
 800316e:	e016      	b.n	800319e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	0c5b      	lsrs	r3, r3, #17
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	2b06      	cmp	r3, #6
 800317a:	d110      	bne.n	800319e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003182:	2208      	movs	r2, #8
 8003184:	4619      	mov	r1, r3
 8003186:	6a38      	ldr	r0, [r7, #32]
 8003188:	f003 fa90 	bl	80066ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	6a1a      	ldr	r2, [r3, #32]
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	091b      	lsrs	r3, r3, #4
 8003194:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003198:	441a      	add	r2, r3
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699a      	ldr	r2, [r3, #24]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0210 	orr.w	r2, r2, #16
 80031ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f003 fc0e 	bl	80069d4 <USB_ReadInterrupts>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031c2:	f040 80a7 	bne.w	8003314 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f003 fc13 	bl	80069fa <USB_ReadDevAllOutEpInterrupt>
 80031d4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031d6:	e099      	b.n	800330c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 808e 	beq.w	8003300 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f003 fc37 	bl	8006a62 <USB_ReadDevOutEPInterrupt>
 80031f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00c      	beq.n	800321a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320c:	461a      	mov	r2, r3
 800320e:	2301      	movs	r3, #1
 8003210:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003212:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fec3 	bl	8003fa0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00c      	beq.n	800323e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	4413      	add	r3, r2
 800322c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003230:	461a      	mov	r2, r3
 8003232:	2308      	movs	r3, #8
 8003234:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003236:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 ff99 	bl	8004170 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003254:	461a      	mov	r2, r3
 8003256:	2310      	movs	r3, #16
 8003258:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d030      	beq.n	80032c6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326c:	2b80      	cmp	r3, #128	; 0x80
 800326e:	d109      	bne.n	8003284 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800327e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003282:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003286:	4613      	mov	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	4413      	add	r3, r2
 8003296:	3304      	adds	r3, #4
 8003298:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	78db      	ldrb	r3, [r3, #3]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d108      	bne.n	80032b4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2200      	movs	r2, #0
 80032a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	4619      	mov	r1, r3
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f005 fe12 	bl	8008ed8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c0:	461a      	mov	r2, r3
 80032c2:	2302      	movs	r3, #2
 80032c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032dc:	461a      	mov	r2, r3
 80032de:	2320      	movs	r3, #32
 80032e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d009      	beq.n	8003300 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f8:	461a      	mov	r2, r3
 80032fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	3301      	adds	r3, #1
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800330c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330e:	2b00      	cmp	r3, #0
 8003310:	f47f af62 	bne.w	80031d8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f003 fb5b 	bl	80069d4 <USB_ReadInterrupts>
 800331e:	4603      	mov	r3, r0
 8003320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003324:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003328:	f040 80db 	bne.w	80034e2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f003 fb7c 	bl	8006a2e <USB_ReadDevAllInEpInterrupt>
 8003336:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800333c:	e0cd      	b.n	80034da <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800333e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 80c2 	beq.w	80034ce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	4611      	mov	r1, r2
 8003354:	4618      	mov	r0, r3
 8003356:	f003 fba2 	bl	8006a9e <USB_ReadDevInEPInterrupt>
 800335a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d057      	beq.n	8003416 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	2201      	movs	r2, #1
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800337a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	43db      	mvns	r3, r3
 8003380:	69f9      	ldr	r1, [r7, #28]
 8003382:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003386:	4013      	ands	r3, r2
 8003388:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	4413      	add	r3, r2
 8003392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003396:	461a      	mov	r2, r3
 8003398:	2301      	movs	r3, #1
 800339a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d132      	bne.n	800340a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a8:	4613      	mov	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	334c      	adds	r3, #76	; 0x4c
 80033b4:	6819      	ldr	r1, [r3, #0]
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ba:	4613      	mov	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4403      	add	r3, r0
 80033c4:	3348      	adds	r3, #72	; 0x48
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4419      	add	r1, r3
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ce:	4613      	mov	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4403      	add	r3, r0
 80033d8:	334c      	adds	r3, #76	; 0x4c
 80033da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d113      	bne.n	800340a <HAL_PCD_IRQHandler+0x3a2>
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e6:	4613      	mov	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	3354      	adds	r3, #84	; 0x54
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d108      	bne.n	800340a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003402:	461a      	mov	r2, r3
 8003404:	2101      	movs	r1, #1
 8003406:	f003 fba9 	bl	8006b5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	b2db      	uxtb	r3, r3
 800340e:	4619      	mov	r1, r3
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f005 fcdc 	bl	8008dce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800342c:	461a      	mov	r2, r3
 800342e:	2308      	movs	r3, #8
 8003430:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	4413      	add	r3, r2
 8003444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003448:	461a      	mov	r2, r3
 800344a:	2310      	movs	r3, #16
 800344c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	4413      	add	r3, r2
 8003460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003464:	461a      	mov	r2, r3
 8003466:	2340      	movs	r3, #64	; 0x40
 8003468:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d023      	beq.n	80034bc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003474:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003476:	6a38      	ldr	r0, [r7, #32]
 8003478:	f002 fa8a 	bl	8005990 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800347c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347e:	4613      	mov	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	3338      	adds	r3, #56	; 0x38
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	4413      	add	r3, r2
 800348c:	3304      	adds	r3, #4
 800348e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	78db      	ldrb	r3, [r3, #3]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d108      	bne.n	80034aa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2200      	movs	r2, #0
 800349c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	4619      	mov	r1, r3
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f005 fd29 	bl	8008efc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b6:	461a      	mov	r2, r3
 80034b8:	2302      	movs	r3, #2
 80034ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fcdb 	bl	8003e84 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	3301      	adds	r3, #1
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d6:	085b      	lsrs	r3, r3, #1
 80034d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f47f af2e 	bne.w	800333e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f003 fa74 	bl	80069d4 <USB_ReadInterrupts>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034f6:	d122      	bne.n	800353e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	69fa      	ldr	r2, [r7, #28]
 8003502:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003506:	f023 0301 	bic.w	r3, r3, #1
 800350a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003512:	2b01      	cmp	r3, #1
 8003514:	d108      	bne.n	8003528 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800351e:	2100      	movs	r1, #0
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fec3 	bl	80042ac <HAL_PCDEx_LPM_Callback>
 8003526:	e002      	b.n	800352e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f005 fcc7 	bl	8008ebc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800353c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f003 fa46 	bl	80069d4 <USB_ReadInterrupts>
 8003548:	4603      	mov	r3, r0
 800354a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800354e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003552:	d112      	bne.n	800357a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b01      	cmp	r3, #1
 8003562:	d102      	bne.n	800356a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f005 fc83 	bl	8008e70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695a      	ldr	r2, [r3, #20]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003578:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f003 fa28 	bl	80069d4 <USB_ReadInterrupts>
 8003584:	4603      	mov	r3, r0
 8003586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800358a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358e:	f040 80b7 	bne.w	8003700 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	69fa      	ldr	r2, [r7, #28]
 800359c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2110      	movs	r1, #16
 80035ac:	4618      	mov	r0, r3
 80035ae:	f002 f9ef 	bl	8005990 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035b6:	e046      	b.n	8003646 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c4:	461a      	mov	r2, r3
 80035c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035dc:	0151      	lsls	r1, r2, #5
 80035de:	69fa      	ldr	r2, [r7, #28]
 80035e0:	440a      	add	r2, r1
 80035e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f8:	461a      	mov	r2, r3
 80035fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003610:	0151      	lsls	r1, r2, #5
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	440a      	add	r2, r1
 8003616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800361a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800361e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	4413      	add	r3, r2
 8003628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003630:	0151      	lsls	r1, r2, #5
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	440a      	add	r2, r1
 8003636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800363a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800363e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003642:	3301      	adds	r3, #1
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800364c:	429a      	cmp	r2, r3
 800364e:	d3b3      	bcc.n	80035b8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800365e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003662:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	2b00      	cmp	r3, #0
 800366a:	d016      	beq.n	800369a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800367c:	f043 030b 	orr.w	r3, r3, #11
 8003680:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003692:	f043 030b 	orr.w	r3, r3, #11
 8003696:	6453      	str	r3, [r2, #68]	; 0x44
 8003698:	e015      	b.n	80036c6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	69fa      	ldr	r2, [r7, #28]
 80036a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036ac:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80036b0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036c0:	f043 030b 	orr.w	r3, r3, #11
 80036c4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80036d8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036ea:	461a      	mov	r2, r3
 80036ec:	f003 fa36 	bl	8006b5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80036fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f003 f965 	bl	80069d4 <USB_ReadInterrupts>
 800370a:	4603      	mov	r3, r0
 800370c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003714:	d124      	bne.n	8003760 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f003 f9fb 	bl	8006b16 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f002 f9b0 	bl	8005a8a <USB_GetDevSpeed>
 800372a:	4603      	mov	r3, r0
 800372c:	461a      	mov	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681c      	ldr	r4, [r3, #0]
 8003736:	f001 fa29 	bl	8004b8c <HAL_RCC_GetHCLKFreq>
 800373a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003740:	b2db      	uxtb	r3, r3
 8003742:	461a      	mov	r2, r3
 8003744:	4620      	mov	r0, r4
 8003746:	f001 feaf 	bl	80054a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f005 fb67 	bl	8008e1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695a      	ldr	r2, [r3, #20]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800375e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f003 f935 	bl	80069d4 <USB_ReadInterrupts>
 800376a:	4603      	mov	r3, r0
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b08      	cmp	r3, #8
 8003772:	d10a      	bne.n	800378a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f005 fb44 	bl	8008e02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f002 0208 	and.w	r2, r2, #8
 8003788:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f003 f920 	bl	80069d4 <USB_ReadInterrupts>
 8003794:	4603      	mov	r3, r0
 8003796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379a:	2b80      	cmp	r3, #128	; 0x80
 800379c:	d122      	bne.n	80037e4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037aa:	2301      	movs	r3, #1
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
 80037ae:	e014      	b.n	80037da <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d105      	bne.n	80037d4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	4619      	mov	r1, r3
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fb27 	bl	8003e22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	3301      	adds	r3, #1
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d3e5      	bcc.n	80037b0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f003 f8f3 	bl	80069d4 <USB_ReadInterrupts>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f8:	d13b      	bne.n	8003872 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037fa:	2301      	movs	r3, #1
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
 80037fe:	e02b      	b.n	8003858 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003814:	4613      	mov	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	3340      	adds	r3, #64	; 0x40
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d115      	bne.n	8003852 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003826:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003828:	2b00      	cmp	r3, #0
 800382a:	da12      	bge.n	8003852 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003830:	4613      	mov	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	333f      	adds	r3, #63	; 0x3f
 800383c:	2201      	movs	r2, #1
 800383e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	b2db      	uxtb	r3, r3
 8003844:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003848:	b2db      	uxtb	r3, r3
 800384a:	4619      	mov	r1, r3
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fae8 	bl	8003e22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	3301      	adds	r3, #1
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385e:	429a      	cmp	r2, r3
 8003860:	d3ce      	bcc.n	8003800 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695a      	ldr	r2, [r3, #20]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003870:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f003 f8ac 	bl	80069d4 <USB_ReadInterrupts>
 800387c:	4603      	mov	r3, r0
 800387e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003882:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003886:	d155      	bne.n	8003934 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003888:	2301      	movs	r3, #1
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
 800388c:	e045      	b.n	800391a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a2:	4613      	mov	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d12e      	bne.n	8003914 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038b6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	da2b      	bge.n	8003914 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80038c8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d121      	bne.n	8003914 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80038e2:	2201      	movs	r2, #1
 80038e4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10a      	bne.n	8003914 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800390c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003910:	6053      	str	r3, [r2, #4]
            break;
 8003912:	e007      	b.n	8003924 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	3301      	adds	r3, #1
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003920:	429a      	cmp	r2, r3
 8003922:	d3b4      	bcc.n	800388e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003932:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f003 f84b 	bl	80069d4 <USB_ReadInterrupts>
 800393e:	4603      	mov	r3, r0
 8003940:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003948:	d10a      	bne.n	8003960 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f005 fae8 	bl	8008f20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800395e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f003 f835 	bl	80069d4 <USB_ReadInterrupts>
 800396a:	4603      	mov	r3, r0
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b04      	cmp	r3, #4
 8003972:	d115      	bne.n	80039a0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f005 fad8 	bl	8008f3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6859      	ldr	r1, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	430a      	orrs	r2, r1
 800399a:	605a      	str	r2, [r3, #4]
 800399c:	e000      	b.n	80039a0 <HAL_PCD_IRQHandler+0x938>
      return;
 800399e:	bf00      	nop
    }
  }
}
 80039a0:	3734      	adds	r7, #52	; 0x34
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd90      	pop	{r4, r7, pc}

080039a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	460b      	mov	r3, r1
 80039b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_PCD_SetAddress+0x1a>
 80039bc:	2302      	movs	r3, #2
 80039be:	e013      	b.n	80039e8 <HAL_PCD_SetAddress+0x42>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	78fa      	ldrb	r2, [r7, #3]
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f002 ff93 	bl	8006904 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	4608      	mov	r0, r1
 80039fa:	4611      	mov	r1, r2
 80039fc:	461a      	mov	r2, r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	70fb      	strb	r3, [r7, #3]
 8003a02:	460b      	mov	r3, r1
 8003a04:	803b      	strh	r3, [r7, #0]
 8003a06:	4613      	mov	r3, r2
 8003a08:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	da0f      	bge.n	8003a36 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a16:	78fb      	ldrb	r3, [r7, #3]
 8003a18:	f003 020f 	and.w	r2, r3, #15
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	3338      	adds	r3, #56	; 0x38
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	4413      	add	r3, r2
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	705a      	strb	r2, [r3, #1]
 8003a34:	e00f      	b.n	8003a56 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a36:	78fb      	ldrb	r3, [r7, #3]
 8003a38:	f003 020f 	and.w	r2, r3, #15
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a62:	883a      	ldrh	r2, [r7, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	78ba      	ldrb	r2, [r7, #2]
 8003a6c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	785b      	ldrb	r3, [r3, #1]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d004      	beq.n	8003a80 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a80:	78bb      	ldrb	r3, [r7, #2]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d102      	bne.n	8003a8c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_PCD_EP_Open+0xaa>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e00e      	b.n	8003ab8 <HAL_PCD_EP_Open+0xc8>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68f9      	ldr	r1, [r7, #12]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f002 f813 	bl	8005ad4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003ab6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003acc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	da0f      	bge.n	8003af4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	f003 020f 	and.w	r2, r3, #15
 8003ada:	4613      	mov	r3, r2
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	4413      	add	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	3338      	adds	r3, #56	; 0x38
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	3304      	adds	r3, #4
 8003aea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2201      	movs	r2, #1
 8003af0:	705a      	strb	r2, [r3, #1]
 8003af2:	e00f      	b.n	8003b14 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	f003 020f 	and.w	r2, r3, #15
 8003afa:	4613      	mov	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4413      	add	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	4413      	add	r3, r2
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_PCD_EP_Close+0x6e>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e00e      	b.n	8003b4c <HAL_PCD_EP_Close+0x8c>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68f9      	ldr	r1, [r7, #12]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f002 f851 	bl	8005be4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	607a      	str	r2, [r7, #4]
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	460b      	mov	r3, r1
 8003b62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b64:	7afb      	ldrb	r3, [r7, #11]
 8003b66:	f003 020f 	and.w	r2, r3, #15
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4413      	add	r3, r2
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2200      	movs	r2, #0
 8003b94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b96:	7afb      	ldrb	r3, [r7, #11]
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d102      	bne.n	8003bb0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bb0:	7afb      	ldrb	r3, [r7, #11]
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d109      	bne.n	8003bce <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	6979      	ldr	r1, [r7, #20]
 8003bc8:	f002 fb30 	bl	800622c <USB_EP0StartXfer>
 8003bcc:	e008      	b.n	8003be0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	461a      	mov	r2, r3
 8003bda:	6979      	ldr	r1, [r7, #20]
 8003bdc:	f002 f8de 	bl	8005d9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	f003 020f 	and.w	r2, r3, #15
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	4413      	add	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003c0c:	681b      	ldr	r3, [r3, #0]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b086      	sub	sp, #24
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	460b      	mov	r3, r1
 8003c28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c2a:	7afb      	ldrb	r3, [r7, #11]
 8003c2c:	f003 020f 	and.w	r2, r3, #15
 8003c30:	4613      	mov	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	3338      	adds	r3, #56	; 0x38
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3304      	adds	r3, #4
 8003c40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2200      	movs	r2, #0
 8003c52:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2201      	movs	r2, #1
 8003c58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c5a:	7afb      	ldrb	r3, [r7, #11]
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d102      	bne.n	8003c74 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c74:	7afb      	ldrb	r3, [r7, #11]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d109      	bne.n	8003c92 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	6979      	ldr	r1, [r7, #20]
 8003c8c:	f002 face 	bl	800622c <USB_EP0StartXfer>
 8003c90:	e008      	b.n	8003ca4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	6979      	ldr	r1, [r7, #20]
 8003ca0:	f002 f87c 	bl	8005d9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cba:	78fb      	ldrb	r3, [r7, #3]
 8003cbc:	f003 020f 	and.w	r2, r3, #15
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d901      	bls.n	8003ccc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e050      	b.n	8003d6e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ccc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	da0f      	bge.n	8003cf4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	f003 020f 	and.w	r2, r3, #15
 8003cda:	4613      	mov	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	3338      	adds	r3, #56	; 0x38
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	3304      	adds	r3, #4
 8003cea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	705a      	strb	r2, [r3, #1]
 8003cf2:	e00d      	b.n	8003d10 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cf4:	78fa      	ldrb	r2, [r7, #3]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	4413      	add	r3, r2
 8003d06:	3304      	adds	r3, #4
 8003d08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_PCD_EP_SetStall+0x82>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e01e      	b.n	8003d6e <HAL_PCD_EP_SetStall+0xc0>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68f9      	ldr	r1, [r7, #12]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f002 fd0c 	bl	800675c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10a      	bne.n	8003d64 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	b2d9      	uxtb	r1, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f002 fefc 	bl	8006b5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	f003 020f 	and.w	r2, r3, #15
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d901      	bls.n	8003d94 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e042      	b.n	8003e1a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	da0f      	bge.n	8003dbc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	f003 020f 	and.w	r2, r3, #15
 8003da2:	4613      	mov	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	3338      	adds	r3, #56	; 0x38
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	4413      	add	r3, r2
 8003db0:	3304      	adds	r3, #4
 8003db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	705a      	strb	r2, [r3, #1]
 8003dba:	e00f      	b.n	8003ddc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	f003 020f 	and.w	r2, r3, #15
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003de2:	78fb      	ldrb	r3, [r7, #3]
 8003de4:	f003 030f 	and.w	r3, r3, #15
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_PCD_EP_ClrStall+0x86>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e00e      	b.n	8003e1a <HAL_PCD_EP_ClrStall+0xa4>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68f9      	ldr	r1, [r7, #12]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f002 fd14 	bl	8006838 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	da0c      	bge.n	8003e50 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e36:	78fb      	ldrb	r3, [r7, #3]
 8003e38:	f003 020f 	and.w	r2, r3, #15
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	3338      	adds	r3, #56	; 0x38
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	4413      	add	r3, r2
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	e00c      	b.n	8003e6a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	f003 020f 	and.w	r2, r3, #15
 8003e56:	4613      	mov	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	3304      	adds	r3, #4
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68f9      	ldr	r1, [r7, #12]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f002 fb33 	bl	80064dc <USB_EPStopXfer>
 8003e76:	4603      	mov	r3, r0
 8003e78:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e7a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08a      	sub	sp, #40	; 0x28
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	3338      	adds	r3, #56	; 0x38
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1a      	ldr	r2, [r3, #32]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d901      	bls.n	8003ebc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e06c      	b.n	8003f96 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	699a      	ldr	r2, [r3, #24]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	69fa      	ldr	r2, [r7, #28]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d902      	bls.n	8003ed8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	3303      	adds	r3, #3
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ee0:	e02b      	b.n	8003f3a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	69fa      	ldr	r2, [r7, #28]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d902      	bls.n	8003efe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	3303      	adds	r3, #3
 8003f02:	089b      	lsrs	r3, r3, #2
 8003f04:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6919      	ldr	r1, [r3, #16]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	6978      	ldr	r0, [r7, #20]
 8003f1e:	f002 fb87 	bl	8006630 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	691a      	ldr	r2, [r3, #16]
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	441a      	add	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a1a      	ldr	r2, [r3, #32]
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	441a      	add	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d809      	bhi.n	8003f64 <PCD_WriteEmptyTxFifo+0xe0>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a1a      	ldr	r2, [r3, #32]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d203      	bcs.n	8003f64 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1be      	bne.n	8003ee2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	699a      	ldr	r2, [r3, #24]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d811      	bhi.n	8003f94 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	2201      	movs	r2, #1
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	6939      	ldr	r1, [r7, #16]
 8003f8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f90:	4013      	ands	r3, r2
 8003f92:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3720      	adds	r7, #32
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	333c      	adds	r3, #60	; 0x3c
 8003fb8:	3304      	adds	r3, #4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d17b      	bne.n	80040ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d015      	beq.n	800400c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	4a61      	ldr	r2, [pc, #388]	; (8004168 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	f240 80b9 	bls.w	800415c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80b3 	beq.w	800415c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004002:	461a      	mov	r2, r3
 8004004:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004008:	6093      	str	r3, [r2, #8]
 800400a:	e0a7      	b.n	800415c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b00      	cmp	r3, #0
 8004014:	d009      	beq.n	800402a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004022:	461a      	mov	r2, r3
 8004024:	2320      	movs	r3, #32
 8004026:	6093      	str	r3, [r2, #8]
 8004028:	e098      	b.n	800415c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004030:	2b00      	cmp	r3, #0
 8004032:	f040 8093 	bne.w	800415c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	4a4b      	ldr	r2, [pc, #300]	; (8004168 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d90f      	bls.n	800405e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004054:	461a      	mov	r2, r3
 8004056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800405a:	6093      	str	r3, [r2, #8]
 800405c:	e07e      	b.n	800415c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	4613      	mov	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	4413      	add	r3, r2
 8004070:	3304      	adds	r3, #4
 8004072:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	0159      	lsls	r1, r3, #5
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	440b      	add	r3, r1
 8004080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800408a:	1ad2      	subs	r2, r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d114      	bne.n	80040c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d109      	bne.n	80040b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040a8:	461a      	mov	r2, r3
 80040aa:	2101      	movs	r1, #1
 80040ac:	f002 fd56 	bl	8006b5c <USB_EP0_OutStart>
 80040b0:	e006      	b.n	80040c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	441a      	add	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	4619      	mov	r1, r3
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f004 fe66 	bl	8008d98 <HAL_PCD_DataOutStageCallback>
 80040cc:	e046      	b.n	800415c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	4a26      	ldr	r2, [pc, #152]	; (800416c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d124      	bne.n	8004120 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ec:	461a      	mov	r2, r3
 80040ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040f2:	6093      	str	r3, [r2, #8]
 80040f4:	e032      	b.n	800415c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410c:	461a      	mov	r2, r3
 800410e:	2320      	movs	r3, #32
 8004110:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	4619      	mov	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f004 fe3d 	bl	8008d98 <HAL_PCD_DataOutStageCallback>
 800411e:	e01d      	b.n	800415c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d114      	bne.n	8004150 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	4613      	mov	r3, r2
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4413      	add	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d108      	bne.n	8004150 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004148:	461a      	mov	r2, r3
 800414a:	2100      	movs	r1, #0
 800414c:	f002 fd06 	bl	8006b5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	4619      	mov	r1, r3
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f004 fe1e 	bl	8008d98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3720      	adds	r7, #32
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	4f54300a 	.word	0x4f54300a
 800416c:	4f54310a 	.word	0x4f54310a

08004170 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	333c      	adds	r3, #60	; 0x3c
 8004188:	3304      	adds	r3, #4
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4a15      	ldr	r2, [pc, #84]	; (80041f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d90e      	bls.n	80041c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d009      	beq.n	80041c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041bc:	461a      	mov	r2, r3
 80041be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f004 fdd5 	bl	8008d74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4a0a      	ldr	r2, [pc, #40]	; (80041f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d90c      	bls.n	80041ec <PCD_EP_OutSetupPacket_int+0x7c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d108      	bne.n	80041ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041e4:	461a      	mov	r2, r3
 80041e6:	2101      	movs	r1, #1
 80041e8:	f002 fcb8 	bl	8006b5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	4f54300a 	.word	0x4f54300a

080041fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	70fb      	strb	r3, [r7, #3]
 8004208:	4613      	mov	r3, r2
 800420a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d107      	bne.n	800422a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800421a:	883b      	ldrh	r3, [r7, #0]
 800421c:	0419      	lsls	r1, r3, #16
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	430a      	orrs	r2, r1
 8004226:	629a      	str	r2, [r3, #40]	; 0x28
 8004228:	e028      	b.n	800427c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	0c1b      	lsrs	r3, r3, #16
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	4413      	add	r3, r2
 8004236:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004238:	2300      	movs	r3, #0
 800423a:	73fb      	strb	r3, [r7, #15]
 800423c:	e00d      	b.n	800425a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	3340      	adds	r3, #64	; 0x40
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	0c1b      	lsrs	r3, r3, #16
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	4413      	add	r3, r2
 8004252:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	3301      	adds	r3, #1
 8004258:	73fb      	strb	r3, [r7, #15]
 800425a:	7bfa      	ldrb	r2, [r7, #15]
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	3b01      	subs	r3, #1
 8004260:	429a      	cmp	r2, r3
 8004262:	d3ec      	bcc.n	800423e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004264:	883b      	ldrh	r3, [r7, #0]
 8004266:	0418      	lsls	r0, r3, #16
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6819      	ldr	r1, [r3, #0]
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	3b01      	subs	r3, #1
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	4302      	orrs	r2, r0
 8004274:	3340      	adds	r3, #64	; 0x40
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	460b      	mov	r3, r1
 8004294:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	887a      	ldrh	r2, [r7, #2]
 800429c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e267      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d075      	beq.n	80043ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042e2:	4b88      	ldr	r3, [pc, #544]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d00c      	beq.n	8004308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ee:	4b85      	ldr	r3, [pc, #532]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d112      	bne.n	8004320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042fa:	4b82      	ldr	r3, [pc, #520]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004306:	d10b      	bne.n	8004320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004308:	4b7e      	ldr	r3, [pc, #504]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d05b      	beq.n	80043cc <HAL_RCC_OscConfig+0x108>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d157      	bne.n	80043cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e242      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004328:	d106      	bne.n	8004338 <HAL_RCC_OscConfig+0x74>
 800432a:	4b76      	ldr	r3, [pc, #472]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a75      	ldr	r2, [pc, #468]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	e01d      	b.n	8004374 <HAL_RCC_OscConfig+0xb0>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004340:	d10c      	bne.n	800435c <HAL_RCC_OscConfig+0x98>
 8004342:	4b70      	ldr	r3, [pc, #448]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a6f      	ldr	r2, [pc, #444]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	4b6d      	ldr	r3, [pc, #436]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a6c      	ldr	r2, [pc, #432]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e00b      	b.n	8004374 <HAL_RCC_OscConfig+0xb0>
 800435c:	4b69      	ldr	r3, [pc, #420]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a68      	ldr	r2, [pc, #416]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	4b66      	ldr	r3, [pc, #408]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a65      	ldr	r2, [pc, #404]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 800436e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d013      	beq.n	80043a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fc fe44 	bl	8001008 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004384:	f7fc fe40 	bl	8001008 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	; 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e207      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	4b5b      	ldr	r3, [pc, #364]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0xc0>
 80043a2:	e014      	b.n	80043ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7fc fe30 	bl	8001008 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043ac:	f7fc fe2c 	bl	8001008 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b64      	cmp	r3, #100	; 0x64
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e1f3      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043be:	4b51      	ldr	r3, [pc, #324]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0xe8>
 80043ca:	e000      	b.n	80043ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d063      	beq.n	80044a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043da:	4b4a      	ldr	r3, [pc, #296]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 030c 	and.w	r3, r3, #12
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00b      	beq.n	80043fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043e6:	4b47      	ldr	r3, [pc, #284]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d11c      	bne.n	800442c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043f2:	4b44      	ldr	r3, [pc, #272]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d116      	bne.n	800442c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fe:	4b41      	ldr	r3, [pc, #260]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_RCC_OscConfig+0x152>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d001      	beq.n	8004416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e1c7      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004416:	4b3b      	ldr	r3, [pc, #236]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4937      	ldr	r1, [pc, #220]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442a:	e03a      	b.n	80044a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d020      	beq.n	8004476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004434:	4b34      	ldr	r3, [pc, #208]	; (8004508 <HAL_RCC_OscConfig+0x244>)
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443a:	f7fc fde5 	bl	8001008 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004442:	f7fc fde1 	bl	8001008 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e1a8      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004454:	4b2b      	ldr	r3, [pc, #172]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004460:	4b28      	ldr	r3, [pc, #160]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	4925      	ldr	r1, [pc, #148]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004470:	4313      	orrs	r3, r2
 8004472:	600b      	str	r3, [r1, #0]
 8004474:	e015      	b.n	80044a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004476:	4b24      	ldr	r3, [pc, #144]	; (8004508 <HAL_RCC_OscConfig+0x244>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fc fdc4 	bl	8001008 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004484:	f7fc fdc0 	bl	8001008 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e187      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004496:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d036      	beq.n	800451c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d016      	beq.n	80044e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b6:	4b15      	ldr	r3, [pc, #84]	; (800450c <HAL_RCC_OscConfig+0x248>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044bc:	f7fc fda4 	bl	8001008 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c4:	f7fc fda0 	bl	8001008 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e167      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d6:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80044d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0x200>
 80044e2:	e01b      	b.n	800451c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e4:	4b09      	ldr	r3, [pc, #36]	; (800450c <HAL_RCC_OscConfig+0x248>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ea:	f7fc fd8d 	bl	8001008 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f0:	e00e      	b.n	8004510 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044f2:	f7fc fd89 	bl	8001008 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d907      	bls.n	8004510 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e150      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
 8004504:	40023800 	.word	0x40023800
 8004508:	42470000 	.word	0x42470000
 800450c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004510:	4b88      	ldr	r3, [pc, #544]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1ea      	bne.n	80044f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8097 	beq.w	8004658 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800452a:	2300      	movs	r3, #0
 800452c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800452e:	4b81      	ldr	r3, [pc, #516]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10f      	bne.n	800455a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800453a:	2300      	movs	r3, #0
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	4b7d      	ldr	r3, [pc, #500]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	4a7c      	ldr	r2, [pc, #496]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004548:	6413      	str	r3, [r2, #64]	; 0x40
 800454a:	4b7a      	ldr	r3, [pc, #488]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004552:	60bb      	str	r3, [r7, #8]
 8004554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004556:	2301      	movs	r3, #1
 8004558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455a:	4b77      	ldr	r3, [pc, #476]	; (8004738 <HAL_RCC_OscConfig+0x474>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004562:	2b00      	cmp	r3, #0
 8004564:	d118      	bne.n	8004598 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004566:	4b74      	ldr	r3, [pc, #464]	; (8004738 <HAL_RCC_OscConfig+0x474>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a73      	ldr	r2, [pc, #460]	; (8004738 <HAL_RCC_OscConfig+0x474>)
 800456c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004572:	f7fc fd49 	bl	8001008 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800457a:	f7fc fd45 	bl	8001008 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e10c      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800458c:	4b6a      	ldr	r3, [pc, #424]	; (8004738 <HAL_RCC_OscConfig+0x474>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0f0      	beq.n	800457a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d106      	bne.n	80045ae <HAL_RCC_OscConfig+0x2ea>
 80045a0:	4b64      	ldr	r3, [pc, #400]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a4:	4a63      	ldr	r2, [pc, #396]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045a6:	f043 0301 	orr.w	r3, r3, #1
 80045aa:	6713      	str	r3, [r2, #112]	; 0x70
 80045ac:	e01c      	b.n	80045e8 <HAL_RCC_OscConfig+0x324>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2b05      	cmp	r3, #5
 80045b4:	d10c      	bne.n	80045d0 <HAL_RCC_OscConfig+0x30c>
 80045b6:	4b5f      	ldr	r3, [pc, #380]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	4a5e      	ldr	r2, [pc, #376]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045bc:	f043 0304 	orr.w	r3, r3, #4
 80045c0:	6713      	str	r3, [r2, #112]	; 0x70
 80045c2:	4b5c      	ldr	r3, [pc, #368]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c6:	4a5b      	ldr	r2, [pc, #364]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	6713      	str	r3, [r2, #112]	; 0x70
 80045ce:	e00b      	b.n	80045e8 <HAL_RCC_OscConfig+0x324>
 80045d0:	4b58      	ldr	r3, [pc, #352]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	4a57      	ldr	r2, [pc, #348]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045d6:	f023 0301 	bic.w	r3, r3, #1
 80045da:	6713      	str	r3, [r2, #112]	; 0x70
 80045dc:	4b55      	ldr	r3, [pc, #340]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e0:	4a54      	ldr	r2, [pc, #336]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045e2:	f023 0304 	bic.w	r3, r3, #4
 80045e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d015      	beq.n	800461c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f0:	f7fc fd0a 	bl	8001008 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f6:	e00a      	b.n	800460e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f8:	f7fc fd06 	bl	8001008 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f241 3288 	movw	r2, #5000	; 0x1388
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e0cb      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460e:	4b49      	ldr	r3, [pc, #292]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0ee      	beq.n	80045f8 <HAL_RCC_OscConfig+0x334>
 800461a:	e014      	b.n	8004646 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461c:	f7fc fcf4 	bl	8001008 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004622:	e00a      	b.n	800463a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004624:	f7fc fcf0 	bl	8001008 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e0b5      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800463a:	4b3e      	ldr	r3, [pc, #248]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1ee      	bne.n	8004624 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004646:	7dfb      	ldrb	r3, [r7, #23]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d105      	bne.n	8004658 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800464c:	4b39      	ldr	r3, [pc, #228]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	4a38      	ldr	r2, [pc, #224]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004656:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 80a1 	beq.w	80047a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004662:	4b34      	ldr	r3, [pc, #208]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 030c 	and.w	r3, r3, #12
 800466a:	2b08      	cmp	r3, #8
 800466c:	d05c      	beq.n	8004728 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d141      	bne.n	80046fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004676:	4b31      	ldr	r3, [pc, #196]	; (800473c <HAL_RCC_OscConfig+0x478>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467c:	f7fc fcc4 	bl	8001008 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004684:	f7fc fcc0 	bl	8001008 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e087      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004696:	4b27      	ldr	r3, [pc, #156]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f0      	bne.n	8004684 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69da      	ldr	r2, [r3, #28]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	019b      	lsls	r3, r3, #6
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b8:	085b      	lsrs	r3, r3, #1
 80046ba:	3b01      	subs	r3, #1
 80046bc:	041b      	lsls	r3, r3, #16
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	061b      	lsls	r3, r3, #24
 80046c6:	491b      	ldr	r1, [pc, #108]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046cc:	4b1b      	ldr	r3, [pc, #108]	; (800473c <HAL_RCC_OscConfig+0x478>)
 80046ce:	2201      	movs	r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d2:	f7fc fc99 	bl	8001008 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046da:	f7fc fc95 	bl	8001008 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e05c      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ec:	4b11      	ldr	r3, [pc, #68]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0f0      	beq.n	80046da <HAL_RCC_OscConfig+0x416>
 80046f8:	e054      	b.n	80047a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fa:	4b10      	ldr	r3, [pc, #64]	; (800473c <HAL_RCC_OscConfig+0x478>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004700:	f7fc fc82 	bl	8001008 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004708:	f7fc fc7e 	bl	8001008 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e045      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471a:	4b06      	ldr	r3, [pc, #24]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f0      	bne.n	8004708 <HAL_RCC_OscConfig+0x444>
 8004726:	e03d      	b.n	80047a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d107      	bne.n	8004740 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e038      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
 8004734:	40023800 	.word	0x40023800
 8004738:	40007000 	.word	0x40007000
 800473c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004740:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <HAL_RCC_OscConfig+0x4ec>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d028      	beq.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004758:	429a      	cmp	r2, r3
 800475a:	d121      	bne.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004766:	429a      	cmp	r2, r3
 8004768:	d11a      	bne.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004770:	4013      	ands	r3, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004776:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004778:	4293      	cmp	r3, r2
 800477a:	d111      	bne.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	085b      	lsrs	r3, r3, #1
 8004788:	3b01      	subs	r3, #1
 800478a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800478c:	429a      	cmp	r2, r3
 800478e:	d107      	bne.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800479c:	429a      	cmp	r2, r3
 800479e:	d001      	beq.n	80047a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40023800 	.word	0x40023800

080047b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0cc      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047c8:	4b68      	ldr	r3, [pc, #416]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d90c      	bls.n	80047f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d6:	4b65      	ldr	r3, [pc, #404]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	4b63      	ldr	r3, [pc, #396]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d001      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e0b8      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d020      	beq.n	800483e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004808:	4b59      	ldr	r3, [pc, #356]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	4a58      	ldr	r2, [pc, #352]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004820:	4b53      	ldr	r3, [pc, #332]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	4a52      	ldr	r2, [pc, #328]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800482a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800482c:	4b50      	ldr	r3, [pc, #320]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	494d      	ldr	r1, [pc, #308]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	4313      	orrs	r3, r2
 800483c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d044      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d107      	bne.n	8004862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004852:	4b47      	ldr	r3, [pc, #284]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d119      	bne.n	8004892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e07f      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b02      	cmp	r3, #2
 8004868:	d003      	beq.n	8004872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800486e:	2b03      	cmp	r3, #3
 8004870:	d107      	bne.n	8004882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004872:	4b3f      	ldr	r3, [pc, #252]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d109      	bne.n	8004892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e06f      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004882:	4b3b      	ldr	r3, [pc, #236]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e067      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004892:	4b37      	ldr	r3, [pc, #220]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f023 0203 	bic.w	r2, r3, #3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4934      	ldr	r1, [pc, #208]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048a4:	f7fc fbb0 	bl	8001008 <HAL_GetTick>
 80048a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048aa:	e00a      	b.n	80048c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ac:	f7fc fbac 	bl	8001008 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e04f      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c2:	4b2b      	ldr	r3, [pc, #172]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 020c 	and.w	r2, r3, #12
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d1eb      	bne.n	80048ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048d4:	4b25      	ldr	r3, [pc, #148]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d20c      	bcs.n	80048fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e2:	4b22      	ldr	r3, [pc, #136]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ea:	4b20      	ldr	r3, [pc, #128]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d001      	beq.n	80048fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e032      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d008      	beq.n	800491a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004908:	4b19      	ldr	r3, [pc, #100]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	4916      	ldr	r1, [pc, #88]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	4313      	orrs	r3, r2
 8004918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004926:	4b12      	ldr	r3, [pc, #72]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	490e      	ldr	r1, [pc, #56]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	4313      	orrs	r3, r2
 8004938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800493a:	f000 f821 	bl	8004980 <HAL_RCC_GetSysClockFreq>
 800493e:	4602      	mov	r2, r0
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	091b      	lsrs	r3, r3, #4
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	490a      	ldr	r1, [pc, #40]	; (8004974 <HAL_RCC_ClockConfig+0x1c0>)
 800494c:	5ccb      	ldrb	r3, [r1, r3]
 800494e:	fa22 f303 	lsr.w	r3, r2, r3
 8004952:	4a09      	ldr	r2, [pc, #36]	; (8004978 <HAL_RCC_ClockConfig+0x1c4>)
 8004954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004956:	4b09      	ldr	r3, [pc, #36]	; (800497c <HAL_RCC_ClockConfig+0x1c8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f7fc fb10 	bl	8000f80 <HAL_InitTick>

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40023c00 	.word	0x40023c00
 8004970:	40023800 	.word	0x40023800
 8004974:	080093ac 	.word	0x080093ac
 8004978:	20000004 	.word	0x20000004
 800497c:	20000008 	.word	0x20000008

08004980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004984:	b094      	sub	sp, #80	; 0x50
 8004986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	647b      	str	r3, [r7, #68]	; 0x44
 800498c:	2300      	movs	r3, #0
 800498e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004990:	2300      	movs	r3, #0
 8004992:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004998:	4b79      	ldr	r3, [pc, #484]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x200>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 030c 	and.w	r3, r3, #12
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d00d      	beq.n	80049c0 <HAL_RCC_GetSysClockFreq+0x40>
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	f200 80e1 	bhi.w	8004b6c <HAL_RCC_GetSysClockFreq+0x1ec>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_RCC_GetSysClockFreq+0x34>
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d003      	beq.n	80049ba <HAL_RCC_GetSysClockFreq+0x3a>
 80049b2:	e0db      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049b4:	4b73      	ldr	r3, [pc, #460]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x204>)
 80049b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80049b8:	e0db      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049ba:	4b73      	ldr	r3, [pc, #460]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x208>)
 80049bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049be:	e0d8      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049c0:	4b6f      	ldr	r3, [pc, #444]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ca:	4b6d      	ldr	r3, [pc, #436]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d063      	beq.n	8004a9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d6:	4b6a      	ldr	r3, [pc, #424]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	099b      	lsrs	r3, r3, #6
 80049dc:	2200      	movs	r2, #0
 80049de:	63bb      	str	r3, [r7, #56]	; 0x38
 80049e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e8:	633b      	str	r3, [r7, #48]	; 0x30
 80049ea:	2300      	movs	r3, #0
 80049ec:	637b      	str	r3, [r7, #52]	; 0x34
 80049ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049f2:	4622      	mov	r2, r4
 80049f4:	462b      	mov	r3, r5
 80049f6:	f04f 0000 	mov.w	r0, #0
 80049fa:	f04f 0100 	mov.w	r1, #0
 80049fe:	0159      	lsls	r1, r3, #5
 8004a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a04:	0150      	lsls	r0, r2, #5
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	1a51      	subs	r1, r2, r1
 8004a0e:	6139      	str	r1, [r7, #16]
 8004a10:	4629      	mov	r1, r5
 8004a12:	eb63 0301 	sbc.w	r3, r3, r1
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a24:	4659      	mov	r1, fp
 8004a26:	018b      	lsls	r3, r1, #6
 8004a28:	4651      	mov	r1, sl
 8004a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a2e:	4651      	mov	r1, sl
 8004a30:	018a      	lsls	r2, r1, #6
 8004a32:	4651      	mov	r1, sl
 8004a34:	ebb2 0801 	subs.w	r8, r2, r1
 8004a38:	4659      	mov	r1, fp
 8004a3a:	eb63 0901 	sbc.w	r9, r3, r1
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a52:	4690      	mov	r8, r2
 8004a54:	4699      	mov	r9, r3
 8004a56:	4623      	mov	r3, r4
 8004a58:	eb18 0303 	adds.w	r3, r8, r3
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	462b      	mov	r3, r5
 8004a60:	eb49 0303 	adc.w	r3, r9, r3
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a72:	4629      	mov	r1, r5
 8004a74:	024b      	lsls	r3, r1, #9
 8004a76:	4621      	mov	r1, r4
 8004a78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	024a      	lsls	r2, r1, #9
 8004a80:	4610      	mov	r0, r2
 8004a82:	4619      	mov	r1, r3
 8004a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a86:	2200      	movs	r2, #0
 8004a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a90:	f7fb fb9a 	bl	80001c8 <__aeabi_uldivmod>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4613      	mov	r3, r2
 8004a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a9c:	e058      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a9e:	4b38      	ldr	r3, [pc, #224]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	099b      	lsrs	r3, r3, #6
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	4611      	mov	r1, r2
 8004aaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004aae:	623b      	str	r3, [r7, #32]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ab8:	4642      	mov	r2, r8
 8004aba:	464b      	mov	r3, r9
 8004abc:	f04f 0000 	mov.w	r0, #0
 8004ac0:	f04f 0100 	mov.w	r1, #0
 8004ac4:	0159      	lsls	r1, r3, #5
 8004ac6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aca:	0150      	lsls	r0, r2, #5
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4641      	mov	r1, r8
 8004ad2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ae8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004aec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004af0:	ebb2 040a 	subs.w	r4, r2, sl
 8004af4:	eb63 050b 	sbc.w	r5, r3, fp
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	00eb      	lsls	r3, r5, #3
 8004b02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b06:	00e2      	lsls	r2, r4, #3
 8004b08:	4614      	mov	r4, r2
 8004b0a:	461d      	mov	r5, r3
 8004b0c:	4643      	mov	r3, r8
 8004b0e:	18e3      	adds	r3, r4, r3
 8004b10:	603b      	str	r3, [r7, #0]
 8004b12:	464b      	mov	r3, r9
 8004b14:	eb45 0303 	adc.w	r3, r5, r3
 8004b18:	607b      	str	r3, [r7, #4]
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b26:	4629      	mov	r1, r5
 8004b28:	028b      	lsls	r3, r1, #10
 8004b2a:	4621      	mov	r1, r4
 8004b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b30:	4621      	mov	r1, r4
 8004b32:	028a      	lsls	r2, r1, #10
 8004b34:	4610      	mov	r0, r2
 8004b36:	4619      	mov	r1, r3
 8004b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	61bb      	str	r3, [r7, #24]
 8004b3e:	61fa      	str	r2, [r7, #28]
 8004b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b44:	f7fb fb40 	bl	80001c8 <__aeabi_uldivmod>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b50:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	0c1b      	lsrs	r3, r3, #16
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b6a:	e002      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3750      	adds	r7, #80	; 0x50
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b7e:	bf00      	nop
 8004b80:	40023800 	.word	0x40023800
 8004b84:	00f42400 	.word	0x00f42400
 8004b88:	007a1200 	.word	0x007a1200

08004b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b90:	4b03      	ldr	r3, [pc, #12]	; (8004ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b92:	681b      	ldr	r3, [r3, #0]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	20000004 	.word	0x20000004

08004ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ba8:	f7ff fff0 	bl	8004b8c <HAL_RCC_GetHCLKFreq>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	0a9b      	lsrs	r3, r3, #10
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	4903      	ldr	r1, [pc, #12]	; (8004bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bba:	5ccb      	ldrb	r3, [r1, r3]
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	080093bc 	.word	0x080093bc

08004bcc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d105      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d035      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bf4:	4b62      	ldr	r3, [pc, #392]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bfa:	f7fc fa05 	bl	8001008 <HAL_GetTick>
 8004bfe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c00:	e008      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c02:	f7fc fa01 	bl	8001008 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e0b0      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c14:	4b5b      	ldr	r3, [pc, #364]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1f0      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	019a      	lsls	r2, r3, #6
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	071b      	lsls	r3, r3, #28
 8004c2c:	4955      	ldr	r1, [pc, #340]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c34:	4b52      	ldr	r3, [pc, #328]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c36:	2201      	movs	r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c3a:	f7fc f9e5 	bl	8001008 <HAL_GetTick>
 8004c3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c40:	e008      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c42:	f7fc f9e1 	bl	8001008 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e090      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c54:	4b4b      	ldr	r3, [pc, #300]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0f0      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 8083 	beq.w	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	4b44      	ldr	r3, [pc, #272]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	4a43      	ldr	r2, [pc, #268]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c7e:	4b41      	ldr	r3, [pc, #260]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c8a:	4b3f      	ldr	r3, [pc, #252]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a3e      	ldr	r2, [pc, #248]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c94:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c96:	f7fc f9b7 	bl	8001008 <HAL_GetTick>
 8004c9a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c9e:	f7fc f9b3 	bl	8001008 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e062      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cb0:	4b35      	ldr	r3, [pc, #212]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cbc:	4b31      	ldr	r3, [pc, #196]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d02f      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d028      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cda:	4b2a      	ldr	r3, [pc, #168]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ce4:	4b29      	ldr	r3, [pc, #164]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cea:	4b28      	ldr	r3, [pc, #160]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004cf0:	4a24      	ldr	r2, [pc, #144]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cf6:	4b23      	ldr	r3, [pc, #140]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d114      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d02:	f7fc f981 	bl	8001008 <HAL_GetTick>
 8004d06:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d08:	e00a      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d0a:	f7fc f97d 	bl	8001008 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e02a      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d20:	4b18      	ldr	r3, [pc, #96]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0ee      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d38:	d10d      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d3a:	4b12      	ldr	r3, [pc, #72]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4e:	490d      	ldr	r1, [pc, #52]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	608b      	str	r3, [r1, #8]
 8004d54:	e005      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d56:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	4a0a      	ldr	r2, [pc, #40]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d5c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d60:	6093      	str	r3, [r2, #8]
 8004d62:	4b08      	ldr	r3, [pc, #32]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d6e:	4905      	ldr	r1, [pc, #20]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	42470068 	.word	0x42470068
 8004d84:	40023800 	.word	0x40023800
 8004d88:	40007000 	.word	0x40007000
 8004d8c:	42470e40 	.word	0x42470e40

08004d90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d13e      	bne.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004dae:	4b23      	ldr	r3, [pc, #140]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d12f      	bne.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004dc4:	4b1e      	ldr	r3, [pc, #120]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dc6:	617b      	str	r3, [r7, #20]
          break;
 8004dc8:	e02f      	b.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004dca:	4b1c      	ldr	r3, [pc, #112]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dd6:	d108      	bne.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004dd8:	4b18      	ldr	r3, [pc, #96]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de0:	4a18      	ldr	r2, [pc, #96]	; (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	e007      	b.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004dea:	4b14      	ldr	r3, [pc, #80]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df2:	4a15      	ldr	r2, [pc, #84]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004dfa:	4b10      	ldr	r3, [pc, #64]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e00:	099b      	lsrs	r3, r3, #6
 8004e02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	fb02 f303 	mul.w	r3, r2, r3
 8004e0c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e0e:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e14:	0f1b      	lsrs	r3, r3, #28
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e20:	617b      	str	r3, [r7, #20]
          break;
 8004e22:	e002      	b.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	617b      	str	r3, [r7, #20]
          break;
 8004e28:	bf00      	nop
        }
      }
      break;
 8004e2a:	bf00      	nop
    }
  }
  return frequency;
 8004e2c:	697b      	ldr	r3, [r7, #20]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	00bb8000 	.word	0x00bb8000
 8004e44:	007a1200 	.word	0x007a1200
 8004e48:	00f42400 	.word	0x00f42400

08004e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e041      	b.n	8004ee2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fb ffbc 	bl	8000df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3304      	adds	r3, #4
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	f000 f8f4 	bl	8005078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_TIM_ConfigClockSource+0x1c>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e0b4      	b.n	8005070 <HAL_TIM_ConfigClockSource+0x186>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2202      	movs	r2, #2
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f24:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f2c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f3e:	d03e      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0xd4>
 8004f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f44:	f200 8087 	bhi.w	8005056 <HAL_TIM_ConfigClockSource+0x16c>
 8004f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f4c:	f000 8086 	beq.w	800505c <HAL_TIM_ConfigClockSource+0x172>
 8004f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f54:	d87f      	bhi.n	8005056 <HAL_TIM_ConfigClockSource+0x16c>
 8004f56:	2b70      	cmp	r3, #112	; 0x70
 8004f58:	d01a      	beq.n	8004f90 <HAL_TIM_ConfigClockSource+0xa6>
 8004f5a:	2b70      	cmp	r3, #112	; 0x70
 8004f5c:	d87b      	bhi.n	8005056 <HAL_TIM_ConfigClockSource+0x16c>
 8004f5e:	2b60      	cmp	r3, #96	; 0x60
 8004f60:	d050      	beq.n	8005004 <HAL_TIM_ConfigClockSource+0x11a>
 8004f62:	2b60      	cmp	r3, #96	; 0x60
 8004f64:	d877      	bhi.n	8005056 <HAL_TIM_ConfigClockSource+0x16c>
 8004f66:	2b50      	cmp	r3, #80	; 0x50
 8004f68:	d03c      	beq.n	8004fe4 <HAL_TIM_ConfigClockSource+0xfa>
 8004f6a:	2b50      	cmp	r3, #80	; 0x50
 8004f6c:	d873      	bhi.n	8005056 <HAL_TIM_ConfigClockSource+0x16c>
 8004f6e:	2b40      	cmp	r3, #64	; 0x40
 8004f70:	d058      	beq.n	8005024 <HAL_TIM_ConfigClockSource+0x13a>
 8004f72:	2b40      	cmp	r3, #64	; 0x40
 8004f74:	d86f      	bhi.n	8005056 <HAL_TIM_ConfigClockSource+0x16c>
 8004f76:	2b30      	cmp	r3, #48	; 0x30
 8004f78:	d064      	beq.n	8005044 <HAL_TIM_ConfigClockSource+0x15a>
 8004f7a:	2b30      	cmp	r3, #48	; 0x30
 8004f7c:	d86b      	bhi.n	8005056 <HAL_TIM_ConfigClockSource+0x16c>
 8004f7e:	2b20      	cmp	r3, #32
 8004f80:	d060      	beq.n	8005044 <HAL_TIM_ConfigClockSource+0x15a>
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d867      	bhi.n	8005056 <HAL_TIM_ConfigClockSource+0x16c>
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d05c      	beq.n	8005044 <HAL_TIM_ConfigClockSource+0x15a>
 8004f8a:	2b10      	cmp	r3, #16
 8004f8c:	d05a      	beq.n	8005044 <HAL_TIM_ConfigClockSource+0x15a>
 8004f8e:	e062      	b.n	8005056 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6818      	ldr	r0, [r3, #0]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	6899      	ldr	r1, [r3, #8]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f000 f984 	bl	80052ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fb2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	609a      	str	r2, [r3, #8]
      break;
 8004fbc:	e04f      	b.n	800505e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6899      	ldr	r1, [r3, #8]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f000 f96d 	bl	80052ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fe0:	609a      	str	r2, [r3, #8]
      break;
 8004fe2:	e03c      	b.n	800505e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6818      	ldr	r0, [r3, #0]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	6859      	ldr	r1, [r3, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	f000 f8e1 	bl	80051b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2150      	movs	r1, #80	; 0x50
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 f93a 	bl	8005276 <TIM_ITRx_SetConfig>
      break;
 8005002:	e02c      	b.n	800505e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6818      	ldr	r0, [r3, #0]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	6859      	ldr	r1, [r3, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	461a      	mov	r2, r3
 8005012:	f000 f900 	bl	8005216 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2160      	movs	r1, #96	; 0x60
 800501c:	4618      	mov	r0, r3
 800501e:	f000 f92a 	bl	8005276 <TIM_ITRx_SetConfig>
      break;
 8005022:	e01c      	b.n	800505e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	6859      	ldr	r1, [r3, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	461a      	mov	r2, r3
 8005032:	f000 f8c1 	bl	80051b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2140      	movs	r1, #64	; 0x40
 800503c:	4618      	mov	r0, r3
 800503e:	f000 f91a 	bl	8005276 <TIM_ITRx_SetConfig>
      break;
 8005042:	e00c      	b.n	800505e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4619      	mov	r1, r3
 800504e:	4610      	mov	r0, r2
 8005050:	f000 f911 	bl	8005276 <TIM_ITRx_SetConfig>
      break;
 8005054:	e003      	b.n	800505e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	73fb      	strb	r3, [r7, #15]
      break;
 800505a:	e000      	b.n	800505e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800505c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800506e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a40      	ldr	r2, [pc, #256]	; (800518c <TIM_Base_SetConfig+0x114>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d013      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005096:	d00f      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a3d      	ldr	r2, [pc, #244]	; (8005190 <TIM_Base_SetConfig+0x118>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00b      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a3c      	ldr	r2, [pc, #240]	; (8005194 <TIM_Base_SetConfig+0x11c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d007      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a3b      	ldr	r2, [pc, #236]	; (8005198 <TIM_Base_SetConfig+0x120>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a3a      	ldr	r2, [pc, #232]	; (800519c <TIM_Base_SetConfig+0x124>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d108      	bne.n	80050ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a2f      	ldr	r2, [pc, #188]	; (800518c <TIM_Base_SetConfig+0x114>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d02b      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d8:	d027      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a2c      	ldr	r2, [pc, #176]	; (8005190 <TIM_Base_SetConfig+0x118>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d023      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a2b      	ldr	r2, [pc, #172]	; (8005194 <TIM_Base_SetConfig+0x11c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d01f      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a2a      	ldr	r2, [pc, #168]	; (8005198 <TIM_Base_SetConfig+0x120>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d01b      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a29      	ldr	r2, [pc, #164]	; (800519c <TIM_Base_SetConfig+0x124>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d017      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a28      	ldr	r2, [pc, #160]	; (80051a0 <TIM_Base_SetConfig+0x128>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d013      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a27      	ldr	r2, [pc, #156]	; (80051a4 <TIM_Base_SetConfig+0x12c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00f      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a26      	ldr	r2, [pc, #152]	; (80051a8 <TIM_Base_SetConfig+0x130>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00b      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a25      	ldr	r2, [pc, #148]	; (80051ac <TIM_Base_SetConfig+0x134>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d007      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a24      	ldr	r2, [pc, #144]	; (80051b0 <TIM_Base_SetConfig+0x138>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d003      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a23      	ldr	r2, [pc, #140]	; (80051b4 <TIM_Base_SetConfig+0x13c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d108      	bne.n	800513c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a0a      	ldr	r2, [pc, #40]	; (800518c <TIM_Base_SetConfig+0x114>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d003      	beq.n	8005170 <TIM_Base_SetConfig+0xf8>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a0c      	ldr	r2, [pc, #48]	; (800519c <TIM_Base_SetConfig+0x124>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d103      	bne.n	8005178 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	615a      	str	r2, [r3, #20]
}
 800517e:	bf00      	nop
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	40010000 	.word	0x40010000
 8005190:	40000400 	.word	0x40000400
 8005194:	40000800 	.word	0x40000800
 8005198:	40000c00 	.word	0x40000c00
 800519c:	40010400 	.word	0x40010400
 80051a0:	40014000 	.word	0x40014000
 80051a4:	40014400 	.word	0x40014400
 80051a8:	40014800 	.word	0x40014800
 80051ac:	40001800 	.word	0x40001800
 80051b0:	40001c00 	.word	0x40001c00
 80051b4:	40002000 	.word	0x40002000

080051b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	f023 0201 	bic.w	r2, r3, #1
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f023 030a 	bic.w	r3, r3, #10
 80051f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	621a      	str	r2, [r3, #32]
}
 800520a:	bf00      	nop
 800520c:	371c      	adds	r7, #28
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005216:	b480      	push	{r7}
 8005218:	b087      	sub	sp, #28
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f023 0210 	bic.w	r2, r3, #16
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005240:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	031b      	lsls	r3, r3, #12
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005252:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	621a      	str	r2, [r3, #32]
}
 800526a:	bf00      	nop
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005276:	b480      	push	{r7}
 8005278:	b085      	sub	sp, #20
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
 800527e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	f043 0307 	orr.w	r3, r3, #7
 8005298:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	609a      	str	r2, [r3, #8]
}
 80052a0:	bf00      	nop
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	021a      	lsls	r2, r3, #8
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	431a      	orrs	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	609a      	str	r2, [r3, #8]
}
 80052e0:	bf00      	nop
 80052e2:	371c      	adds	r7, #28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005300:	2302      	movs	r3, #2
 8005302:	e05a      	b.n	80053ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a21      	ldr	r2, [pc, #132]	; (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d022      	beq.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005350:	d01d      	beq.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a1d      	ldr	r2, [pc, #116]	; (80053cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d018      	beq.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1b      	ldr	r2, [pc, #108]	; (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d013      	beq.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1a      	ldr	r2, [pc, #104]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00e      	beq.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a18      	ldr	r2, [pc, #96]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d009      	beq.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a17      	ldr	r2, [pc, #92]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d004      	beq.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a15      	ldr	r2, [pc, #84]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d10c      	bne.n	80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	4313      	orrs	r3, r2
 800539e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40000400 	.word	0x40000400
 80053d0:	40000800 	.word	0x40000800
 80053d4:	40000c00 	.word	0x40000c00
 80053d8:	40010400 	.word	0x40010400
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40001800 	.word	0x40001800

080053e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053e4:	b084      	sub	sp, #16
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	f107 001c 	add.w	r0, r7, #28
 80053f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d122      	bne.n	8005442 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005426:	2b01      	cmp	r3, #1
 8005428:	d105      	bne.n	8005436 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f001 fbee 	bl	8006c18 <USB_CoreReset>
 800543c:	4603      	mov	r3, r0
 800543e:	73fb      	strb	r3, [r7, #15]
 8005440:	e01a      	b.n	8005478 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f001 fbe2 	bl	8006c18 <USB_CoreReset>
 8005454:	4603      	mov	r3, r0
 8005456:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	639a      	str	r2, [r3, #56]	; 0x38
 800546a:	e005      	b.n	8005478 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005470:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	2b01      	cmp	r3, #1
 800547c:	d10b      	bne.n	8005496 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f043 0206 	orr.w	r2, r3, #6
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f043 0220 	orr.w	r2, r3, #32
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005496:	7bfb      	ldrb	r3, [r7, #15]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054a2:	b004      	add	sp, #16
 80054a4:	4770      	bx	lr
	...

080054a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	4613      	mov	r3, r2
 80054b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80054b6:	79fb      	ldrb	r3, [r7, #7]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d165      	bne.n	8005588 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4a41      	ldr	r2, [pc, #260]	; (80055c4 <USB_SetTurnaroundTime+0x11c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d906      	bls.n	80054d2 <USB_SetTurnaroundTime+0x2a>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4a40      	ldr	r2, [pc, #256]	; (80055c8 <USB_SetTurnaroundTime+0x120>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d202      	bcs.n	80054d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80054cc:	230f      	movs	r3, #15
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	e062      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	4a3c      	ldr	r2, [pc, #240]	; (80055c8 <USB_SetTurnaroundTime+0x120>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d306      	bcc.n	80054e8 <USB_SetTurnaroundTime+0x40>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4a3b      	ldr	r2, [pc, #236]	; (80055cc <USB_SetTurnaroundTime+0x124>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d202      	bcs.n	80054e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80054e2:	230e      	movs	r3, #14
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	e057      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4a38      	ldr	r2, [pc, #224]	; (80055cc <USB_SetTurnaroundTime+0x124>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d306      	bcc.n	80054fe <USB_SetTurnaroundTime+0x56>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4a37      	ldr	r2, [pc, #220]	; (80055d0 <USB_SetTurnaroundTime+0x128>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d202      	bcs.n	80054fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054f8:	230d      	movs	r3, #13
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	e04c      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	4a33      	ldr	r2, [pc, #204]	; (80055d0 <USB_SetTurnaroundTime+0x128>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d306      	bcc.n	8005514 <USB_SetTurnaroundTime+0x6c>
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	4a32      	ldr	r2, [pc, #200]	; (80055d4 <USB_SetTurnaroundTime+0x12c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d802      	bhi.n	8005514 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800550e:	230c      	movs	r3, #12
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	e041      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4a2f      	ldr	r2, [pc, #188]	; (80055d4 <USB_SetTurnaroundTime+0x12c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d906      	bls.n	800552a <USB_SetTurnaroundTime+0x82>
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4a2e      	ldr	r2, [pc, #184]	; (80055d8 <USB_SetTurnaroundTime+0x130>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d802      	bhi.n	800552a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005524:	230b      	movs	r3, #11
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	e036      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4a2a      	ldr	r2, [pc, #168]	; (80055d8 <USB_SetTurnaroundTime+0x130>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d906      	bls.n	8005540 <USB_SetTurnaroundTime+0x98>
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	4a29      	ldr	r2, [pc, #164]	; (80055dc <USB_SetTurnaroundTime+0x134>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d802      	bhi.n	8005540 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800553a:	230a      	movs	r3, #10
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	e02b      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4a26      	ldr	r2, [pc, #152]	; (80055dc <USB_SetTurnaroundTime+0x134>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d906      	bls.n	8005556 <USB_SetTurnaroundTime+0xae>
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4a25      	ldr	r2, [pc, #148]	; (80055e0 <USB_SetTurnaroundTime+0x138>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d202      	bcs.n	8005556 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005550:	2309      	movs	r3, #9
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	e020      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	4a21      	ldr	r2, [pc, #132]	; (80055e0 <USB_SetTurnaroundTime+0x138>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d306      	bcc.n	800556c <USB_SetTurnaroundTime+0xc4>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	4a20      	ldr	r2, [pc, #128]	; (80055e4 <USB_SetTurnaroundTime+0x13c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d802      	bhi.n	800556c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005566:	2308      	movs	r3, #8
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	e015      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4a1d      	ldr	r2, [pc, #116]	; (80055e4 <USB_SetTurnaroundTime+0x13c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d906      	bls.n	8005582 <USB_SetTurnaroundTime+0xda>
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4a1c      	ldr	r2, [pc, #112]	; (80055e8 <USB_SetTurnaroundTime+0x140>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d202      	bcs.n	8005582 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800557c:	2307      	movs	r3, #7
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	e00a      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005582:	2306      	movs	r3, #6
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	e007      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d102      	bne.n	8005594 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800558e:	2309      	movs	r3, #9
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	e001      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005594:	2309      	movs	r3, #9
 8005596:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	029b      	lsls	r3, r3, #10
 80055ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80055b0:	431a      	orrs	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	371c      	adds	r7, #28
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	00d8acbf 	.word	0x00d8acbf
 80055c8:	00e4e1c0 	.word	0x00e4e1c0
 80055cc:	00f42400 	.word	0x00f42400
 80055d0:	01067380 	.word	0x01067380
 80055d4:	011a499f 	.word	0x011a499f
 80055d8:	01312cff 	.word	0x01312cff
 80055dc:	014ca43f 	.word	0x014ca43f
 80055e0:	016e3600 	.word	0x016e3600
 80055e4:	01a6ab1f 	.word	0x01a6ab1f
 80055e8:	01e84800 	.word	0x01e84800

080055ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f043 0201 	orr.w	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f023 0201 	bic.w	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800564c:	78fb      	ldrb	r3, [r7, #3]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d115      	bne.n	800567e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800565e:	2001      	movs	r0, #1
 8005660:	f7fb fcde 	bl	8001020 <HAL_Delay>
      ms++;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3301      	adds	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f001 fa45 	bl	8006afa <USB_GetMode>
 8005670:	4603      	mov	r3, r0
 8005672:	2b01      	cmp	r3, #1
 8005674:	d01e      	beq.n	80056b4 <USB_SetCurrentMode+0x84>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b31      	cmp	r3, #49	; 0x31
 800567a:	d9f0      	bls.n	800565e <USB_SetCurrentMode+0x2e>
 800567c:	e01a      	b.n	80056b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800567e:	78fb      	ldrb	r3, [r7, #3]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d115      	bne.n	80056b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005690:	2001      	movs	r0, #1
 8005692:	f7fb fcc5 	bl	8001020 <HAL_Delay>
      ms++;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3301      	adds	r3, #1
 800569a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f001 fa2c 	bl	8006afa <USB_GetMode>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <USB_SetCurrentMode+0x84>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b31      	cmp	r3, #49	; 0x31
 80056ac:	d9f0      	bls.n	8005690 <USB_SetCurrentMode+0x60>
 80056ae:	e001      	b.n	80056b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e005      	b.n	80056c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b32      	cmp	r3, #50	; 0x32
 80056b8:	d101      	bne.n	80056be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056c8:	b084      	sub	sp, #16
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b086      	sub	sp, #24
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056e2:	2300      	movs	r3, #0
 80056e4:	613b      	str	r3, [r7, #16]
 80056e6:	e009      	b.n	80056fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	3340      	adds	r3, #64	; 0x40
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	2200      	movs	r2, #0
 80056f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	3301      	adds	r3, #1
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	2b0e      	cmp	r3, #14
 8005700:	d9f2      	bls.n	80056e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005704:	2b00      	cmp	r3, #0
 8005706:	d11c      	bne.n	8005742 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005716:	f043 0302 	orr.w	r3, r3, #2
 800571a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005720:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005738:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	639a      	str	r2, [r3, #56]	; 0x38
 8005740:	e00b      	b.n	800575a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005760:	461a      	mov	r2, r3
 8005762:	2300      	movs	r3, #0
 8005764:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576c:	4619      	mov	r1, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005774:	461a      	mov	r2, r3
 8005776:	680b      	ldr	r3, [r1, #0]
 8005778:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577c:	2b01      	cmp	r3, #1
 800577e:	d10c      	bne.n	800579a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005782:	2b00      	cmp	r3, #0
 8005784:	d104      	bne.n	8005790 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005786:	2100      	movs	r1, #0
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f965 	bl	8005a58 <USB_SetDevSpeed>
 800578e:	e008      	b.n	80057a2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005790:	2101      	movs	r1, #1
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f960 	bl	8005a58 <USB_SetDevSpeed>
 8005798:	e003      	b.n	80057a2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800579a:	2103      	movs	r1, #3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f95b 	bl	8005a58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057a2:	2110      	movs	r1, #16
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f8f3 	bl	8005990 <USB_FlushTxFifo>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f91f 	bl	80059f8 <USB_FlushRxFifo>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ca:	461a      	mov	r2, r3
 80057cc:	2300      	movs	r3, #0
 80057ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d6:	461a      	mov	r2, r3
 80057d8:	2300      	movs	r3, #0
 80057da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e2:	461a      	mov	r2, r3
 80057e4:	2300      	movs	r3, #0
 80057e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057e8:	2300      	movs	r3, #0
 80057ea:	613b      	str	r3, [r7, #16]
 80057ec:	e043      	b.n	8005876 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005804:	d118      	bne.n	8005838 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10a      	bne.n	8005822 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	461a      	mov	r2, r3
 800581a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	e013      	b.n	800584a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582e:	461a      	mov	r2, r3
 8005830:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	e008      	b.n	800584a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005844:	461a      	mov	r2, r3
 8005846:	2300      	movs	r3, #0
 8005848:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005856:	461a      	mov	r2, r3
 8005858:	2300      	movs	r3, #0
 800585a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005868:	461a      	mov	r2, r3
 800586a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800586e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	3301      	adds	r3, #1
 8005874:	613b      	str	r3, [r7, #16]
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	429a      	cmp	r2, r3
 800587c:	d3b7      	bcc.n	80057ee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800587e:	2300      	movs	r3, #0
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	e043      	b.n	800590c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005896:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800589a:	d118      	bne.n	80058ce <USB_DevInit+0x206>
    {
      if (i == 0U)
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10a      	bne.n	80058b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ae:	461a      	mov	r2, r3
 80058b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	e013      	b.n	80058e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c4:	461a      	mov	r2, r3
 80058c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	e008      	b.n	80058e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058da:	461a      	mov	r2, r3
 80058dc:	2300      	movs	r3, #0
 80058de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ec:	461a      	mov	r2, r3
 80058ee:	2300      	movs	r3, #0
 80058f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fe:	461a      	mov	r2, r3
 8005900:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005904:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	3301      	adds	r3, #1
 800590a:	613b      	str	r3, [r7, #16]
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	429a      	cmp	r2, r3
 8005912:	d3b7      	bcc.n	8005884 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005922:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005926:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005934:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	2b00      	cmp	r3, #0
 800593a:	d105      	bne.n	8005948 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	f043 0210 	orr.w	r2, r3, #16
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699a      	ldr	r2, [r3, #24]
 800594c:	4b0f      	ldr	r3, [pc, #60]	; (800598c <USB_DevInit+0x2c4>)
 800594e:	4313      	orrs	r3, r2
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d005      	beq.n	8005966 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	f043 0208 	orr.w	r2, r3, #8
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005968:	2b01      	cmp	r3, #1
 800596a:	d107      	bne.n	800597c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005974:	f043 0304 	orr.w	r3, r3, #4
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800597c:	7dfb      	ldrb	r3, [r7, #23]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005988:	b004      	add	sp, #16
 800598a:	4770      	bx	lr
 800598c:	803c3800 	.word	0x803c3800

08005990 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3301      	adds	r3, #1
 80059a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4a13      	ldr	r2, [pc, #76]	; (80059f4 <USB_FlushTxFifo+0x64>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d901      	bls.n	80059b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e01b      	b.n	80059e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	daf2      	bge.n	800599e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	019b      	lsls	r3, r3, #6
 80059c0:	f043 0220 	orr.w	r2, r3, #32
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3301      	adds	r3, #1
 80059cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4a08      	ldr	r2, [pc, #32]	; (80059f4 <USB_FlushTxFifo+0x64>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d901      	bls.n	80059da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e006      	b.n	80059e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b20      	cmp	r3, #32
 80059e4:	d0f0      	beq.n	80059c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	00030d40 	.word	0x00030d40

080059f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	3301      	adds	r3, #1
 8005a08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4a11      	ldr	r2, [pc, #68]	; (8005a54 <USB_FlushRxFifo+0x5c>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d901      	bls.n	8005a16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e018      	b.n	8005a48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	daf2      	bge.n	8005a04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2210      	movs	r2, #16
 8005a26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4a08      	ldr	r2, [pc, #32]	; (8005a54 <USB_FlushRxFifo+0x5c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d901      	bls.n	8005a3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e006      	b.n	8005a48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0310 	and.w	r3, r3, #16
 8005a42:	2b10      	cmp	r3, #16
 8005a44:	d0f0      	beq.n	8005a28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	00030d40 	.word	0x00030d40

08005a58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	460b      	mov	r3, r1
 8005a62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	78fb      	ldrb	r3, [r7, #3]
 8005a72:	68f9      	ldr	r1, [r7, #12]
 8005a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b087      	sub	sp, #28
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 0306 	and.w	r3, r3, #6
 8005aa2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d102      	bne.n	8005ab0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	75fb      	strb	r3, [r7, #23]
 8005aae:	e00a      	b.n	8005ac6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d002      	beq.n	8005abc <USB_GetDevSpeed+0x32>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b06      	cmp	r3, #6
 8005aba:	d102      	bne.n	8005ac2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005abc:	2302      	movs	r3, #2
 8005abe:	75fb      	strb	r3, [r7, #23]
 8005ac0:	e001      	b.n	8005ac6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005ac2:	230f      	movs	r3, #15
 8005ac4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	785b      	ldrb	r3, [r3, #1]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d13a      	bne.n	8005b66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af6:	69da      	ldr	r2, [r3, #28]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	f003 030f 	and.w	r3, r3, #15
 8005b00:	2101      	movs	r1, #1
 8005b02:	fa01 f303 	lsl.w	r3, r1, r3
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	68f9      	ldr	r1, [r7, #12]
 8005b0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d155      	bne.n	8005bd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	791b      	ldrb	r3, [r3, #4]
 8005b42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	059b      	lsls	r3, r3, #22
 8005b4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	0151      	lsls	r1, r2, #5
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	440a      	add	r2, r1
 8005b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	e036      	b.n	8005bd4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6c:	69da      	ldr	r2, [r3, #28]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	2101      	movs	r1, #1
 8005b78:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7c:	041b      	lsls	r3, r3, #16
 8005b7e:	68f9      	ldr	r1, [r7, #12]
 8005b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b84:	4313      	orrs	r3, r2
 8005b86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d11a      	bne.n	8005bd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	791b      	ldrb	r3, [r3, #4]
 8005bb8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005bba:	430b      	orrs	r3, r1
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
	...

08005be4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	785b      	ldrb	r3, [r3, #1]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d161      	bne.n	8005cc4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c16:	d11f      	bne.n	8005c58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	0151      	lsls	r1, r2, #5
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	440a      	add	r2, r1
 8005c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	0151      	lsls	r1, r2, #5
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	440a      	add	r2, r1
 8005c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	2101      	movs	r1, #1
 8005c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	43db      	mvns	r3, r3
 8005c72:	68f9      	ldr	r1, [r7, #12]
 8005c74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c78:	4013      	ands	r3, r2
 8005c7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c82:	69da      	ldr	r2, [r3, #28]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	43db      	mvns	r3, r3
 8005c96:	68f9      	ldr	r1, [r7, #12]
 8005c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	0159      	lsls	r1, r3, #5
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	440b      	add	r3, r1
 8005cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4b35      	ldr	r3, [pc, #212]	; (8005d94 <USB_DeactivateEndpoint+0x1b0>)
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	600b      	str	r3, [r1, #0]
 8005cc2:	e060      	b.n	8005d86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cda:	d11f      	bne.n	8005d1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	0151      	lsls	r1, r2, #5
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	440a      	add	r2, r1
 8005cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cfa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d32:	041b      	lsls	r3, r3, #16
 8005d34:	43db      	mvns	r3, r3
 8005d36:	68f9      	ldr	r1, [r7, #12]
 8005d38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d46:	69da      	ldr	r2, [r3, #28]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	f003 030f 	and.w	r3, r3, #15
 8005d50:	2101      	movs	r1, #1
 8005d52:	fa01 f303 	lsl.w	r3, r1, r3
 8005d56:	041b      	lsls	r3, r3, #16
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	68f9      	ldr	r1, [r7, #12]
 8005d5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d60:	4013      	ands	r3, r2
 8005d62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	0159      	lsls	r1, r3, #5
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	440b      	add	r3, r1
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7e:	4619      	mov	r1, r3
 8005d80:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <USB_DeactivateEndpoint+0x1b4>)
 8005d82:	4013      	ands	r3, r2
 8005d84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	ec337800 	.word	0xec337800
 8005d98:	eff37800 	.word	0xeff37800

08005d9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08a      	sub	sp, #40	; 0x28
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	4613      	mov	r3, r2
 8005da8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	785b      	ldrb	r3, [r3, #1]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	f040 815c 	bne.w	8006076 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d132      	bne.n	8005e2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	0151      	lsls	r1, r2, #5
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	440a      	add	r2, r1
 8005ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005de4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005de8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	0151      	lsls	r1, r2, #5
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	440a      	add	r2, r1
 8005e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e24:	0cdb      	lsrs	r3, r3, #19
 8005e26:	04db      	lsls	r3, r3, #19
 8005e28:	6113      	str	r3, [r2, #16]
 8005e2a:	e074      	b.n	8005f16 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e46:	0cdb      	lsrs	r3, r3, #19
 8005e48:	04db      	lsls	r3, r3, #19
 8005e4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	0151      	lsls	r1, r2, #5
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	440a      	add	r2, r1
 8005e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	6999      	ldr	r1, [r3, #24]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	440b      	add	r3, r1
 8005e88:	1e59      	subs	r1, r3, #1
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e92:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e94:	4b9d      	ldr	r3, [pc, #628]	; (800610c <USB_EPStartXfer+0x370>)
 8005e96:	400b      	ands	r3, r1
 8005e98:	69b9      	ldr	r1, [r7, #24]
 8005e9a:	0148      	lsls	r0, r1, #5
 8005e9c:	69f9      	ldr	r1, [r7, #28]
 8005e9e:	4401      	add	r1, r0
 8005ea0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb4:	691a      	ldr	r2, [r3, #16]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ebe:	69b9      	ldr	r1, [r7, #24]
 8005ec0:	0148      	lsls	r0, r1, #5
 8005ec2:	69f9      	ldr	r1, [r7, #28]
 8005ec4:	4401      	add	r1, r0
 8005ec6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	791b      	ldrb	r3, [r3, #4]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d11f      	bne.n	8005f16 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	0151      	lsls	r1, r2, #5
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	440a      	add	r2, r1
 8005eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005ef4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	0151      	lsls	r1, r2, #5
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	440a      	add	r2, r1
 8005f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f14:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005f16:	79fb      	ldrb	r3, [r7, #7]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d14b      	bne.n	8005fb4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d009      	beq.n	8005f38 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f30:	461a      	mov	r2, r3
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	791b      	ldrb	r3, [r3, #4]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d128      	bne.n	8005f92 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d110      	bne.n	8005f72 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	0151      	lsls	r1, r2, #5
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	440a      	add	r2, r1
 8005f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f6e:	6013      	str	r3, [r2, #0]
 8005f70:	e00f      	b.n	8005f92 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f90:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	e133      	b.n	800621c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	69fa      	ldr	r2, [r7, #28]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fd2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	791b      	ldrb	r3, [r3, #4]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d015      	beq.n	8006008 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 811b 	beq.w	800621c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	f003 030f 	and.w	r3, r3, #15
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffc:	69f9      	ldr	r1, [r7, #28]
 8005ffe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006002:	4313      	orrs	r3, r2
 8006004:	634b      	str	r3, [r1, #52]	; 0x34
 8006006:	e109      	b.n	800621c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006014:	2b00      	cmp	r3, #0
 8006016:	d110      	bne.n	800603a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	0151      	lsls	r1, r2, #5
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	440a      	add	r2, r1
 800602e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006032:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006036:	6013      	str	r3, [r2, #0]
 8006038:	e00f      	b.n	800605a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	0151      	lsls	r1, r2, #5
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	440a      	add	r2, r1
 8006050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006058:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6919      	ldr	r1, [r3, #16]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	781a      	ldrb	r2, [r3, #0]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	b298      	uxth	r0, r3
 8006068:	79fb      	ldrb	r3, [r7, #7]
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	4603      	mov	r3, r0
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 fade 	bl	8006630 <USB_WritePacket>
 8006074:	e0d2      	b.n	800621c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	69fa      	ldr	r2, [r7, #28]
 800608a:	440a      	add	r2, r1
 800608c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006090:	0cdb      	lsrs	r3, r3, #19
 8006092:	04db      	lsls	r3, r3, #19
 8006094:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	0151      	lsls	r1, r2, #5
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	440a      	add	r2, r1
 80060ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d126      	bne.n	8006110 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ce:	691a      	ldr	r2, [r3, #16]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d8:	69b9      	ldr	r1, [r7, #24]
 80060da:	0148      	lsls	r0, r1, #5
 80060dc:	69f9      	ldr	r1, [r7, #28]
 80060de:	4401      	add	r1, r0
 80060e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060e4:	4313      	orrs	r3, r2
 80060e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	0151      	lsls	r1, r2, #5
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	440a      	add	r2, r1
 80060fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006102:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006106:	6113      	str	r3, [r2, #16]
 8006108:	e03a      	b.n	8006180 <USB_EPStartXfer+0x3e4>
 800610a:	bf00      	nop
 800610c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	699a      	ldr	r2, [r3, #24]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	4413      	add	r3, r2
 800611a:	1e5a      	subs	r2, r3, #1
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	fbb2 f3f3 	udiv	r3, r2, r3
 8006124:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	8afa      	ldrh	r2, [r7, #22]
 800612c:	fb03 f202 	mul.w	r2, r3, r2
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006140:	691a      	ldr	r2, [r3, #16]
 8006142:	8afb      	ldrh	r3, [r7, #22]
 8006144:	04d9      	lsls	r1, r3, #19
 8006146:	4b38      	ldr	r3, [pc, #224]	; (8006228 <USB_EPStartXfer+0x48c>)
 8006148:	400b      	ands	r3, r1
 800614a:	69b9      	ldr	r1, [r7, #24]
 800614c:	0148      	lsls	r0, r1, #5
 800614e:	69f9      	ldr	r1, [r7, #28]
 8006150:	4401      	add	r1, r0
 8006152:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006156:	4313      	orrs	r3, r2
 8006158:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006166:	691a      	ldr	r2, [r3, #16]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006170:	69b9      	ldr	r1, [r7, #24]
 8006172:	0148      	lsls	r0, r1, #5
 8006174:	69f9      	ldr	r1, [r7, #28]
 8006176:	4401      	add	r1, r0
 8006178:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800617c:	4313      	orrs	r3, r2
 800617e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d10d      	bne.n	80061a2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d009      	beq.n	80061a2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	6919      	ldr	r1, [r3, #16]
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619e:	460a      	mov	r2, r1
 80061a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	791b      	ldrb	r3, [r3, #4]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d128      	bne.n	80061fc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d110      	bne.n	80061dc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	69fa      	ldr	r2, [r7, #28]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061d8:	6013      	str	r3, [r2, #0]
 80061da:	e00f      	b.n	80061fc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	0151      	lsls	r1, r2, #5
 80061ee:	69fa      	ldr	r2, [r7, #28]
 80061f0:	440a      	add	r2, r1
 80061f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	440a      	add	r2, r1
 8006212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006216:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800621a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	1ff80000 	.word	0x1ff80000

0800622c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	4613      	mov	r3, r2
 8006238:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	785b      	ldrb	r3, [r3, #1]
 8006248:	2b01      	cmp	r3, #1
 800624a:	f040 80ce 	bne.w	80063ea <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d132      	bne.n	80062bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	0151      	lsls	r1, r2, #5
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	440a      	add	r2, r1
 800626c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006270:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006274:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006278:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	0151      	lsls	r1, r2, #5
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	440a      	add	r2, r1
 8006290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006294:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006298:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	0151      	lsls	r1, r2, #5
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	440a      	add	r2, r1
 80062b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b4:	0cdb      	lsrs	r3, r3, #19
 80062b6:	04db      	lsls	r3, r3, #19
 80062b8:	6113      	str	r3, [r2, #16]
 80062ba:	e04e      	b.n	800635a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d6:	0cdb      	lsrs	r3, r3, #19
 80062d8:	04db      	lsls	r3, r3, #19
 80062da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	0151      	lsls	r1, r2, #5
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	440a      	add	r2, r1
 80062f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	699a      	ldr	r2, [r3, #24]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	429a      	cmp	r2, r3
 800630a:	d903      	bls.n	8006314 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	68da      	ldr	r2, [r3, #12]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	0151      	lsls	r1, r2, #5
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	440a      	add	r2, r1
 800632a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800632e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006332:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006340:	691a      	ldr	r2, [r3, #16]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800634a:	6939      	ldr	r1, [r7, #16]
 800634c:	0148      	lsls	r0, r1, #5
 800634e:	6979      	ldr	r1, [r7, #20]
 8006350:	4401      	add	r1, r0
 8006352:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006356:	4313      	orrs	r3, r2
 8006358:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800635a:	79fb      	ldrb	r3, [r7, #7]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d11e      	bne.n	800639e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d009      	beq.n	800637c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	461a      	mov	r2, r3
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	0151      	lsls	r1, r2, #5
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	440a      	add	r2, r1
 8006392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006396:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	e097      	b.n	80064ce <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 8083 	beq.w	80064ce <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	f003 030f 	and.w	r3, r3, #15
 80063d8:	2101      	movs	r1, #1
 80063da:	fa01 f303 	lsl.w	r3, r1, r3
 80063de:	6979      	ldr	r1, [r7, #20]
 80063e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063e4:	4313      	orrs	r3, r2
 80063e6:	634b      	str	r3, [r1, #52]	; 0x34
 80063e8:	e071      	b.n	80064ce <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	0151      	lsls	r1, r2, #5
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	440a      	add	r2, r1
 8006400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006404:	0cdb      	lsrs	r3, r3, #19
 8006406:	04db      	lsls	r3, r3, #19
 8006408:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	0151      	lsls	r1, r2, #5
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	440a      	add	r2, r1
 8006420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006424:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006428:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800642c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	4413      	add	r3, r2
 800644e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	0151      	lsls	r1, r2, #5
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	440a      	add	r2, r1
 800645c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006460:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006464:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006472:	691a      	ldr	r2, [r3, #16]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800647c:	6939      	ldr	r1, [r7, #16]
 800647e:	0148      	lsls	r0, r1, #5
 8006480:	6979      	ldr	r1, [r7, #20]
 8006482:	4401      	add	r1, r0
 8006484:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006488:	4313      	orrs	r3, r2
 800648a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d10d      	bne.n	80064ae <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d009      	beq.n	80064ae <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	6919      	ldr	r1, [r3, #16]
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064aa:	460a      	mov	r2, r1
 80064ac:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	0151      	lsls	r1, r2, #5
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	440a      	add	r2, r1
 80064c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	785b      	ldrb	r3, [r3, #1]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d14a      	bne.n	8006590 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800650e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006512:	f040 8086 	bne.w	8006622 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	7812      	ldrb	r2, [r2, #0]
 800652a:	0151      	lsls	r1, r2, #5
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	440a      	add	r2, r1
 8006530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006534:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006538:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	7812      	ldrb	r2, [r2, #0]
 800654e:	0151      	lsls	r1, r2, #5
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	440a      	add	r2, r1
 8006554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006558:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800655c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3301      	adds	r3, #1
 8006562:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f242 7210 	movw	r2, #10000	; 0x2710
 800656a:	4293      	cmp	r3, r2
 800656c:	d902      	bls.n	8006574 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	75fb      	strb	r3, [r7, #23]
          break;
 8006572:	e056      	b.n	8006622 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800658c:	d0e7      	beq.n	800655e <USB_EPStopXfer+0x82>
 800658e:	e048      	b.n	8006622 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065a8:	d13b      	bne.n	8006622 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	7812      	ldrb	r2, [r2, #0]
 80065be:	0151      	lsls	r1, r2, #5
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	440a      	add	r2, r1
 80065c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	7812      	ldrb	r2, [r2, #0]
 80065e2:	0151      	lsls	r1, r2, #5
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	440a      	add	r2, r1
 80065e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3301      	adds	r3, #1
 80065f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80065fe:	4293      	cmp	r3, r2
 8006600:	d902      	bls.n	8006608 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	75fb      	strb	r3, [r7, #23]
          break;
 8006606:	e00c      	b.n	8006622 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	4413      	add	r3, r2
 8006612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800661c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006620:	d0e7      	beq.n	80065f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006622:	7dfb      	ldrb	r3, [r7, #23]
}
 8006624:	4618      	mov	r0, r3
 8006626:	371c      	adds	r7, #28
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006630:	b480      	push	{r7}
 8006632:	b089      	sub	sp, #36	; 0x24
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	4611      	mov	r1, r2
 800663c:	461a      	mov	r2, r3
 800663e:	460b      	mov	r3, r1
 8006640:	71fb      	strb	r3, [r7, #7]
 8006642:	4613      	mov	r3, r2
 8006644:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800664e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006652:	2b00      	cmp	r3, #0
 8006654:	d123      	bne.n	800669e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006656:	88bb      	ldrh	r3, [r7, #4]
 8006658:	3303      	adds	r3, #3
 800665a:	089b      	lsrs	r3, r3, #2
 800665c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800665e:	2300      	movs	r3, #0
 8006660:	61bb      	str	r3, [r7, #24]
 8006662:	e018      	b.n	8006696 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006664:	79fb      	ldrb	r3, [r7, #7]
 8006666:	031a      	lsls	r2, r3, #12
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	4413      	add	r3, r2
 800666c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006670:	461a      	mov	r2, r3
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	3301      	adds	r3, #1
 800667c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	3301      	adds	r3, #1
 8006682:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	3301      	adds	r3, #1
 8006688:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	3301      	adds	r3, #1
 800668e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	3301      	adds	r3, #1
 8006694:	61bb      	str	r3, [r7, #24]
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	429a      	cmp	r2, r3
 800669c:	d3e2      	bcc.n	8006664 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3724      	adds	r7, #36	; 0x24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b08b      	sub	sp, #44	; 0x2c
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	4613      	mov	r3, r2
 80066b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80066c2:	88fb      	ldrh	r3, [r7, #6]
 80066c4:	089b      	lsrs	r3, r3, #2
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80066ca:	88fb      	ldrh	r3, [r7, #6]
 80066cc:	f003 0303 	and.w	r3, r3, #3
 80066d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80066d2:	2300      	movs	r3, #0
 80066d4:	623b      	str	r3, [r7, #32]
 80066d6:	e014      	b.n	8006702 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	3301      	adds	r3, #1
 80066e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	3301      	adds	r3, #1
 80066ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	3301      	adds	r3, #1
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	3301      	adds	r3, #1
 80066fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	3301      	adds	r3, #1
 8006700:	623b      	str	r3, [r7, #32]
 8006702:	6a3a      	ldr	r2, [r7, #32]
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	429a      	cmp	r2, r3
 8006708:	d3e6      	bcc.n	80066d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800670a:	8bfb      	ldrh	r3, [r7, #30]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01e      	beq.n	800674e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800671a:	461a      	mov	r2, r3
 800671c:	f107 0310 	add.w	r3, r7, #16
 8006720:	6812      	ldr	r2, [r2, #0]
 8006722:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	b2db      	uxtb	r3, r3
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	fa22 f303 	lsr.w	r3, r2, r3
 8006730:	b2da      	uxtb	r2, r3
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	701a      	strb	r2, [r3, #0]
      i++;
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	3301      	adds	r3, #1
 800673a:	623b      	str	r3, [r7, #32]
      pDest++;
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	3301      	adds	r3, #1
 8006740:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006742:	8bfb      	ldrh	r3, [r7, #30]
 8006744:	3b01      	subs	r3, #1
 8006746:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006748:	8bfb      	ldrh	r3, [r7, #30]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1ea      	bne.n	8006724 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006750:	4618      	mov	r0, r3
 8006752:	372c      	adds	r7, #44	; 0x2c
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	785b      	ldrb	r3, [r3, #1]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d12c      	bne.n	80067d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	db12      	blt.n	80067b0 <USB_EPSetStall+0x54>
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00f      	beq.n	80067b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	0151      	lsls	r1, r2, #5
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	440a      	add	r2, r1
 80067a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	0151      	lsls	r1, r2, #5
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	440a      	add	r2, r1
 80067c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067ce:	6013      	str	r3, [r2, #0]
 80067d0:	e02b      	b.n	800682a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	db12      	blt.n	800680a <USB_EPSetStall+0xae>
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00f      	beq.n	800680a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	0151      	lsls	r1, r2, #5
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	440a      	add	r2, r1
 8006800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006804:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006808:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	0151      	lsls	r1, r2, #5
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	440a      	add	r2, r1
 8006820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006828:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	785b      	ldrb	r3, [r3, #1]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d128      	bne.n	80068a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	0151      	lsls	r1, r2, #5
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	440a      	add	r2, r1
 800686a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006872:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	791b      	ldrb	r3, [r3, #4]
 8006878:	2b03      	cmp	r3, #3
 800687a:	d003      	beq.n	8006884 <USB_EPClearStall+0x4c>
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	791b      	ldrb	r3, [r3, #4]
 8006880:	2b02      	cmp	r3, #2
 8006882:	d138      	bne.n	80068f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	0151      	lsls	r1, r2, #5
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	440a      	add	r2, r1
 800689a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800689e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068a2:	6013      	str	r3, [r2, #0]
 80068a4:	e027      	b.n	80068f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	0151      	lsls	r1, r2, #5
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	440a      	add	r2, r1
 80068bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	791b      	ldrb	r3, [r3, #4]
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d003      	beq.n	80068d6 <USB_EPClearStall+0x9e>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	791b      	ldrb	r3, [r3, #4]
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d10f      	bne.n	80068f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	0151      	lsls	r1, r2, #5
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	440a      	add	r2, r1
 80068ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006922:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006926:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006938:	68f9      	ldr	r1, [r7, #12]
 800693a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800693e:	4313      	orrs	r3, r2
 8006940:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800696a:	f023 0303 	bic.w	r3, r3, #3
 800696e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800697e:	f023 0302 	bic.w	r3, r3, #2
 8006982:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006992:	b480      	push	{r7}
 8006994:	b085      	sub	sp, #20
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069ac:	f023 0303 	bic.w	r3, r3, #3
 80069b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069c0:	f043 0302 	orr.w	r3, r3, #2
 80069c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4013      	ands	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80069ec:	68fb      	ldr	r3, [r7, #12]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b085      	sub	sp, #20
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	0c1b      	lsrs	r3, r3, #16
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b085      	sub	sp, #20
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	4013      	ands	r3, r2
 8006a50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	b29b      	uxth	r3, r3
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b085      	sub	sp, #20
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006a72:	78fb      	ldrb	r3, [r7, #3]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a90:	68bb      	ldr	r3, [r7, #8]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b087      	sub	sp, #28
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006ac2:	78fb      	ldrb	r3, [r7, #3]
 8006ac4:	f003 030f 	and.w	r3, r3, #15
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	fa22 f303 	lsr.w	r3, r2, r3
 8006ace:	01db      	lsls	r3, r3, #7
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006ad8:	78fb      	ldrb	r3, [r7, #3]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	4013      	ands	r3, r2
 8006aea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006aec:	68bb      	ldr	r3, [r7, #8]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	f003 0301 	and.w	r3, r3, #1
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b085      	sub	sp, #20
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006b34:	f023 0307 	bic.w	r3, r3, #7
 8006b38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3714      	adds	r7, #20
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	460b      	mov	r3, r1
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	333c      	adds	r3, #60	; 0x3c
 8006b72:	3304      	adds	r3, #4
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	4a26      	ldr	r2, [pc, #152]	; (8006c14 <USB_EP0_OutStart+0xb8>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d90a      	bls.n	8006b96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b90:	d101      	bne.n	8006b96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	e037      	b.n	8006c06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bc4:	f043 0318 	orr.w	r3, r3, #24
 8006bc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bd8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006bdc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006bde:	7afb      	ldrb	r3, [r7, #11]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d10f      	bne.n	8006c04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bea:	461a      	mov	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bfe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006c02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	4f54300a 	.word	0x4f54300a

08006c18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3301      	adds	r3, #1
 8006c28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4a13      	ldr	r2, [pc, #76]	; (8006c7c <USB_CoreReset+0x64>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d901      	bls.n	8006c36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e01b      	b.n	8006c6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	daf2      	bge.n	8006c24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	f043 0201 	orr.w	r2, r3, #1
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3301      	adds	r3, #1
 8006c52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4a09      	ldr	r2, [pc, #36]	; (8006c7c <USB_CoreReset+0x64>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d901      	bls.n	8006c60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e006      	b.n	8006c6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d0f0      	beq.n	8006c4e <USB_CoreReset+0x36>

  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	00030d40 	.word	0x00030d40

08006c80 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8006c8c:	f643 4050 	movw	r0, #15440	; 0x3c50
 8006c90:	f002 faec 	bl	800926c <USBD_static_malloc>
 8006c94:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d109      	bne.n	8006cb0 <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	32b0      	adds	r2, #176	; 0xb0
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006cac:	2302      	movs	r3, #2
 8006cae:	e07e      	b.n	8006dae <USBD_AUDIO_Init+0x12e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	32b0      	adds	r2, #176	; 0xb0
 8006cba:	68f9      	ldr	r1, [r7, #12]
 8006cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	32b0      	adds	r2, #176	; 0xb0
 8006cca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	7c1b      	ldrb	r3, [r3, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10e      	bne.n	8006cfa <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8006cdc:	4b36      	ldr	r3, [pc, #216]	; (8006db8 <USBD_AUDIO_Init+0x138>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	f003 020f 	and.w	r2, r3, #15
 8006ce4:	6879      	ldr	r1, [r7, #4]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	440b      	add	r3, r1
 8006cf0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	801a      	strh	r2, [r3, #0]
 8006cf8:	e00d      	b.n	8006d16 <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 8006cfa:	4b2f      	ldr	r3, [pc, #188]	; (8006db8 <USBD_AUDIO_Init+0x138>)
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	f003 020f 	and.w	r2, r3, #15
 8006d02:	6879      	ldr	r1, [r7, #4]
 8006d04:	4613      	mov	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	440b      	add	r3, r1
 8006d0e:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006d12:	2201      	movs	r2, #1
 8006d14:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8006d16:	4b28      	ldr	r3, [pc, #160]	; (8006db8 <USBD_AUDIO_Init+0x138>)
 8006d18:	7819      	ldrb	r1, [r3, #0]
 8006d1a:	23c0      	movs	r3, #192	; 0xc0
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f002 f981 	bl	8009026 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 8006d24:	4b24      	ldr	r3, [pc, #144]	; (8006db8 <USBD_AUDIO_Init+0x138>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	f003 020f 	and.w	r2, r3, #15
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	440b      	add	r3, r1
 8006d38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006d4c:	2203      	movs	r2, #3
 8006d4e:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
  haudio->wr_ptr = 0U;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08
  haudio->rd_ptr = 0U;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006d64:	2200      	movs	r2, #0
 8006d66:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
  haudio->rd_enable = 0U;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	33b0      	adds	r3, #176	; 0xb0
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	2146      	movs	r1, #70	; 0x46
 8006d8c:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8006d90:	4798      	blx	r3
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <USBD_AUDIO_Init+0x11c>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e008      	b.n	8006dae <USBD_AUDIO_Init+0x12e>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 8006d9c:	4b06      	ldr	r3, [pc, #24]	; (8006db8 <USBD_AUDIO_Init+0x138>)
 8006d9e:	7819      	ldrb	r1, [r3, #0]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	1d1a      	adds	r2, r3, #4
 8006da4:	23c0      	movs	r3, #192	; 0xc0
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f002 fa2c 	bl	8009204 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	200000c2 	.word	0x200000c2

08006dbc <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 8006dc8:	4b28      	ldr	r3, [pc, #160]	; (8006e6c <USBD_AUDIO_DeInit+0xb0>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f002 f94f 	bl	8009072 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 8006dd4:	4b25      	ldr	r3, [pc, #148]	; (8006e6c <USBD_AUDIO_DeInit+0xb0>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	f003 020f 	and.w	r2, r3, #15
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	4613      	mov	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	440b      	add	r3, r1
 8006de8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006dec:	2200      	movs	r2, #0
 8006dee:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 8006df0:	4b1e      	ldr	r3, [pc, #120]	; (8006e6c <USBD_AUDIO_DeInit+0xb0>)
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	f003 020f 	and.w	r2, r3, #15
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	440b      	add	r3, r1
 8006e04:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006e08:	2200      	movs	r2, #0
 8006e0a:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	32b0      	adds	r2, #176	; 0xb0
 8006e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d020      	beq.n	8006e60 <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	33b0      	adds	r3, #176	; 0xb0
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2000      	movs	r0, #0
 8006e32:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	32b0      	adds	r2, #176	; 0xb0
 8006e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f002 fa20 	bl	8009288 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	32b0      	adds	r2, #176	; 0xb0
 8006e52:	2100      	movs	r1, #0
 8006e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	200000c2 	.word	0x200000c2

08006e70 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	32b0      	adds	r2, #176	; 0xb0
 8006e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e90:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d101      	bne.n	8006e9c <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e0c1      	b.n	8007020 <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d01a      	beq.n	8006ede <USBD_AUDIO_Setup+0x6e>
 8006ea8:	2b20      	cmp	r3, #32
 8006eaa:	f040 80b1 	bne.w	8007010 <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	785b      	ldrb	r3, [r3, #1]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d006      	beq.n	8006ec4 <USBD_AUDIO_Setup+0x54>
 8006eb6:	2b81      	cmp	r3, #129	; 0x81
 8006eb8:	d109      	bne.n	8006ece <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f9d7 	bl	8007270 <AUDIO_REQ_GetCurrent>
          break;
 8006ec2:	e00b      	b.n	8006edc <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f9fe 	bl	80072c8 <AUDIO_REQ_SetCurrent>
          break;
 8006ecc:	e006      	b.n	8006edc <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 fc62 	bl	800879a <USBD_CtlError>
          ret = USBD_FAIL;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	75fb      	strb	r3, [r7, #23]
          break;
 8006eda:	bf00      	nop
      }
      break;
 8006edc:	e09f      	b.n	800701e <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	785b      	ldrb	r3, [r3, #1]
 8006ee2:	2b0b      	cmp	r3, #11
 8006ee4:	f200 8089 	bhi.w	8006ffa <USBD_AUDIO_Setup+0x18a>
 8006ee8:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <USBD_AUDIO_Setup+0x80>)
 8006eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eee:	bf00      	nop
 8006ef0:	08006f21 	.word	0x08006f21
 8006ef4:	08007009 	.word	0x08007009
 8006ef8:	08006ffb 	.word	0x08006ffb
 8006efc:	08006ffb 	.word	0x08006ffb
 8006f00:	08006ffb 	.word	0x08006ffb
 8006f04:	08006ffb 	.word	0x08006ffb
 8006f08:	08006f4b 	.word	0x08006f4b
 8006f0c:	08006ffb 	.word	0x08006ffb
 8006f10:	08006ffb 	.word	0x08006ffb
 8006f14:	08006ffb 	.word	0x08006ffb
 8006f18:	08006f93 	.word	0x08006f93
 8006f1c:	08006fbb 	.word	0x08006fbb
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b03      	cmp	r3, #3
 8006f2a:	d107      	bne.n	8006f3c <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f2c:	f107 0308 	add.w	r3, r7, #8
 8006f30:	2202      	movs	r2, #2
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f001 fca1 	bl	800887c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f3a:	e068      	b.n	800700e <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f001 fc2b 	bl	800879a <USBD_CtlError>
            ret = USBD_FAIL;
 8006f44:	2303      	movs	r3, #3
 8006f46:	75fb      	strb	r3, [r7, #23]
          break;
 8006f48:	e061      	b.n	800700e <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	885b      	ldrh	r3, [r3, #2]
 8006f4e:	0a1b      	lsrs	r3, r3, #8
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	2b21      	cmp	r3, #33	; 0x21
 8006f54:	d15a      	bne.n	800700c <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f000 fa21 	bl	80073a4 <USBD_AUDIO_GetAudioHeaderDesc>
 8006f62:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00c      	beq.n	8006f84 <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	88db      	ldrh	r3, [r3, #6]
 8006f6e:	2b09      	cmp	r3, #9
 8006f70:	bf28      	it	cs
 8006f72:	2309      	movcs	r3, #9
 8006f74:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f76:	897b      	ldrh	r3, [r7, #10]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	68f9      	ldr	r1, [r7, #12]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f001 fc7d 	bl	800887c <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 8006f82:	e043      	b.n	800700c <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 fc07 	bl	800879a <USBD_CtlError>
              ret = USBD_FAIL;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	75fb      	strb	r3, [r7, #23]
          break;
 8006f90:	e03c      	b.n	800700c <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d106      	bne.n	8006fac <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f001 fc69 	bl	800887c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006faa:	e030      	b.n	800700e <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f001 fbf3 	bl	800879a <USBD_CtlError>
            ret = USBD_FAIL;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	75fb      	strb	r3, [r7, #23]
          break;
 8006fb8:	e029      	b.n	800700e <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d112      	bne.n	8006fec <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	885b      	ldrh	r3, [r3, #2]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d806      	bhi.n	8006fde <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	885b      	ldrh	r3, [r3, #2]
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fdc:	e017      	b.n	800700e <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f001 fbda 	bl	800879a <USBD_CtlError>
              ret = USBD_FAIL;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	75fb      	strb	r3, [r7, #23]
          break;
 8006fea:	e010      	b.n	800700e <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f001 fbd3 	bl	800879a <USBD_CtlError>
            ret = USBD_FAIL;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	75fb      	strb	r3, [r7, #23]
          break;
 8006ff8:	e009      	b.n	800700e <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f001 fbcc 	bl	800879a <USBD_CtlError>
          ret = USBD_FAIL;
 8007002:	2303      	movs	r3, #3
 8007004:	75fb      	strb	r3, [r7, #23]
          break;
 8007006:	e002      	b.n	800700e <USBD_AUDIO_Setup+0x19e>
          break;
 8007008:	bf00      	nop
 800700a:	e008      	b.n	800701e <USBD_AUDIO_Setup+0x1ae>
          break;
 800700c:	bf00      	nop
      }
      break;
 800700e:	e006      	b.n	800701e <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f001 fbc1 	bl	800879a <USBD_CtlError>
      ret = USBD_FAIL;
 8007018:	2303      	movs	r3, #3
 800701a:	75fb      	strb	r3, [r7, #23]
      break;
 800701c:	bf00      	nop
  }

  return (uint8_t)ret;
 800701e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	226d      	movs	r2, #109	; 0x6d
 8007034:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8007036:	4b03      	ldr	r3, [pc, #12]	; (8007044 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8007038:	4618      	mov	r0, r3
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	20000048 	.word	0x20000048

08007048 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	460b      	mov	r3, r1
 8007052:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b084      	sub	sp, #16
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	32b0      	adds	r2, #176	; 0xb0
 8007074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007078:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007080:	2303      	movs	r3, #3
 8007082:	e02a      	b.n	80070da <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800708a:	f893 3c0a 	ldrb.w	r3, [r3, #3082]	; 0xc0a
 800708e:	2b01      	cmp	r3, #1
 8007090:	d122      	bne.n	80070d8 <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007098:	f893 3c4c 	ldrb.w	r3, [r3, #3148]	; 0xc4c
 800709c:	2b02      	cmp	r3, #2
 800709e:	d11b      	bne.n	80070d8 <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	33b0      	adds	r3, #176	; 0xb0
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80070b8:	f892 2c0b 	ldrb.w	r2, [r2, #3083]	; 0xc0b
 80070bc:	4610      	mov	r0, r2
 80070be:	4798      	blx	r3
      haudio->control.cmd = 0U;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
      haudio->control.len = 0U;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    }
  }

  return (uint8_t)USBD_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	460b      	mov	r3, r1
 8007118:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
	...

08007144 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	460b      	mov	r3, r1
 800714e:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	32b0      	adds	r2, #176	; 0xb0
 800715a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800715e:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007166:	2303      	movs	r3, #3
 8007168:	e07c      	b.n	8007264 <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 800716a:	4b40      	ldr	r3, [pc, #256]	; (800726c <USBD_AUDIO_DataOut+0x128>)
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	78fa      	ldrb	r2, [r7, #3]
 8007170:	429a      	cmp	r2, r3
 8007172:	d176      	bne.n	8007262 <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8007174:	78fb      	ldrb	r3, [r7, #3]
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f002 f864 	bl	8009246 <USBD_LL_GetRxDataSize>
 800717e:	4603      	mov	r3, r0
 8007180:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	33b0      	adds	r3, #176	; 0xb0
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800719a:	f8b2 2c08 	ldrh.w	r2, [r2, #3080]	; 0xc08
 800719e:	4611      	mov	r1, r2
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	440a      	add	r2, r1
 80071a4:	1d10      	adds	r0, r2, #4
 80071a6:	8979      	ldrh	r1, [r7, #10]
 80071a8:	2201      	movs	r2, #1
 80071aa:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80071b2:	f8b3 2c08 	ldrh.w	r2, [r3, #3080]	; 0xc08
 80071b6:	897b      	ldrh	r3, [r7, #10]
 80071b8:	4413      	add	r3, r2
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80071c2:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80071cc:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80071d0:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 80071d4:	d121      	bne.n	800721a <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80071dc:	2200      	movs	r2, #0
 80071de:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80071e8:	f893 3c04 	ldrb.w	r3, [r3, #3076]	; 0xc04
 80071ec:	2b03      	cmp	r3, #3
 80071ee:	d114      	bne.n	800721a <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	33b0      	adds	r3, #176	; 0xb0
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	1d10      	adds	r0, r2, #4
 8007206:	2201      	movs	r2, #1
 8007208:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 800720c:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
      }
    }

    if (haudio->rd_enable == 0U)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007220:	f893 3c05 	ldrb.w	r3, [r3, #3077]	; 0xc05
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10d      	bne.n	8007244 <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800722e:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8007232:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8007236:	d105      	bne.n	8007244 <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8007244:	4b09      	ldr	r3, [pc, #36]	; (800726c <USBD_AUDIO_DataOut+0x128>)
 8007246:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800724e:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8007252:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4413      	add	r3, r2
 8007258:	1d1a      	adds	r2, r3, #4
 800725a:	23c0      	movs	r3, #192	; 0xc0
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 ffd1 	bl	8009204 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	200000c2 	.word	0x200000c2

08007270 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	32b0      	adds	r2, #176	; 0xb0
 8007284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007288:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d017      	beq.n	80072c0 <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007296:	330b      	adds	r3, #11
 8007298:	2240      	movs	r2, #64	; 0x40
 800729a:	2100      	movs	r1, #0
 800729c:	4618      	mov	r0, r3
 800729e:	f002 f829 	bl	80092f4 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80072a8:	330b      	adds	r3, #11
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	88d2      	ldrh	r2, [r2, #6]
 80072ae:	2a40      	cmp	r2, #64	; 0x40
 80072b0:	bf28      	it	cs
 80072b2:	2240      	movcs	r2, #64	; 0x40
 80072b4:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f001 fadf 	bl	800887c <USBD_CtlSendData>
 80072be:	e000      	b.n	80072c2 <AUDIO_REQ_GetCurrent+0x52>
    return;
 80072c0:	bf00      	nop
}
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	32b0      	adds	r2, #176	; 0xb0
 80072dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e0:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d02f      	beq.n	8007348 <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	88db      	ldrh	r3, [r3, #6]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d02c      	beq.n	800734a <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	88db      	ldrh	r3, [r3, #6]
 8007300:	2b3f      	cmp	r3, #63	; 0x3f
 8007302:	d803      	bhi.n	800730c <AUDIO_REQ_SetCurrent+0x44>
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	88db      	ldrh	r3, [r3, #6]
 8007308:	b2da      	uxtb	r2, r3
 800730a:	e000      	b.n	800730e <AUDIO_REQ_SetCurrent+0x46>
 800730c:	2240      	movs	r2, #64	; 0x40
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007314:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	889b      	ldrh	r3, [r3, #4]
 800731c:	0a1b      	lsrs	r3, r3, #8
 800731e:	b29b      	uxth	r3, r3
 8007320:	b2da      	uxtb	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007328:	f883 2c4c 	strb.w	r2, [r3, #3148]	; 0xc4c

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007332:	330b      	adds	r3, #11
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800733a:	f892 2c4b 	ldrb.w	r2, [r2, #3147]	; 0xc4b
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f001 fac7 	bl	80088d4 <USBD_CtlPrepareRx>
 8007346:	e000      	b.n	800734a <AUDIO_REQ_SetCurrent+0x82>
    return;
 8007348:	bf00      	nop
  }
}
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	220a      	movs	r2, #10
 800735c:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 800735e:	4b03      	ldr	r3, [pc, #12]	; (800736c <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	200000b8 	.word	0x200000b8

08007370 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007380:	2303      	movs	r3, #3
 8007382:	e009      	b.n	8007398 <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	33b0      	adds	r3, #176	; 0xb0
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 80073b4:	2300      	movs	r3, #0
 80073b6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	885b      	ldrh	r3, [r3, #2]
 80073bc:	b29a      	uxth	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d91c      	bls.n	8007402 <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
  {
    ptr = desc->bLength;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80073d0:	e011      	b.n	80073f6 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80073d2:	f107 030a 	add.w	r3, r7, #10
 80073d6:	4619      	mov	r1, r3
 80073d8:	6978      	ldr	r0, [r7, #20]
 80073da:	f000 fbe0 	bl	8007b9e <USBD_GetNextDesc>
 80073de:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	785b      	ldrb	r3, [r3, #1]
 80073e4:	2b24      	cmp	r3, #36	; 0x24
 80073e6:	d106      	bne.n	80073f6 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d102      	bne.n	80073f6 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
      {
        pAudioDesc = (uint8_t *)pdesc;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	613b      	str	r3, [r7, #16]
        break;
 80073f4:	e005      	b.n	8007402 <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
    while (ptr < desc->wTotalLength)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	885b      	ldrh	r3, [r3, #2]
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	897b      	ldrh	r3, [r7, #10]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d8e7      	bhi.n	80073d2 <USBD_AUDIO_GetAudioHeaderDesc+0x2e>
      }
    }
  }
  return pAudioDesc;
 8007402:	693b      	ldr	r3, [r7, #16]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3718      	adds	r7, #24
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	4613      	mov	r3, r2
 8007418:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007420:	2303      	movs	r3, #3
 8007422:	e01f      	b.n	8007464 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	79fa      	ldrb	r2, [r7, #7]
 8007456:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f001 fd7d 	bl	8008f58 <USBD_LL_Init>
 800745e:	4603      	mov	r3, r0
 8007460:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007462:	7dfb      	ldrb	r3, [r7, #23]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007480:	2303      	movs	r3, #3
 8007482:	e025      	b.n	80074d0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	32ae      	adds	r2, #174	; 0xae
 8007496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00f      	beq.n	80074c0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	32ae      	adds	r2, #174	; 0xae
 80074aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	f107 020e 	add.w	r2, r7, #14
 80074b4:	4610      	mov	r0, r2
 80074b6:	4798      	blx	r3
 80074b8:	4602      	mov	r2, r0
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f001 fd85 	bl	8008ff0 <USBD_LL_Start>
 80074e6:	4603      	mov	r3, r0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	460b      	mov	r3, r1
 8007510:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751c:	2b00      	cmp	r3, #0
 800751e:	d009      	beq.n	8007534 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	78fa      	ldrb	r2, [r7, #3]
 800752a:	4611      	mov	r1, r2
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	4798      	blx	r3
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007534:	7bfb      	ldrb	r3, [r7, #15]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	460b      	mov	r3, r1
 8007548:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	78fa      	ldrb	r2, [r7, #3]
 8007558:	4611      	mov	r1, r2
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	4798      	blx	r3
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007564:	2303      	movs	r3, #3
 8007566:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007568:	7bfb      	ldrb	r3, [r7, #15]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b084      	sub	sp, #16
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
 800757a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	4618      	mov	r0, r3
 8007586:	f001 f8ce 	bl	8008726 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007598:	461a      	mov	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075a6:	f003 031f 	and.w	r3, r3, #31
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d01a      	beq.n	80075e4 <USBD_LL_SetupStage+0x72>
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d822      	bhi.n	80075f8 <USBD_LL_SetupStage+0x86>
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <USBD_LL_SetupStage+0x4a>
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d00a      	beq.n	80075d0 <USBD_LL_SetupStage+0x5e>
 80075ba:	e01d      	b.n	80075f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fb25 	bl	8007c14 <USBD_StdDevReq>
 80075ca:	4603      	mov	r3, r0
 80075cc:	73fb      	strb	r3, [r7, #15]
      break;
 80075ce:	e020      	b.n	8007612 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fb8d 	bl	8007cf8 <USBD_StdItfReq>
 80075de:	4603      	mov	r3, r0
 80075e0:	73fb      	strb	r3, [r7, #15]
      break;
 80075e2:	e016      	b.n	8007612 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075ea:	4619      	mov	r1, r3
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fbef 	bl	8007dd0 <USBD_StdEPReq>
 80075f2:	4603      	mov	r3, r0
 80075f4:	73fb      	strb	r3, [r7, #15]
      break;
 80075f6:	e00c      	b.n	8007612 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007602:	b2db      	uxtb	r3, r3
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f001 fd52 	bl	80090b0 <USBD_LL_StallEP>
 800760c:	4603      	mov	r3, r0
 800760e:	73fb      	strb	r3, [r7, #15]
      break;
 8007610:	bf00      	nop
  }

  return ret;
 8007612:	7bfb      	ldrb	r3, [r7, #15]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	460b      	mov	r3, r1
 8007626:	607a      	str	r2, [r7, #4]
 8007628:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800762e:	7afb      	ldrb	r3, [r7, #11]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d16e      	bne.n	8007712 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800763a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007642:	2b03      	cmp	r3, #3
 8007644:	f040 8098 	bne.w	8007778 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	429a      	cmp	r2, r3
 8007652:	d913      	bls.n	800767c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	689a      	ldr	r2, [r3, #8]
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	1ad2      	subs	r2, r2, r3
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	68da      	ldr	r2, [r3, #12]
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	4293      	cmp	r3, r2
 800766c:	bf28      	it	cs
 800766e:	4613      	movcs	r3, r2
 8007670:	461a      	mov	r2, r3
 8007672:	6879      	ldr	r1, [r7, #4]
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f001 f94a 	bl	800890e <USBD_CtlContinueRx>
 800767a:	e07d      	b.n	8007778 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007682:	f003 031f 	and.w	r3, r3, #31
 8007686:	2b02      	cmp	r3, #2
 8007688:	d014      	beq.n	80076b4 <USBD_LL_DataOutStage+0x98>
 800768a:	2b02      	cmp	r3, #2
 800768c:	d81d      	bhi.n	80076ca <USBD_LL_DataOutStage+0xae>
 800768e:	2b00      	cmp	r3, #0
 8007690:	d002      	beq.n	8007698 <USBD_LL_DataOutStage+0x7c>
 8007692:	2b01      	cmp	r3, #1
 8007694:	d003      	beq.n	800769e <USBD_LL_DataOutStage+0x82>
 8007696:	e018      	b.n	80076ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	75bb      	strb	r3, [r7, #22]
            break;
 800769c:	e018      	b.n	80076d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	4619      	mov	r1, r3
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 fa5e 	bl	8007b6a <USBD_CoreFindIF>
 80076ae:	4603      	mov	r3, r0
 80076b0:	75bb      	strb	r3, [r7, #22]
            break;
 80076b2:	e00d      	b.n	80076d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	4619      	mov	r1, r3
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 fa60 	bl	8007b84 <USBD_CoreFindEP>
 80076c4:	4603      	mov	r3, r0
 80076c6:	75bb      	strb	r3, [r7, #22]
            break;
 80076c8:	e002      	b.n	80076d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	75bb      	strb	r3, [r7, #22]
            break;
 80076ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80076d0:	7dbb      	ldrb	r3, [r7, #22]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d119      	bne.n	800770a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d113      	bne.n	800770a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80076e2:	7dba      	ldrb	r2, [r7, #22]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	32ae      	adds	r2, #174	; 0xae
 80076e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00b      	beq.n	800770a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80076f2:	7dba      	ldrb	r2, [r7, #22]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80076fa:	7dba      	ldrb	r2, [r7, #22]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	32ae      	adds	r2, #174	; 0xae
 8007700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f001 f910 	bl	8008930 <USBD_CtlSendStatus>
 8007710:	e032      	b.n	8007778 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007712:	7afb      	ldrb	r3, [r7, #11]
 8007714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007718:	b2db      	uxtb	r3, r3
 800771a:	4619      	mov	r1, r3
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 fa31 	bl	8007b84 <USBD_CoreFindEP>
 8007722:	4603      	mov	r3, r0
 8007724:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007726:	7dbb      	ldrb	r3, [r7, #22]
 8007728:	2bff      	cmp	r3, #255	; 0xff
 800772a:	d025      	beq.n	8007778 <USBD_LL_DataOutStage+0x15c>
 800772c:	7dbb      	ldrb	r3, [r7, #22]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d122      	bne.n	8007778 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b03      	cmp	r3, #3
 800773c:	d117      	bne.n	800776e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800773e:	7dba      	ldrb	r2, [r7, #22]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	32ae      	adds	r2, #174	; 0xae
 8007744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00f      	beq.n	800776e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800774e:	7dba      	ldrb	r2, [r7, #22]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007756:	7dba      	ldrb	r2, [r7, #22]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	32ae      	adds	r2, #174	; 0xae
 800775c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	7afa      	ldrb	r2, [r7, #11]
 8007764:	4611      	mov	r1, r2
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	4798      	blx	r3
 800776a:	4603      	mov	r3, r0
 800776c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800776e:	7dfb      	ldrb	r3, [r7, #23]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007774:	7dfb      	ldrb	r3, [r7, #23]
 8007776:	e000      	b.n	800777a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b086      	sub	sp, #24
 8007786:	af00      	add	r7, sp, #0
 8007788:	60f8      	str	r0, [r7, #12]
 800778a:	460b      	mov	r3, r1
 800778c:	607a      	str	r2, [r7, #4]
 800778e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007790:	7afb      	ldrb	r3, [r7, #11]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d16f      	bne.n	8007876 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3314      	adds	r3, #20
 800779a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d15a      	bne.n	800785c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	689a      	ldr	r2, [r3, #8]
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d914      	bls.n	80077dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	1ad2      	subs	r2, r2, r3
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	461a      	mov	r2, r3
 80077c6:	6879      	ldr	r1, [r7, #4]
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f001 f872 	bl	80088b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077ce:	2300      	movs	r3, #0
 80077d0:	2200      	movs	r2, #0
 80077d2:	2100      	movs	r1, #0
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f001 fd15 	bl	8009204 <USBD_LL_PrepareReceive>
 80077da:	e03f      	b.n	800785c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	68da      	ldr	r2, [r3, #12]
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d11c      	bne.n	8007822 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d316      	bcc.n	8007822 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80077fe:	429a      	cmp	r2, r3
 8007800:	d20f      	bcs.n	8007822 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007802:	2200      	movs	r2, #0
 8007804:	2100      	movs	r1, #0
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f001 f853 	bl	80088b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007814:	2300      	movs	r3, #0
 8007816:	2200      	movs	r2, #0
 8007818:	2100      	movs	r1, #0
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f001 fcf2 	bl	8009204 <USBD_LL_PrepareReceive>
 8007820:	e01c      	b.n	800785c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b03      	cmp	r3, #3
 800782c:	d10f      	bne.n	800784e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d009      	beq.n	800784e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800784e:	2180      	movs	r1, #128	; 0x80
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f001 fc2d 	bl	80090b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f001 f87d 	bl	8008956 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d03a      	beq.n	80078dc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f7ff fe42 	bl	80074f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007874:	e032      	b.n	80078dc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007876:	7afb      	ldrb	r3, [r7, #11]
 8007878:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800787c:	b2db      	uxtb	r3, r3
 800787e:	4619      	mov	r1, r3
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 f97f 	bl	8007b84 <USBD_CoreFindEP>
 8007886:	4603      	mov	r3, r0
 8007888:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800788a:	7dfb      	ldrb	r3, [r7, #23]
 800788c:	2bff      	cmp	r3, #255	; 0xff
 800788e:	d025      	beq.n	80078dc <USBD_LL_DataInStage+0x15a>
 8007890:	7dfb      	ldrb	r3, [r7, #23]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d122      	bne.n	80078dc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b03      	cmp	r3, #3
 80078a0:	d11c      	bne.n	80078dc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80078a2:	7dfa      	ldrb	r2, [r7, #23]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	32ae      	adds	r2, #174	; 0xae
 80078a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d014      	beq.n	80078dc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80078b2:	7dfa      	ldrb	r2, [r7, #23]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80078ba:	7dfa      	ldrb	r2, [r7, #23]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	32ae      	adds	r2, #174	; 0xae
 80078c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	7afa      	ldrb	r2, [r7, #11]
 80078c8:	4611      	mov	r1, r2
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	4798      	blx	r3
 80078ce:	4603      	mov	r3, r0
 80078d0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80078d2:	7dbb      	ldrb	r3, [r7, #22]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80078d8:	7dbb      	ldrb	r3, [r7, #22]
 80078da:	e000      	b.n	80078de <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b084      	sub	sp, #16
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800791e:	2b00      	cmp	r3, #0
 8007920:	d014      	beq.n	800794c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00e      	beq.n	800794c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	6852      	ldr	r2, [r2, #4]
 800793a:	b2d2      	uxtb	r2, r2
 800793c:	4611      	mov	r1, r2
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	4798      	blx	r3
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d001      	beq.n	800794c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007948:	2303      	movs	r3, #3
 800794a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800794c:	2340      	movs	r3, #64	; 0x40
 800794e:	2200      	movs	r2, #0
 8007950:	2100      	movs	r1, #0
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f001 fb67 	bl	8009026 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2240      	movs	r2, #64	; 0x40
 8007964:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007968:	2340      	movs	r3, #64	; 0x40
 800796a:	2200      	movs	r2, #0
 800796c:	2180      	movs	r1, #128	; 0x80
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f001 fb59 	bl	8009026 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2240      	movs	r2, #64	; 0x40
 800797e:	621a      	str	r2, [r3, #32]

  return ret;
 8007980:	7bfb      	ldrb	r3, [r7, #15]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800798a:	b480      	push	{r7}
 800798c:	b083      	sub	sp, #12
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	460b      	mov	r3, r1
 8007994:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	78fa      	ldrb	r2, [r7, #3]
 800799a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b083      	sub	sp, #12
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079b8:	b2da      	uxtb	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2204      	movs	r2, #4
 80079c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	d106      	bne.n	80079f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b082      	sub	sp, #8
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	d110      	bne.n	8007a3c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00b      	beq.n	8007a3c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d005      	beq.n	8007a3c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a36:	69db      	ldr	r3, [r3, #28]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b082      	sub	sp, #8
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	32ae      	adds	r2, #174	; 0xae
 8007a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e01c      	b.n	8007aa2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d115      	bne.n	8007aa0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	32ae      	adds	r2, #174	; 0xae
 8007a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a82:	6a1b      	ldr	r3, [r3, #32]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00b      	beq.n	8007aa0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	32ae      	adds	r2, #174	; 0xae
 8007a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a96:	6a1b      	ldr	r3, [r3, #32]
 8007a98:	78fa      	ldrb	r2, [r7, #3]
 8007a9a:	4611      	mov	r1, r2
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b082      	sub	sp, #8
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	32ae      	adds	r2, #174	; 0xae
 8007ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e01c      	b.n	8007b06 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d115      	bne.n	8007b04 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	32ae      	adds	r2, #174	; 0xae
 8007ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00b      	beq.n	8007b04 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	32ae      	adds	r2, #174	; 0xae
 8007af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afc:	78fa      	ldrb	r2, [r7, #3]
 8007afe:	4611      	mov	r1, r2
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00e      	beq.n	8007b60 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	6852      	ldr	r2, [r2, #4]
 8007b4e:	b2d2      	uxtb	r2, r2
 8007b50:	4611      	mov	r1, r2
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	4798      	blx	r3
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b083      	sub	sp, #12
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	460b      	mov	r3, r1
 8007b74:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b76:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b90:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	370c      	adds	r7, #12
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b085      	sub	sp, #20
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	881a      	ldrh	r2, [r3, #0]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	4413      	add	r3, r2
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007bca:	68fb      	ldr	r3, [r7, #12]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	3301      	adds	r3, #1
 8007bee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007bf6:	8a3b      	ldrh	r3, [r7, #16]
 8007bf8:	021b      	lsls	r3, r3, #8
 8007bfa:	b21a      	sxth	r2, r3
 8007bfc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	b21b      	sxth	r3, r3
 8007c04:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c06:	89fb      	ldrh	r3, [r7, #14]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	371c      	adds	r7, #28
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c2a:	2b40      	cmp	r3, #64	; 0x40
 8007c2c:	d005      	beq.n	8007c3a <USBD_StdDevReq+0x26>
 8007c2e:	2b40      	cmp	r3, #64	; 0x40
 8007c30:	d857      	bhi.n	8007ce2 <USBD_StdDevReq+0xce>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00f      	beq.n	8007c56 <USBD_StdDevReq+0x42>
 8007c36:	2b20      	cmp	r3, #32
 8007c38:	d153      	bne.n	8007ce2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	32ae      	adds	r2, #174	; 0xae
 8007c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	4798      	blx	r3
 8007c50:	4603      	mov	r3, r0
 8007c52:	73fb      	strb	r3, [r7, #15]
      break;
 8007c54:	e04a      	b.n	8007cec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	785b      	ldrb	r3, [r3, #1]
 8007c5a:	2b09      	cmp	r3, #9
 8007c5c:	d83b      	bhi.n	8007cd6 <USBD_StdDevReq+0xc2>
 8007c5e:	a201      	add	r2, pc, #4	; (adr r2, 8007c64 <USBD_StdDevReq+0x50>)
 8007c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c64:	08007cb9 	.word	0x08007cb9
 8007c68:	08007ccd 	.word	0x08007ccd
 8007c6c:	08007cd7 	.word	0x08007cd7
 8007c70:	08007cc3 	.word	0x08007cc3
 8007c74:	08007cd7 	.word	0x08007cd7
 8007c78:	08007c97 	.word	0x08007c97
 8007c7c:	08007c8d 	.word	0x08007c8d
 8007c80:	08007cd7 	.word	0x08007cd7
 8007c84:	08007caf 	.word	0x08007caf
 8007c88:	08007ca1 	.word	0x08007ca1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fa3c 	bl	800810c <USBD_GetDescriptor>
          break;
 8007c94:	e024      	b.n	8007ce0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fba1 	bl	80083e0 <USBD_SetAddress>
          break;
 8007c9e:	e01f      	b.n	8007ce0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fbe0 	bl	8008468 <USBD_SetConfig>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	73fb      	strb	r3, [r7, #15]
          break;
 8007cac:	e018      	b.n	8007ce0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fc83 	bl	80085bc <USBD_GetConfig>
          break;
 8007cb6:	e013      	b.n	8007ce0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fcb4 	bl	8008628 <USBD_GetStatus>
          break;
 8007cc0:	e00e      	b.n	8007ce0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fce3 	bl	8008690 <USBD_SetFeature>
          break;
 8007cca:	e009      	b.n	8007ce0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fd07 	bl	80086e2 <USBD_ClrFeature>
          break;
 8007cd4:	e004      	b.n	8007ce0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fd5e 	bl	800879a <USBD_CtlError>
          break;
 8007cde:	bf00      	nop
      }
      break;
 8007ce0:	e004      	b.n	8007cec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fd58 	bl	800879a <USBD_CtlError>
      break;
 8007cea:	bf00      	nop
  }

  return ret;
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop

08007cf8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d0e:	2b40      	cmp	r3, #64	; 0x40
 8007d10:	d005      	beq.n	8007d1e <USBD_StdItfReq+0x26>
 8007d12:	2b40      	cmp	r3, #64	; 0x40
 8007d14:	d852      	bhi.n	8007dbc <USBD_StdItfReq+0xc4>
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <USBD_StdItfReq+0x26>
 8007d1a:	2b20      	cmp	r3, #32
 8007d1c:	d14e      	bne.n	8007dbc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	3b01      	subs	r3, #1
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d840      	bhi.n	8007dae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	889b      	ldrh	r3, [r3, #4]
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d836      	bhi.n	8007da4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	889b      	ldrh	r3, [r3, #4]
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7ff ff13 	bl	8007b6a <USBD_CoreFindIF>
 8007d44:	4603      	mov	r3, r0
 8007d46:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
 8007d4a:	2bff      	cmp	r3, #255	; 0xff
 8007d4c:	d01d      	beq.n	8007d8a <USBD_StdItfReq+0x92>
 8007d4e:	7bbb      	ldrb	r3, [r7, #14]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d11a      	bne.n	8007d8a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007d54:	7bba      	ldrb	r2, [r7, #14]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	32ae      	adds	r2, #174	; 0xae
 8007d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00f      	beq.n	8007d84 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007d64:	7bba      	ldrb	r2, [r7, #14]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d6c:	7bba      	ldrb	r2, [r7, #14]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	32ae      	adds	r2, #174	; 0xae
 8007d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	4798      	blx	r3
 8007d7e:	4603      	mov	r3, r0
 8007d80:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d82:	e004      	b.n	8007d8e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007d84:	2303      	movs	r3, #3
 8007d86:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d88:	e001      	b.n	8007d8e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	88db      	ldrh	r3, [r3, #6]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d110      	bne.n	8007db8 <USBD_StdItfReq+0xc0>
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10d      	bne.n	8007db8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fdc7 	bl	8008930 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007da2:	e009      	b.n	8007db8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fcf7 	bl	800879a <USBD_CtlError>
          break;
 8007dac:	e004      	b.n	8007db8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fcf2 	bl	800879a <USBD_CtlError>
          break;
 8007db6:	e000      	b.n	8007dba <USBD_StdItfReq+0xc2>
          break;
 8007db8:	bf00      	nop
      }
      break;
 8007dba:	e004      	b.n	8007dc6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fceb 	bl	800879a <USBD_CtlError>
      break;
 8007dc4:	bf00      	nop
  }

  return ret;
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	889b      	ldrh	r3, [r3, #4]
 8007de2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dec:	2b40      	cmp	r3, #64	; 0x40
 8007dee:	d007      	beq.n	8007e00 <USBD_StdEPReq+0x30>
 8007df0:	2b40      	cmp	r3, #64	; 0x40
 8007df2:	f200 817f 	bhi.w	80080f4 <USBD_StdEPReq+0x324>
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d02a      	beq.n	8007e50 <USBD_StdEPReq+0x80>
 8007dfa:	2b20      	cmp	r3, #32
 8007dfc:	f040 817a 	bne.w	80080f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e00:	7bbb      	ldrb	r3, [r7, #14]
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7ff febd 	bl	8007b84 <USBD_CoreFindEP>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e0e:	7b7b      	ldrb	r3, [r7, #13]
 8007e10:	2bff      	cmp	r3, #255	; 0xff
 8007e12:	f000 8174 	beq.w	80080fe <USBD_StdEPReq+0x32e>
 8007e16:	7b7b      	ldrb	r3, [r7, #13]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f040 8170 	bne.w	80080fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007e1e:	7b7a      	ldrb	r2, [r7, #13]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007e26:	7b7a      	ldrb	r2, [r7, #13]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	32ae      	adds	r2, #174	; 0xae
 8007e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f000 8163 	beq.w	80080fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007e38:	7b7a      	ldrb	r2, [r7, #13]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	32ae      	adds	r2, #174	; 0xae
 8007e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	4798      	blx	r3
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e4e:	e156      	b.n	80080fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	785b      	ldrb	r3, [r3, #1]
 8007e54:	2b03      	cmp	r3, #3
 8007e56:	d008      	beq.n	8007e6a <USBD_StdEPReq+0x9a>
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	f300 8145 	bgt.w	80080e8 <USBD_StdEPReq+0x318>
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 809b 	beq.w	8007f9a <USBD_StdEPReq+0x1ca>
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d03c      	beq.n	8007ee2 <USBD_StdEPReq+0x112>
 8007e68:	e13e      	b.n	80080e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d002      	beq.n	8007e7c <USBD_StdEPReq+0xac>
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	d016      	beq.n	8007ea8 <USBD_StdEPReq+0xd8>
 8007e7a:	e02c      	b.n	8007ed6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e7c:	7bbb      	ldrb	r3, [r7, #14]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00d      	beq.n	8007e9e <USBD_StdEPReq+0xce>
 8007e82:	7bbb      	ldrb	r3, [r7, #14]
 8007e84:	2b80      	cmp	r3, #128	; 0x80
 8007e86:	d00a      	beq.n	8007e9e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f001 f90f 	bl	80090b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e92:	2180      	movs	r1, #128	; 0x80
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 f90b 	bl	80090b0 <USBD_LL_StallEP>
 8007e9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e9c:	e020      	b.n	8007ee0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fc7a 	bl	800879a <USBD_CtlError>
              break;
 8007ea6:	e01b      	b.n	8007ee0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	885b      	ldrh	r3, [r3, #2]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10e      	bne.n	8007ece <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007eb0:	7bbb      	ldrb	r3, [r7, #14]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00b      	beq.n	8007ece <USBD_StdEPReq+0xfe>
 8007eb6:	7bbb      	ldrb	r3, [r7, #14]
 8007eb8:	2b80      	cmp	r3, #128	; 0x80
 8007eba:	d008      	beq.n	8007ece <USBD_StdEPReq+0xfe>
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	88db      	ldrh	r3, [r3, #6]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d104      	bne.n	8007ece <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ec4:	7bbb      	ldrb	r3, [r7, #14]
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f001 f8f1 	bl	80090b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fd2e 	bl	8008930 <USBD_CtlSendStatus>

              break;
 8007ed4:	e004      	b.n	8007ee0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fc5e 	bl	800879a <USBD_CtlError>
              break;
 8007ede:	bf00      	nop
          }
          break;
 8007ee0:	e107      	b.n	80080f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d002      	beq.n	8007ef4 <USBD_StdEPReq+0x124>
 8007eee:	2b03      	cmp	r3, #3
 8007ef0:	d016      	beq.n	8007f20 <USBD_StdEPReq+0x150>
 8007ef2:	e04b      	b.n	8007f8c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00d      	beq.n	8007f16 <USBD_StdEPReq+0x146>
 8007efa:	7bbb      	ldrb	r3, [r7, #14]
 8007efc:	2b80      	cmp	r3, #128	; 0x80
 8007efe:	d00a      	beq.n	8007f16 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f001 f8d3 	bl	80090b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f0a:	2180      	movs	r1, #128	; 0x80
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f001 f8cf 	bl	80090b0 <USBD_LL_StallEP>
 8007f12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f14:	e040      	b.n	8007f98 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007f16:	6839      	ldr	r1, [r7, #0]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fc3e 	bl	800879a <USBD_CtlError>
              break;
 8007f1e:	e03b      	b.n	8007f98 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	885b      	ldrh	r3, [r3, #2]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d136      	bne.n	8007f96 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f28:	7bbb      	ldrb	r3, [r7, #14]
 8007f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d004      	beq.n	8007f3c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f32:	7bbb      	ldrb	r3, [r7, #14]
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f001 f8d9 	bl	80090ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fcf7 	bl	8008930 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7ff fe1c 	bl	8007b84 <USBD_CoreFindEP>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f50:	7b7b      	ldrb	r3, [r7, #13]
 8007f52:	2bff      	cmp	r3, #255	; 0xff
 8007f54:	d01f      	beq.n	8007f96 <USBD_StdEPReq+0x1c6>
 8007f56:	7b7b      	ldrb	r3, [r7, #13]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d11c      	bne.n	8007f96 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007f5c:	7b7a      	ldrb	r2, [r7, #13]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007f64:	7b7a      	ldrb	r2, [r7, #13]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	32ae      	adds	r2, #174	; 0xae
 8007f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d010      	beq.n	8007f96 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f74:	7b7a      	ldrb	r2, [r7, #13]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	32ae      	adds	r2, #174	; 0xae
 8007f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	4798      	blx	r3
 8007f86:	4603      	mov	r3, r0
 8007f88:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007f8a:	e004      	b.n	8007f96 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fc03 	bl	800879a <USBD_CtlError>
              break;
 8007f94:	e000      	b.n	8007f98 <USBD_StdEPReq+0x1c8>
              break;
 8007f96:	bf00      	nop
          }
          break;
 8007f98:	e0ab      	b.n	80080f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d002      	beq.n	8007fac <USBD_StdEPReq+0x1dc>
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d032      	beq.n	8008010 <USBD_StdEPReq+0x240>
 8007faa:	e097      	b.n	80080dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fac:	7bbb      	ldrb	r3, [r7, #14]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d007      	beq.n	8007fc2 <USBD_StdEPReq+0x1f2>
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
 8007fb4:	2b80      	cmp	r3, #128	; 0x80
 8007fb6:	d004      	beq.n	8007fc2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fbed 	bl	800879a <USBD_CtlError>
                break;
 8007fc0:	e091      	b.n	80080e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	da0b      	bge.n	8007fe2 <USBD_StdEPReq+0x212>
 8007fca:	7bbb      	ldrb	r3, [r7, #14]
 8007fcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	3310      	adds	r3, #16
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	4413      	add	r3, r2
 8007fde:	3304      	adds	r3, #4
 8007fe0:	e00b      	b.n	8007ffa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fe2:	7bbb      	ldrb	r3, [r7, #14]
 8007fe4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fe8:	4613      	mov	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	3304      	adds	r3, #4
 8007ffa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2200      	movs	r2, #0
 8008000:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	2202      	movs	r2, #2
 8008006:	4619      	mov	r1, r3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fc37 	bl	800887c <USBD_CtlSendData>
              break;
 800800e:	e06a      	b.n	80080e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008014:	2b00      	cmp	r3, #0
 8008016:	da11      	bge.n	800803c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008018:	7bbb      	ldrb	r3, [r7, #14]
 800801a:	f003 020f 	and.w	r2, r3, #15
 800801e:	6879      	ldr	r1, [r7, #4]
 8008020:	4613      	mov	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4413      	add	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	440b      	add	r3, r1
 800802a:	3324      	adds	r3, #36	; 0x24
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d117      	bne.n	8008062 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fbb0 	bl	800879a <USBD_CtlError>
                  break;
 800803a:	e054      	b.n	80080e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	f003 020f 	and.w	r2, r3, #15
 8008042:	6879      	ldr	r1, [r7, #4]
 8008044:	4613      	mov	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	440b      	add	r3, r1
 800804e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d104      	bne.n	8008062 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fb9d 	bl	800879a <USBD_CtlError>
                  break;
 8008060:	e041      	b.n	80080e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008062:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008066:	2b00      	cmp	r3, #0
 8008068:	da0b      	bge.n	8008082 <USBD_StdEPReq+0x2b2>
 800806a:	7bbb      	ldrb	r3, [r7, #14]
 800806c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008070:	4613      	mov	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	3310      	adds	r3, #16
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	4413      	add	r3, r2
 800807e:	3304      	adds	r3, #4
 8008080:	e00b      	b.n	800809a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008082:	7bbb      	ldrb	r3, [r7, #14]
 8008084:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008088:	4613      	mov	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4413      	add	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	4413      	add	r3, r2
 8008098:	3304      	adds	r3, #4
 800809a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800809c:	7bbb      	ldrb	r3, [r7, #14]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d002      	beq.n	80080a8 <USBD_StdEPReq+0x2d8>
 80080a2:	7bbb      	ldrb	r3, [r7, #14]
 80080a4:	2b80      	cmp	r3, #128	; 0x80
 80080a6:	d103      	bne.n	80080b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2200      	movs	r2, #0
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	e00e      	b.n	80080ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f001 f839 	bl	800912c <USBD_LL_IsStallEP>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d003      	beq.n	80080c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2201      	movs	r2, #1
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	e002      	b.n	80080ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2200      	movs	r2, #0
 80080cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	2202      	movs	r2, #2
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fbd1 	bl	800887c <USBD_CtlSendData>
              break;
 80080da:	e004      	b.n	80080e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80080dc:	6839      	ldr	r1, [r7, #0]
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fb5b 	bl	800879a <USBD_CtlError>
              break;
 80080e4:	bf00      	nop
          }
          break;
 80080e6:	e004      	b.n	80080f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fb55 	bl	800879a <USBD_CtlError>
          break;
 80080f0:	bf00      	nop
      }
      break;
 80080f2:	e005      	b.n	8008100 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fb4f 	bl	800879a <USBD_CtlError>
      break;
 80080fc:	e000      	b.n	8008100 <USBD_StdEPReq+0x330>
      break;
 80080fe:	bf00      	nop
  }

  return ret;
 8008100:	7bfb      	ldrb	r3, [r7, #15]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
	...

0800810c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800811a:	2300      	movs	r3, #0
 800811c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800811e:	2300      	movs	r3, #0
 8008120:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	885b      	ldrh	r3, [r3, #2]
 8008126:	0a1b      	lsrs	r3, r3, #8
 8008128:	b29b      	uxth	r3, r3
 800812a:	3b01      	subs	r3, #1
 800812c:	2b06      	cmp	r3, #6
 800812e:	f200 8128 	bhi.w	8008382 <USBD_GetDescriptor+0x276>
 8008132:	a201      	add	r2, pc, #4	; (adr r2, 8008138 <USBD_GetDescriptor+0x2c>)
 8008134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008138:	08008155 	.word	0x08008155
 800813c:	0800816d 	.word	0x0800816d
 8008140:	080081ad 	.word	0x080081ad
 8008144:	08008383 	.word	0x08008383
 8008148:	08008383 	.word	0x08008383
 800814c:	08008323 	.word	0x08008323
 8008150:	0800834f 	.word	0x0800834f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	7c12      	ldrb	r2, [r2, #16]
 8008160:	f107 0108 	add.w	r1, r7, #8
 8008164:	4610      	mov	r0, r2
 8008166:	4798      	blx	r3
 8008168:	60f8      	str	r0, [r7, #12]
      break;
 800816a:	e112      	b.n	8008392 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	7c1b      	ldrb	r3, [r3, #16]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10d      	bne.n	8008190 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800817a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817c:	f107 0208 	add.w	r2, r7, #8
 8008180:	4610      	mov	r0, r2
 8008182:	4798      	blx	r3
 8008184:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3301      	adds	r3, #1
 800818a:	2202      	movs	r2, #2
 800818c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800818e:	e100      	b.n	8008392 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008198:	f107 0208 	add.w	r2, r7, #8
 800819c:	4610      	mov	r0, r2
 800819e:	4798      	blx	r3
 80081a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	3301      	adds	r3, #1
 80081a6:	2202      	movs	r2, #2
 80081a8:	701a      	strb	r2, [r3, #0]
      break;
 80081aa:	e0f2      	b.n	8008392 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	885b      	ldrh	r3, [r3, #2]
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b05      	cmp	r3, #5
 80081b4:	f200 80ac 	bhi.w	8008310 <USBD_GetDescriptor+0x204>
 80081b8:	a201      	add	r2, pc, #4	; (adr r2, 80081c0 <USBD_GetDescriptor+0xb4>)
 80081ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081be:	bf00      	nop
 80081c0:	080081d9 	.word	0x080081d9
 80081c4:	0800820d 	.word	0x0800820d
 80081c8:	08008241 	.word	0x08008241
 80081cc:	08008275 	.word	0x08008275
 80081d0:	080082a9 	.word	0x080082a9
 80081d4:	080082dd 	.word	0x080082dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00b      	beq.n	80081fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	7c12      	ldrb	r2, [r2, #16]
 80081f0:	f107 0108 	add.w	r1, r7, #8
 80081f4:	4610      	mov	r0, r2
 80081f6:	4798      	blx	r3
 80081f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081fa:	e091      	b.n	8008320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 facb 	bl	800879a <USBD_CtlError>
            err++;
 8008204:	7afb      	ldrb	r3, [r7, #11]
 8008206:	3301      	adds	r3, #1
 8008208:	72fb      	strb	r3, [r7, #11]
          break;
 800820a:	e089      	b.n	8008320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00b      	beq.n	8008230 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	7c12      	ldrb	r2, [r2, #16]
 8008224:	f107 0108 	add.w	r1, r7, #8
 8008228:	4610      	mov	r0, r2
 800822a:	4798      	blx	r3
 800822c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800822e:	e077      	b.n	8008320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fab1 	bl	800879a <USBD_CtlError>
            err++;
 8008238:	7afb      	ldrb	r3, [r7, #11]
 800823a:	3301      	adds	r3, #1
 800823c:	72fb      	strb	r3, [r7, #11]
          break;
 800823e:	e06f      	b.n	8008320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00b      	beq.n	8008264 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	7c12      	ldrb	r2, [r2, #16]
 8008258:	f107 0108 	add.w	r1, r7, #8
 800825c:	4610      	mov	r0, r2
 800825e:	4798      	blx	r3
 8008260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008262:	e05d      	b.n	8008320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fa97 	bl	800879a <USBD_CtlError>
            err++;
 800826c:	7afb      	ldrb	r3, [r7, #11]
 800826e:	3301      	adds	r3, #1
 8008270:	72fb      	strb	r3, [r7, #11]
          break;
 8008272:	e055      	b.n	8008320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00b      	beq.n	8008298 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	7c12      	ldrb	r2, [r2, #16]
 800828c:	f107 0108 	add.w	r1, r7, #8
 8008290:	4610      	mov	r0, r2
 8008292:	4798      	blx	r3
 8008294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008296:	e043      	b.n	8008320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fa7d 	bl	800879a <USBD_CtlError>
            err++;
 80082a0:	7afb      	ldrb	r3, [r7, #11]
 80082a2:	3301      	adds	r3, #1
 80082a4:	72fb      	strb	r3, [r7, #11]
          break;
 80082a6:	e03b      	b.n	8008320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00b      	beq.n	80082cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ba:	695b      	ldr	r3, [r3, #20]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	7c12      	ldrb	r2, [r2, #16]
 80082c0:	f107 0108 	add.w	r1, r7, #8
 80082c4:	4610      	mov	r0, r2
 80082c6:	4798      	blx	r3
 80082c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ca:	e029      	b.n	8008320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fa63 	bl	800879a <USBD_CtlError>
            err++;
 80082d4:	7afb      	ldrb	r3, [r7, #11]
 80082d6:	3301      	adds	r3, #1
 80082d8:	72fb      	strb	r3, [r7, #11]
          break;
 80082da:	e021      	b.n	8008320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00b      	beq.n	8008300 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	7c12      	ldrb	r2, [r2, #16]
 80082f4:	f107 0108 	add.w	r1, r7, #8
 80082f8:	4610      	mov	r0, r2
 80082fa:	4798      	blx	r3
 80082fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082fe:	e00f      	b.n	8008320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fa49 	bl	800879a <USBD_CtlError>
            err++;
 8008308:	7afb      	ldrb	r3, [r7, #11]
 800830a:	3301      	adds	r3, #1
 800830c:	72fb      	strb	r3, [r7, #11]
          break;
 800830e:	e007      	b.n	8008320 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008310:	6839      	ldr	r1, [r7, #0]
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fa41 	bl	800879a <USBD_CtlError>
          err++;
 8008318:	7afb      	ldrb	r3, [r7, #11]
 800831a:	3301      	adds	r3, #1
 800831c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800831e:	bf00      	nop
      }
      break;
 8008320:	e037      	b.n	8008392 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	7c1b      	ldrb	r3, [r3, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d109      	bne.n	800833e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008332:	f107 0208 	add.w	r2, r7, #8
 8008336:	4610      	mov	r0, r2
 8008338:	4798      	blx	r3
 800833a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800833c:	e029      	b.n	8008392 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fa2a 	bl	800879a <USBD_CtlError>
        err++;
 8008346:	7afb      	ldrb	r3, [r7, #11]
 8008348:	3301      	adds	r3, #1
 800834a:	72fb      	strb	r3, [r7, #11]
      break;
 800834c:	e021      	b.n	8008392 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	7c1b      	ldrb	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10d      	bne.n	8008372 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800835c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835e:	f107 0208 	add.w	r2, r7, #8
 8008362:	4610      	mov	r0, r2
 8008364:	4798      	blx	r3
 8008366:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	3301      	adds	r3, #1
 800836c:	2207      	movs	r2, #7
 800836e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008370:	e00f      	b.n	8008392 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fa10 	bl	800879a <USBD_CtlError>
        err++;
 800837a:	7afb      	ldrb	r3, [r7, #11]
 800837c:	3301      	adds	r3, #1
 800837e:	72fb      	strb	r3, [r7, #11]
      break;
 8008380:	e007      	b.n	8008392 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fa08 	bl	800879a <USBD_CtlError>
      err++;
 800838a:	7afb      	ldrb	r3, [r7, #11]
 800838c:	3301      	adds	r3, #1
 800838e:	72fb      	strb	r3, [r7, #11]
      break;
 8008390:	bf00      	nop
  }

  if (err != 0U)
 8008392:	7afb      	ldrb	r3, [r7, #11]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d11e      	bne.n	80083d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	88db      	ldrh	r3, [r3, #6]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d016      	beq.n	80083ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80083a0:	893b      	ldrh	r3, [r7, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00e      	beq.n	80083c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	88da      	ldrh	r2, [r3, #6]
 80083aa:	893b      	ldrh	r3, [r7, #8]
 80083ac:	4293      	cmp	r3, r2
 80083ae:	bf28      	it	cs
 80083b0:	4613      	movcs	r3, r2
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80083b6:	893b      	ldrh	r3, [r7, #8]
 80083b8:	461a      	mov	r2, r3
 80083ba:	68f9      	ldr	r1, [r7, #12]
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 fa5d 	bl	800887c <USBD_CtlSendData>
 80083c2:	e009      	b.n	80083d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f9e7 	bl	800879a <USBD_CtlError>
 80083cc:	e004      	b.n	80083d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 faae 	bl	8008930 <USBD_CtlSendStatus>
 80083d4:	e000      	b.n	80083d8 <USBD_GetDescriptor+0x2cc>
    return;
 80083d6:	bf00      	nop
  }
}
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop

080083e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	889b      	ldrh	r3, [r3, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d131      	bne.n	8008456 <USBD_SetAddress+0x76>
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	88db      	ldrh	r3, [r3, #6]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d12d      	bne.n	8008456 <USBD_SetAddress+0x76>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	885b      	ldrh	r3, [r3, #2]
 80083fe:	2b7f      	cmp	r3, #127	; 0x7f
 8008400:	d829      	bhi.n	8008456 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	885b      	ldrh	r3, [r3, #2]
 8008406:	b2db      	uxtb	r3, r3
 8008408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800840c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b03      	cmp	r3, #3
 8008418:	d104      	bne.n	8008424 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f9bc 	bl	800879a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008422:	e01d      	b.n	8008460 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	7bfa      	ldrb	r2, [r7, #15]
 8008428:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800842c:	7bfb      	ldrb	r3, [r7, #15]
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fea7 	bl	8009184 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fa7a 	bl	8008930 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800843c:	7bfb      	ldrb	r3, [r7, #15]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d004      	beq.n	800844c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2202      	movs	r2, #2
 8008446:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800844a:	e009      	b.n	8008460 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008454:	e004      	b.n	8008460 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f99e 	bl	800879a <USBD_CtlError>
  }
}
 800845e:	bf00      	nop
 8008460:	bf00      	nop
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	885b      	ldrh	r3, [r3, #2]
 800847a:	b2da      	uxtb	r2, r3
 800847c:	4b4e      	ldr	r3, [pc, #312]	; (80085b8 <USBD_SetConfig+0x150>)
 800847e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008480:	4b4d      	ldr	r3, [pc, #308]	; (80085b8 <USBD_SetConfig+0x150>)
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d905      	bls.n	8008494 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 f985 	bl	800879a <USBD_CtlError>
    return USBD_FAIL;
 8008490:	2303      	movs	r3, #3
 8008492:	e08c      	b.n	80085ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2b02      	cmp	r3, #2
 800849e:	d002      	beq.n	80084a6 <USBD_SetConfig+0x3e>
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d029      	beq.n	80084f8 <USBD_SetConfig+0x90>
 80084a4:	e075      	b.n	8008592 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80084a6:	4b44      	ldr	r3, [pc, #272]	; (80085b8 <USBD_SetConfig+0x150>)
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d020      	beq.n	80084f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80084ae:	4b42      	ldr	r3, [pc, #264]	; (80085b8 <USBD_SetConfig+0x150>)
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084b8:	4b3f      	ldr	r3, [pc, #252]	; (80085b8 <USBD_SetConfig+0x150>)
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7ff f821 	bl	8007506 <USBD_SetClassConfig>
 80084c4:	4603      	mov	r3, r0
 80084c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d008      	beq.n	80084e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f962 	bl	800879a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2202      	movs	r2, #2
 80084da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80084de:	e065      	b.n	80085ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fa25 	bl	8008930 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2203      	movs	r2, #3
 80084ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80084ee:	e05d      	b.n	80085ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fa1d 	bl	8008930 <USBD_CtlSendStatus>
      break;
 80084f6:	e059      	b.n	80085ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80084f8:	4b2f      	ldr	r3, [pc, #188]	; (80085b8 <USBD_SetConfig+0x150>)
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d112      	bne.n	8008526 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2202      	movs	r2, #2
 8008504:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008508:	4b2b      	ldr	r3, [pc, #172]	; (80085b8 <USBD_SetConfig+0x150>)
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	461a      	mov	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008512:	4b29      	ldr	r3, [pc, #164]	; (80085b8 <USBD_SetConfig+0x150>)
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f7ff f810 	bl	800753e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fa06 	bl	8008930 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008524:	e042      	b.n	80085ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008526:	4b24      	ldr	r3, [pc, #144]	; (80085b8 <USBD_SetConfig+0x150>)
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	429a      	cmp	r2, r3
 8008532:	d02a      	beq.n	800858a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	b2db      	uxtb	r3, r3
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7fe fffe 	bl	800753e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008542:	4b1d      	ldr	r3, [pc, #116]	; (80085b8 <USBD_SetConfig+0x150>)
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	461a      	mov	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800854c:	4b1a      	ldr	r3, [pc, #104]	; (80085b8 <USBD_SetConfig+0x150>)
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7fe ffd7 	bl	8007506 <USBD_SetClassConfig>
 8008558:	4603      	mov	r3, r0
 800855a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00f      	beq.n	8008582 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f918 	bl	800879a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	b2db      	uxtb	r3, r3
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f7fe ffe3 	bl	800753e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2202      	movs	r2, #2
 800857c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008580:	e014      	b.n	80085ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f9d4 	bl	8008930 <USBD_CtlSendStatus>
      break;
 8008588:	e010      	b.n	80085ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f9d0 	bl	8008930 <USBD_CtlSendStatus>
      break;
 8008590:	e00c      	b.n	80085ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f900 	bl	800879a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800859a:	4b07      	ldr	r3, [pc, #28]	; (80085b8 <USBD_SetConfig+0x150>)
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f7fe ffcc 	bl	800753e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80085a6:	2303      	movs	r3, #3
 80085a8:	73fb      	strb	r3, [r7, #15]
      break;
 80085aa:	bf00      	nop
  }

  return ret;
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	20000294 	.word	0x20000294

080085bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	88db      	ldrh	r3, [r3, #6]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d004      	beq.n	80085d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f8e2 	bl	800879a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80085d6:	e023      	b.n	8008620 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	dc02      	bgt.n	80085ea <USBD_GetConfig+0x2e>
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	dc03      	bgt.n	80085f0 <USBD_GetConfig+0x34>
 80085e8:	e015      	b.n	8008616 <USBD_GetConfig+0x5a>
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	d00b      	beq.n	8008606 <USBD_GetConfig+0x4a>
 80085ee:	e012      	b.n	8008616 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	3308      	adds	r3, #8
 80085fa:	2201      	movs	r2, #1
 80085fc:	4619      	mov	r1, r3
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f93c 	bl	800887c <USBD_CtlSendData>
        break;
 8008604:	e00c      	b.n	8008620 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	3304      	adds	r3, #4
 800860a:	2201      	movs	r2, #1
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f934 	bl	800887c <USBD_CtlSendData>
        break;
 8008614:	e004      	b.n	8008620 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f8be 	bl	800879a <USBD_CtlError>
        break;
 800861e:	bf00      	nop
}
 8008620:	bf00      	nop
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008638:	b2db      	uxtb	r3, r3
 800863a:	3b01      	subs	r3, #1
 800863c:	2b02      	cmp	r3, #2
 800863e:	d81e      	bhi.n	800867e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	88db      	ldrh	r3, [r3, #6]
 8008644:	2b02      	cmp	r3, #2
 8008646:	d004      	beq.n	8008652 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 f8a5 	bl	800879a <USBD_CtlError>
        break;
 8008650:	e01a      	b.n	8008688 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800865e:	2b00      	cmp	r3, #0
 8008660:	d005      	beq.n	800866e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	f043 0202 	orr.w	r2, r3, #2
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	330c      	adds	r3, #12
 8008672:	2202      	movs	r2, #2
 8008674:	4619      	mov	r1, r3
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f900 	bl	800887c <USBD_CtlSendData>
      break;
 800867c:	e004      	b.n	8008688 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f88a 	bl	800879a <USBD_CtlError>
      break;
 8008686:	bf00      	nop
  }
}
 8008688:	bf00      	nop
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	885b      	ldrh	r3, [r3, #2]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d107      	bne.n	80086b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f940 	bl	8008930 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80086b0:	e013      	b.n	80086da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	885b      	ldrh	r3, [r3, #2]
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d10b      	bne.n	80086d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	889b      	ldrh	r3, [r3, #4]
 80086be:	0a1b      	lsrs	r3, r3, #8
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	b2da      	uxtb	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f930 	bl	8008930 <USBD_CtlSendStatus>
}
 80086d0:	e003      	b.n	80086da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80086d2:	6839      	ldr	r1, [r7, #0]
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f860 	bl	800879a <USBD_CtlError>
}
 80086da:	bf00      	nop
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b082      	sub	sp, #8
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	3b01      	subs	r3, #1
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d80b      	bhi.n	8008712 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	885b      	ldrh	r3, [r3, #2]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d10c      	bne.n	800871c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f910 	bl	8008930 <USBD_CtlSendStatus>
      }
      break;
 8008710:	e004      	b.n	800871c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f840 	bl	800879a <USBD_CtlError>
      break;
 800871a:	e000      	b.n	800871e <USBD_ClrFeature+0x3c>
      break;
 800871c:	bf00      	nop
  }
}
 800871e:	bf00      	nop
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b084      	sub	sp, #16
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	781a      	ldrb	r2, [r3, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	3301      	adds	r3, #1
 8008740:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	781a      	ldrb	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	3301      	adds	r3, #1
 800874e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f7ff fa41 	bl	8007bd8 <SWAPBYTE>
 8008756:	4603      	mov	r3, r0
 8008758:	461a      	mov	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	3301      	adds	r3, #1
 8008762:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	3301      	adds	r3, #1
 8008768:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f7ff fa34 	bl	8007bd8 <SWAPBYTE>
 8008770:	4603      	mov	r3, r0
 8008772:	461a      	mov	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3301      	adds	r3, #1
 800877c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	3301      	adds	r3, #1
 8008782:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f7ff fa27 	bl	8007bd8 <SWAPBYTE>
 800878a:	4603      	mov	r3, r0
 800878c:	461a      	mov	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	80da      	strh	r2, [r3, #6]
}
 8008792:	bf00      	nop
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80087a4:	2180      	movs	r1, #128	; 0x80
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fc82 	bl	80090b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80087ac:	2100      	movs	r1, #0
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fc7e 	bl	80090b0 <USBD_LL_StallEP>
}
 80087b4:	bf00      	nop
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d036      	beq.n	8008840 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80087d6:	6938      	ldr	r0, [r7, #16]
 80087d8:	f000 f836 	bl	8008848 <USBD_GetLen>
 80087dc:	4603      	mov	r3, r0
 80087de:	3301      	adds	r3, #1
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	005b      	lsls	r3, r3, #1
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80087ea:	7dfb      	ldrb	r3, [r7, #23]
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	4413      	add	r3, r2
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	7812      	ldrb	r2, [r2, #0]
 80087f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
 80087f8:	3301      	adds	r3, #1
 80087fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80087fc:	7dfb      	ldrb	r3, [r7, #23]
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	4413      	add	r3, r2
 8008802:	2203      	movs	r2, #3
 8008804:	701a      	strb	r2, [r3, #0]
  idx++;
 8008806:	7dfb      	ldrb	r3, [r7, #23]
 8008808:	3301      	adds	r3, #1
 800880a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800880c:	e013      	b.n	8008836 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800880e:	7dfb      	ldrb	r3, [r7, #23]
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	4413      	add	r3, r2
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	7812      	ldrb	r2, [r2, #0]
 8008818:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	3301      	adds	r3, #1
 800881e:	613b      	str	r3, [r7, #16]
    idx++;
 8008820:	7dfb      	ldrb	r3, [r7, #23]
 8008822:	3301      	adds	r3, #1
 8008824:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008826:	7dfb      	ldrb	r3, [r7, #23]
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	4413      	add	r3, r2
 800882c:	2200      	movs	r2, #0
 800882e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008830:	7dfb      	ldrb	r3, [r7, #23]
 8008832:	3301      	adds	r3, #1
 8008834:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1e7      	bne.n	800880e <USBD_GetString+0x52>
 800883e:	e000      	b.n	8008842 <USBD_GetString+0x86>
    return;
 8008840:	bf00      	nop
  }
}
 8008842:	3718      	adds	r7, #24
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008858:	e005      	b.n	8008866 <USBD_GetLen+0x1e>
  {
    len++;
 800885a:	7bfb      	ldrb	r3, [r7, #15]
 800885c:	3301      	adds	r3, #1
 800885e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	3301      	adds	r3, #1
 8008864:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1f5      	bne.n	800885a <USBD_GetLen+0x12>
  }

  return len;
 800886e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3714      	adds	r7, #20
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2202      	movs	r2, #2
 800888c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	2100      	movs	r1, #0
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f000 fc8d 	bl	80091c2 <USBD_LL_Transmit>

  return USBD_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b084      	sub	sp, #16
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	60f8      	str	r0, [r7, #12]
 80088ba:	60b9      	str	r1, [r7, #8]
 80088bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	2100      	movs	r1, #0
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f000 fc7c 	bl	80091c2 <USBD_LL_Transmit>

  return USBD_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2203      	movs	r2, #3
 80088e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	2100      	movs	r1, #0
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f000 fc80 	bl	8009204 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b084      	sub	sp, #16
 8008912:	af00      	add	r7, sp, #0
 8008914:	60f8      	str	r0, [r7, #12]
 8008916:	60b9      	str	r1, [r7, #8]
 8008918:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	2100      	movs	r1, #0
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f000 fc6f 	bl	8009204 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2204      	movs	r2, #4
 800893c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008940:	2300      	movs	r3, #0
 8008942:	2200      	movs	r2, #0
 8008944:	2100      	movs	r1, #0
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fc3b 	bl	80091c2 <USBD_LL_Transmit>

  return USBD_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b082      	sub	sp, #8
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2205      	movs	r2, #5
 8008962:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008966:	2300      	movs	r3, #0
 8008968:	2200      	movs	r2, #0
 800896a:	2100      	movs	r1, #0
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 fc49 	bl	8009204 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008980:	2200      	movs	r2, #0
 8008982:	4912      	ldr	r1, [pc, #72]	; (80089cc <MX_USB_DEVICE_Init+0x50>)
 8008984:	4812      	ldr	r0, [pc, #72]	; (80089d0 <MX_USB_DEVICE_Init+0x54>)
 8008986:	f7fe fd41 	bl	800740c <USBD_Init>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008990:	f7f8 f8f2 	bl	8000b78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 8008994:	490f      	ldr	r1, [pc, #60]	; (80089d4 <MX_USB_DEVICE_Init+0x58>)
 8008996:	480e      	ldr	r0, [pc, #56]	; (80089d0 <MX_USB_DEVICE_Init+0x54>)
 8008998:	f7fe fd68 	bl	800746c <USBD_RegisterClass>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80089a2:	f7f8 f8e9 	bl	8000b78 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 80089a6:	490c      	ldr	r1, [pc, #48]	; (80089d8 <MX_USB_DEVICE_Init+0x5c>)
 80089a8:	4809      	ldr	r0, [pc, #36]	; (80089d0 <MX_USB_DEVICE_Init+0x54>)
 80089aa:	f7fe fce1 	bl	8007370 <USBD_AUDIO_RegisterInterface>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80089b4:	f7f8 f8e0 	bl	8000b78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80089b8:	4805      	ldr	r0, [pc, #20]	; (80089d0 <MX_USB_DEVICE_Init+0x54>)
 80089ba:	f7fe fd8d 	bl	80074d8 <USBD_Start>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80089c4:	f7f8 f8d8 	bl	8000b78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80089c8:	bf00      	nop
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	200000e0 	.word	0x200000e0
 80089d0:	20000298 	.word	0x20000298
 80089d4:	20000010 	.word	0x20000010
 80089d8:	200000c4 	.word	0x200000c4

080089dc <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 80089e8:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b083      	sub	sp, #12
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 80089fe:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	4613      	mov	r3, r2
 8008a18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 8008a1a:	79fb      	ldrb	r3, [r7, #7]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d001      	beq.n	8008a24 <AUDIO_AudioCmd_FS+0x18>
 8008a20:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 8008a22:	e000      	b.n	8008a26 <AUDIO_AudioCmd_FS+0x1a>
    break;
 8008a24:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8008a26:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3714      	adds	r7, #20
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 8008a3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	4603      	mov	r3, r0
 8008a54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 8008a56:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8008a72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 8008a80:	b480      	push	{r7}
 8008a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8008a84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	4603      	mov	r3, r0
 8008a98:	6039      	str	r1, [r7, #0]
 8008a9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	2212      	movs	r2, #18
 8008aa0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008aa2:	4b03      	ldr	r3, [pc, #12]	; (8008ab0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr
 8008ab0:	200000fc 	.word	0x200000fc

08008ab4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	6039      	str	r1, [r7, #0]
 8008abe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	2204      	movs	r2, #4
 8008ac4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ac6:	4b03      	ldr	r3, [pc, #12]	; (8008ad4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	20000110 	.word	0x20000110

08008ad8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	4603      	mov	r3, r0
 8008ae0:	6039      	str	r1, [r7, #0]
 8008ae2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ae4:	79fb      	ldrb	r3, [r7, #7]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d105      	bne.n	8008af6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	4907      	ldr	r1, [pc, #28]	; (8008b0c <USBD_FS_ProductStrDescriptor+0x34>)
 8008aee:	4808      	ldr	r0, [pc, #32]	; (8008b10 <USBD_FS_ProductStrDescriptor+0x38>)
 8008af0:	f7ff fe64 	bl	80087bc <USBD_GetString>
 8008af4:	e004      	b.n	8008b00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	4904      	ldr	r1, [pc, #16]	; (8008b0c <USBD_FS_ProductStrDescriptor+0x34>)
 8008afa:	4805      	ldr	r0, [pc, #20]	; (8008b10 <USBD_FS_ProductStrDescriptor+0x38>)
 8008afc:	f7ff fe5e 	bl	80087bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b00:	4b02      	ldr	r3, [pc, #8]	; (8008b0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	20000574 	.word	0x20000574
 8008b10:	08009364 	.word	0x08009364

08008b14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	6039      	str	r1, [r7, #0]
 8008b1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b20:	683a      	ldr	r2, [r7, #0]
 8008b22:	4904      	ldr	r1, [pc, #16]	; (8008b34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b24:	4804      	ldr	r0, [pc, #16]	; (8008b38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b26:	f7ff fe49 	bl	80087bc <USBD_GetString>
  return USBD_StrDesc;
 8008b2a:	4b02      	ldr	r3, [pc, #8]	; (8008b34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	20000574 	.word	0x20000574
 8008b38:	08009378 	.word	0x08009378

08008b3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	4603      	mov	r3, r0
 8008b44:	6039      	str	r1, [r7, #0]
 8008b46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	221a      	movs	r2, #26
 8008b4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b4e:	f000 f843 	bl	8008bd8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b52:	4b02      	ldr	r3, [pc, #8]	; (8008b5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	20000114 	.word	0x20000114

08008b60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	4603      	mov	r3, r0
 8008b68:	6039      	str	r1, [r7, #0]
 8008b6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b6c:	79fb      	ldrb	r3, [r7, #7]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d105      	bne.n	8008b7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	4907      	ldr	r1, [pc, #28]	; (8008b94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b76:	4808      	ldr	r0, [pc, #32]	; (8008b98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b78:	f7ff fe20 	bl	80087bc <USBD_GetString>
 8008b7c:	e004      	b.n	8008b88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	4904      	ldr	r1, [pc, #16]	; (8008b94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b82:	4805      	ldr	r0, [pc, #20]	; (8008b98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b84:	f7ff fe1a 	bl	80087bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b88:	4b02      	ldr	r3, [pc, #8]	; (8008b94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	20000574 	.word	0x20000574
 8008b98:	0800938c 	.word	0x0800938c

08008b9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	6039      	str	r1, [r7, #0]
 8008ba6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ba8:	79fb      	ldrb	r3, [r7, #7]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d105      	bne.n	8008bba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	4907      	ldr	r1, [pc, #28]	; (8008bd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bb2:	4808      	ldr	r0, [pc, #32]	; (8008bd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bb4:	f7ff fe02 	bl	80087bc <USBD_GetString>
 8008bb8:	e004      	b.n	8008bc4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	4904      	ldr	r1, [pc, #16]	; (8008bd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bbe:	4805      	ldr	r0, [pc, #20]	; (8008bd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bc0:	f7ff fdfc 	bl	80087bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bc4:	4b02      	ldr	r3, [pc, #8]	; (8008bd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	20000574 	.word	0x20000574
 8008bd4:	0800939c 	.word	0x0800939c

08008bd8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008bde:	4b0f      	ldr	r3, [pc, #60]	; (8008c1c <Get_SerialNum+0x44>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008be4:	4b0e      	ldr	r3, [pc, #56]	; (8008c20 <Get_SerialNum+0x48>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008bea:	4b0e      	ldr	r3, [pc, #56]	; (8008c24 <Get_SerialNum+0x4c>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d009      	beq.n	8008c12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008bfe:	2208      	movs	r2, #8
 8008c00:	4909      	ldr	r1, [pc, #36]	; (8008c28 <Get_SerialNum+0x50>)
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 f814 	bl	8008c30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c08:	2204      	movs	r2, #4
 8008c0a:	4908      	ldr	r1, [pc, #32]	; (8008c2c <Get_SerialNum+0x54>)
 8008c0c:	68b8      	ldr	r0, [r7, #8]
 8008c0e:	f000 f80f 	bl	8008c30 <IntToUnicode>
  }
}
 8008c12:	bf00      	nop
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	1fff7a10 	.word	0x1fff7a10
 8008c20:	1fff7a14 	.word	0x1fff7a14
 8008c24:	1fff7a18 	.word	0x1fff7a18
 8008c28:	20000116 	.word	0x20000116
 8008c2c:	20000126 	.word	0x20000126

08008c30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b087      	sub	sp, #28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c42:	2300      	movs	r3, #0
 8008c44:	75fb      	strb	r3, [r7, #23]
 8008c46:	e027      	b.n	8008c98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	0f1b      	lsrs	r3, r3, #28
 8008c4c:	2b09      	cmp	r3, #9
 8008c4e:	d80b      	bhi.n	8008c68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	0f1b      	lsrs	r3, r3, #28
 8008c54:	b2da      	uxtb	r2, r3
 8008c56:	7dfb      	ldrb	r3, [r7, #23]
 8008c58:	005b      	lsls	r3, r3, #1
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	440b      	add	r3, r1
 8008c60:	3230      	adds	r2, #48	; 0x30
 8008c62:	b2d2      	uxtb	r2, r2
 8008c64:	701a      	strb	r2, [r3, #0]
 8008c66:	e00a      	b.n	8008c7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	0f1b      	lsrs	r3, r3, #28
 8008c6c:	b2da      	uxtb	r2, r3
 8008c6e:	7dfb      	ldrb	r3, [r7, #23]
 8008c70:	005b      	lsls	r3, r3, #1
 8008c72:	4619      	mov	r1, r3
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	440b      	add	r3, r1
 8008c78:	3237      	adds	r2, #55	; 0x37
 8008c7a:	b2d2      	uxtb	r2, r2
 8008c7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	011b      	lsls	r3, r3, #4
 8008c82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
 8008c86:	005b      	lsls	r3, r3, #1
 8008c88:	3301      	adds	r3, #1
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	2200      	movs	r2, #0
 8008c90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c92:	7dfb      	ldrb	r3, [r7, #23]
 8008c94:	3301      	adds	r3, #1
 8008c96:	75fb      	strb	r3, [r7, #23]
 8008c98:	7dfa      	ldrb	r2, [r7, #23]
 8008c9a:	79fb      	ldrb	r3, [r7, #7]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d3d3      	bcc.n	8008c48 <IntToUnicode+0x18>
  }
}
 8008ca0:	bf00      	nop
 8008ca2:	bf00      	nop
 8008ca4:	371c      	adds	r7, #28
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
	...

08008cb0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b08a      	sub	sp, #40	; 0x28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cb8:	f107 0314 	add.w	r3, r7, #20
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	605a      	str	r2, [r3, #4]
 8008cc2:	609a      	str	r2, [r3, #8]
 8008cc4:	60da      	str	r2, [r3, #12]
 8008cc6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cd0:	d147      	bne.n	8008d62 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	613b      	str	r3, [r7, #16]
 8008cd6:	4b25      	ldr	r3, [pc, #148]	; (8008d6c <HAL_PCD_MspInit+0xbc>)
 8008cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cda:	4a24      	ldr	r2, [pc, #144]	; (8008d6c <HAL_PCD_MspInit+0xbc>)
 8008cdc:	f043 0301 	orr.w	r3, r3, #1
 8008ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ce2:	4b22      	ldr	r3, [pc, #136]	; (8008d6c <HAL_PCD_MspInit+0xbc>)
 8008ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	613b      	str	r3, [r7, #16]
 8008cec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008cfc:	f107 0314 	add.w	r3, r7, #20
 8008d00:	4619      	mov	r1, r3
 8008d02:	481b      	ldr	r0, [pc, #108]	; (8008d70 <HAL_PCD_MspInit+0xc0>)
 8008d04:	f7f8 fdac 	bl	8001860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008d08:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d0e:	2302      	movs	r3, #2
 8008d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d12:	2300      	movs	r3, #0
 8008d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d16:	2300      	movs	r3, #0
 8008d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d1a:	230a      	movs	r3, #10
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d1e:	f107 0314 	add.w	r3, r7, #20
 8008d22:	4619      	mov	r1, r3
 8008d24:	4812      	ldr	r0, [pc, #72]	; (8008d70 <HAL_PCD_MspInit+0xc0>)
 8008d26:	f7f8 fd9b 	bl	8001860 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d2a:	4b10      	ldr	r3, [pc, #64]	; (8008d6c <HAL_PCD_MspInit+0xbc>)
 8008d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d2e:	4a0f      	ldr	r2, [pc, #60]	; (8008d6c <HAL_PCD_MspInit+0xbc>)
 8008d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d34:	6353      	str	r3, [r2, #52]	; 0x34
 8008d36:	2300      	movs	r3, #0
 8008d38:	60fb      	str	r3, [r7, #12]
 8008d3a:	4b0c      	ldr	r3, [pc, #48]	; (8008d6c <HAL_PCD_MspInit+0xbc>)
 8008d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d3e:	4a0b      	ldr	r2, [pc, #44]	; (8008d6c <HAL_PCD_MspInit+0xbc>)
 8008d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d44:	6453      	str	r3, [r2, #68]	; 0x44
 8008d46:	4b09      	ldr	r3, [pc, #36]	; (8008d6c <HAL_PCD_MspInit+0xbc>)
 8008d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d4e:	60fb      	str	r3, [r7, #12]
 8008d50:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d52:	2200      	movs	r2, #0
 8008d54:	2100      	movs	r1, #0
 8008d56:	2043      	movs	r0, #67	; 0x43
 8008d58:	f7f8 fa61 	bl	800121e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d5c:	2043      	movs	r0, #67	; 0x43
 8008d5e:	f7f8 fa7a 	bl	8001256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d62:	bf00      	nop
 8008d64:	3728      	adds	r7, #40	; 0x28
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	40023800 	.word	0x40023800
 8008d70:	40020000 	.word	0x40020000

08008d74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008d88:	4619      	mov	r1, r3
 8008d8a:	4610      	mov	r0, r2
 8008d8c:	f7fe fbf1 	bl	8007572 <USBD_LL_SetupStage>
}
 8008d90:	bf00      	nop
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	460b      	mov	r3, r1
 8008da2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008daa:	78fa      	ldrb	r2, [r7, #3]
 8008dac:	6879      	ldr	r1, [r7, #4]
 8008dae:	4613      	mov	r3, r2
 8008db0:	00db      	lsls	r3, r3, #3
 8008db2:	4413      	add	r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	440b      	add	r3, r1
 8008db8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	78fb      	ldrb	r3, [r7, #3]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	f7fe fc2b 	bl	800761c <USBD_LL_DataOutStage>
}
 8008dc6:	bf00      	nop
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b082      	sub	sp, #8
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008de0:	78fa      	ldrb	r2, [r7, #3]
 8008de2:	6879      	ldr	r1, [r7, #4]
 8008de4:	4613      	mov	r3, r2
 8008de6:	00db      	lsls	r3, r3, #3
 8008de8:	4413      	add	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	440b      	add	r3, r1
 8008dee:	334c      	adds	r3, #76	; 0x4c
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	78fb      	ldrb	r3, [r7, #3]
 8008df4:	4619      	mov	r1, r3
 8008df6:	f7fe fcc4 	bl	8007782 <USBD_LL_DataInStage>
}
 8008dfa:	bf00      	nop
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b082      	sub	sp, #8
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fe fdf8 	bl	8007a06 <USBD_LL_SOF>
}
 8008e16:	bf00      	nop
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b084      	sub	sp, #16
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e26:	2301      	movs	r3, #1
 8008e28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d102      	bne.n	8008e38 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008e32:	2300      	movs	r3, #0
 8008e34:	73fb      	strb	r3, [r7, #15]
 8008e36:	e008      	b.n	8008e4a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d102      	bne.n	8008e46 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008e40:	2301      	movs	r3, #1
 8008e42:	73fb      	strb	r3, [r7, #15]
 8008e44:	e001      	b.n	8008e4a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008e46:	f7f7 fe97 	bl	8000b78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e50:	7bfa      	ldrb	r2, [r7, #15]
 8008e52:	4611      	mov	r1, r2
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7fe fd98 	bl	800798a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7fe fd40 	bl	80078e6 <USBD_LL_Reset>
}
 8008e66:	bf00      	nop
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
	...

08008e70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fe fd93 	bl	80079aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	6812      	ldr	r2, [r2, #0]
 8008e92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e96:	f043 0301 	orr.w	r3, r3, #1
 8008e9a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a1b      	ldr	r3, [r3, #32]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d005      	beq.n	8008eb0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ea4:	4b04      	ldr	r3, [pc, #16]	; (8008eb8 <HAL_PCD_SuspendCallback+0x48>)
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	4a03      	ldr	r2, [pc, #12]	; (8008eb8 <HAL_PCD_SuspendCallback+0x48>)
 8008eaa:	f043 0306 	orr.w	r3, r3, #6
 8008eae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008eb0:	bf00      	nop
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	e000ed00 	.word	0xe000ed00

08008ebc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fe fd83 	bl	80079d6 <USBD_LL_Resume>
}
 8008ed0:	bf00      	nop
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008eea:	78fa      	ldrb	r2, [r7, #3]
 8008eec:	4611      	mov	r1, r2
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7fe fddb 	bl	8007aaa <USBD_LL_IsoOUTIncomplete>
}
 8008ef4:	bf00      	nop
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f0e:	78fa      	ldrb	r2, [r7, #3]
 8008f10:	4611      	mov	r1, r2
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7fe fd97 	bl	8007a46 <USBD_LL_IsoINIncomplete>
}
 8008f18:	bf00      	nop
 8008f1a:	3708      	adds	r7, #8
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fe fded 	bl	8007b0e <USBD_LL_DevConnected>
}
 8008f34:	bf00      	nop
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fe fdea 	bl	8007b24 <USBD_LL_DevDisconnected>
}
 8008f50:	bf00      	nop
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d13c      	bne.n	8008fe2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f68:	4a20      	ldr	r2, [pc, #128]	; (8008fec <USBD_LL_Init+0x94>)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a1e      	ldr	r2, [pc, #120]	; (8008fec <USBD_LL_Init+0x94>)
 8008f74:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f78:	4b1c      	ldr	r3, [pc, #112]	; (8008fec <USBD_LL_Init+0x94>)
 8008f7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008f7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008f80:	4b1a      	ldr	r3, [pc, #104]	; (8008fec <USBD_LL_Init+0x94>)
 8008f82:	2204      	movs	r2, #4
 8008f84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f86:	4b19      	ldr	r3, [pc, #100]	; (8008fec <USBD_LL_Init+0x94>)
 8008f88:	2202      	movs	r2, #2
 8008f8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f8c:	4b17      	ldr	r3, [pc, #92]	; (8008fec <USBD_LL_Init+0x94>)
 8008f8e:	2200      	movs	r2, #0
 8008f90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f92:	4b16      	ldr	r3, [pc, #88]	; (8008fec <USBD_LL_Init+0x94>)
 8008f94:	2202      	movs	r2, #2
 8008f96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f98:	4b14      	ldr	r3, [pc, #80]	; (8008fec <USBD_LL_Init+0x94>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008f9e:	4b13      	ldr	r3, [pc, #76]	; (8008fec <USBD_LL_Init+0x94>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008fa4:	4b11      	ldr	r3, [pc, #68]	; (8008fec <USBD_LL_Init+0x94>)
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008faa:	4b10      	ldr	r3, [pc, #64]	; (8008fec <USBD_LL_Init+0x94>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008fb0:	4b0e      	ldr	r3, [pc, #56]	; (8008fec <USBD_LL_Init+0x94>)
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008fb6:	480d      	ldr	r0, [pc, #52]	; (8008fec <USBD_LL_Init+0x94>)
 8008fb8:	f7f9 ff06 	bl	8002dc8 <HAL_PCD_Init>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d001      	beq.n	8008fc6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008fc2:	f7f7 fdd9 	bl	8000b78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008fc6:	2180      	movs	r1, #128	; 0x80
 8008fc8:	4808      	ldr	r0, [pc, #32]	; (8008fec <USBD_LL_Init+0x94>)
 8008fca:	f7fb f95e 	bl	800428a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008fce:	2240      	movs	r2, #64	; 0x40
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	4806      	ldr	r0, [pc, #24]	; (8008fec <USBD_LL_Init+0x94>)
 8008fd4:	f7fb f912 	bl	80041fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008fd8:	2280      	movs	r2, #128	; 0x80
 8008fda:	2101      	movs	r1, #1
 8008fdc:	4803      	ldr	r0, [pc, #12]	; (8008fec <USBD_LL_Init+0x94>)
 8008fde:	f7fb f90d 	bl	80041fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	20000774 	.word	0x20000774

08008ff0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009006:	4618      	mov	r0, r3
 8009008:	f7f9 fffb 	bl	8003002 <HAL_PCD_Start>
 800900c:	4603      	mov	r3, r0
 800900e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009010:	7bfb      	ldrb	r3, [r7, #15]
 8009012:	4618      	mov	r0, r3
 8009014:	f000 f942 	bl	800929c <USBD_Get_USB_Status>
 8009018:	4603      	mov	r3, r0
 800901a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800901c:	7bbb      	ldrb	r3, [r7, #14]
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	4608      	mov	r0, r1
 8009030:	4611      	mov	r1, r2
 8009032:	461a      	mov	r2, r3
 8009034:	4603      	mov	r3, r0
 8009036:	70fb      	strb	r3, [r7, #3]
 8009038:	460b      	mov	r3, r1
 800903a:	70bb      	strb	r3, [r7, #2]
 800903c:	4613      	mov	r3, r2
 800903e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800904e:	78bb      	ldrb	r3, [r7, #2]
 8009050:	883a      	ldrh	r2, [r7, #0]
 8009052:	78f9      	ldrb	r1, [r7, #3]
 8009054:	f7fa fccc 	bl	80039f0 <HAL_PCD_EP_Open>
 8009058:	4603      	mov	r3, r0
 800905a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800905c:	7bfb      	ldrb	r3, [r7, #15]
 800905e:	4618      	mov	r0, r3
 8009060:	f000 f91c 	bl	800929c <USBD_Get_USB_Status>
 8009064:	4603      	mov	r3, r0
 8009066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009068:	7bbb      	ldrb	r3, [r7, #14]
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b084      	sub	sp, #16
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
 800907a:	460b      	mov	r3, r1
 800907c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009082:	2300      	movs	r3, #0
 8009084:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800908c:	78fa      	ldrb	r2, [r7, #3]
 800908e:	4611      	mov	r1, r2
 8009090:	4618      	mov	r0, r3
 8009092:	f7fa fd15 	bl	8003ac0 <HAL_PCD_EP_Close>
 8009096:	4603      	mov	r3, r0
 8009098:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800909a:	7bfb      	ldrb	r3, [r7, #15]
 800909c:	4618      	mov	r0, r3
 800909e:	f000 f8fd 	bl	800929c <USBD_Get_USB_Status>
 80090a2:	4603      	mov	r3, r0
 80090a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	460b      	mov	r3, r1
 80090ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090ca:	78fa      	ldrb	r2, [r7, #3]
 80090cc:	4611      	mov	r1, r2
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fa fded 	bl	8003cae <HAL_PCD_EP_SetStall>
 80090d4:	4603      	mov	r3, r0
 80090d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 f8de 	bl	800929c <USBD_Get_USB_Status>
 80090e0:	4603      	mov	r3, r0
 80090e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b084      	sub	sp, #16
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	460b      	mov	r3, r1
 80090f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009108:	78fa      	ldrb	r2, [r7, #3]
 800910a:	4611      	mov	r1, r2
 800910c:	4618      	mov	r0, r3
 800910e:	f7fa fe32 	bl	8003d76 <HAL_PCD_EP_ClrStall>
 8009112:	4603      	mov	r3, r0
 8009114:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009116:	7bfb      	ldrb	r3, [r7, #15]
 8009118:	4618      	mov	r0, r3
 800911a:	f000 f8bf 	bl	800929c <USBD_Get_USB_Status>
 800911e:	4603      	mov	r3, r0
 8009120:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009122:	7bbb      	ldrb	r3, [r7, #14]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	460b      	mov	r3, r1
 8009136:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800913e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009144:	2b00      	cmp	r3, #0
 8009146:	da0b      	bge.n	8009160 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009148:	78fb      	ldrb	r3, [r7, #3]
 800914a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800914e:	68f9      	ldr	r1, [r7, #12]
 8009150:	4613      	mov	r3, r2
 8009152:	00db      	lsls	r3, r3, #3
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	440b      	add	r3, r1
 800915a:	333e      	adds	r3, #62	; 0x3e
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	e00b      	b.n	8009178 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009160:	78fb      	ldrb	r3, [r7, #3]
 8009162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009166:	68f9      	ldr	r1, [r7, #12]
 8009168:	4613      	mov	r3, r2
 800916a:	00db      	lsls	r3, r3, #3
 800916c:	4413      	add	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	440b      	add	r3, r1
 8009172:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009176:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009178:	4618      	mov	r0, r3
 800917a:	3714      	adds	r7, #20
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	460b      	mov	r3, r1
 800918e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009190:	2300      	movs	r3, #0
 8009192:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009194:	2300      	movs	r3, #0
 8009196:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800919e:	78fa      	ldrb	r2, [r7, #3]
 80091a0:	4611      	mov	r1, r2
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fa fbff 	bl	80039a6 <HAL_PCD_SetAddress>
 80091a8:	4603      	mov	r3, r0
 80091aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091ac:	7bfb      	ldrb	r3, [r7, #15]
 80091ae:	4618      	mov	r0, r3
 80091b0:	f000 f874 	bl	800929c <USBD_Get_USB_Status>
 80091b4:	4603      	mov	r3, r0
 80091b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3710      	adds	r7, #16
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b086      	sub	sp, #24
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	60f8      	str	r0, [r7, #12]
 80091ca:	607a      	str	r2, [r7, #4]
 80091cc:	603b      	str	r3, [r7, #0]
 80091ce:	460b      	mov	r3, r1
 80091d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091d6:	2300      	movs	r3, #0
 80091d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80091e0:	7af9      	ldrb	r1, [r7, #11]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	f7fa fd18 	bl	8003c1a <HAL_PCD_EP_Transmit>
 80091ea:	4603      	mov	r3, r0
 80091ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091ee:	7dfb      	ldrb	r3, [r7, #23]
 80091f0:	4618      	mov	r0, r3
 80091f2:	f000 f853 	bl	800929c <USBD_Get_USB_Status>
 80091f6:	4603      	mov	r3, r0
 80091f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3718      	adds	r7, #24
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	607a      	str	r2, [r7, #4]
 800920e:	603b      	str	r3, [r7, #0]
 8009210:	460b      	mov	r3, r1
 8009212:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009218:	2300      	movs	r3, #0
 800921a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009222:	7af9      	ldrb	r1, [r7, #11]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	f7fa fc94 	bl	8003b54 <HAL_PCD_EP_Receive>
 800922c:	4603      	mov	r3, r0
 800922e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009230:	7dfb      	ldrb	r3, [r7, #23]
 8009232:	4618      	mov	r0, r3
 8009234:	f000 f832 	bl	800929c <USBD_Get_USB_Status>
 8009238:	4603      	mov	r3, r0
 800923a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800923c:	7dbb      	ldrb	r3, [r7, #22]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3718      	adds	r7, #24
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b082      	sub	sp, #8
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	460b      	mov	r3, r1
 8009250:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009258:	78fa      	ldrb	r2, [r7, #3]
 800925a:	4611      	mov	r1, r2
 800925c:	4618      	mov	r0, r3
 800925e:	f7fa fcc4 	bl	8003bea <HAL_PCD_EP_GetRxCount>
 8009262:	4603      	mov	r3, r0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009274:	4b03      	ldr	r3, [pc, #12]	; (8009284 <USBD_static_malloc+0x18>)
}
 8009276:	4618      	mov	r0, r3
 8009278:	370c      	adds	r7, #12
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	20000c80 	.word	0x20000c80

08009288 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]

}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	4603      	mov	r3, r0
 80092a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092aa:	79fb      	ldrb	r3, [r7, #7]
 80092ac:	2b03      	cmp	r3, #3
 80092ae:	d817      	bhi.n	80092e0 <USBD_Get_USB_Status+0x44>
 80092b0:	a201      	add	r2, pc, #4	; (adr r2, 80092b8 <USBD_Get_USB_Status+0x1c>)
 80092b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b6:	bf00      	nop
 80092b8:	080092c9 	.word	0x080092c9
 80092bc:	080092cf 	.word	0x080092cf
 80092c0:	080092d5 	.word	0x080092d5
 80092c4:	080092db 	.word	0x080092db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	73fb      	strb	r3, [r7, #15]
    break;
 80092cc:	e00b      	b.n	80092e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092ce:	2303      	movs	r3, #3
 80092d0:	73fb      	strb	r3, [r7, #15]
    break;
 80092d2:	e008      	b.n	80092e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092d4:	2301      	movs	r3, #1
 80092d6:	73fb      	strb	r3, [r7, #15]
    break;
 80092d8:	e005      	b.n	80092e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092da:	2303      	movs	r3, #3
 80092dc:	73fb      	strb	r3, [r7, #15]
    break;
 80092de:	e002      	b.n	80092e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80092e0:	2303      	movs	r3, #3
 80092e2:	73fb      	strb	r3, [r7, #15]
    break;
 80092e4:	bf00      	nop
  }
  return usb_status;
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3714      	adds	r7, #20
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <memset>:
 80092f4:	4402      	add	r2, r0
 80092f6:	4603      	mov	r3, r0
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d100      	bne.n	80092fe <memset+0xa>
 80092fc:	4770      	bx	lr
 80092fe:	f803 1b01 	strb.w	r1, [r3], #1
 8009302:	e7f9      	b.n	80092f8 <memset+0x4>

08009304 <__libc_init_array>:
 8009304:	b570      	push	{r4, r5, r6, lr}
 8009306:	4d0d      	ldr	r5, [pc, #52]	; (800933c <__libc_init_array+0x38>)
 8009308:	4c0d      	ldr	r4, [pc, #52]	; (8009340 <__libc_init_array+0x3c>)
 800930a:	1b64      	subs	r4, r4, r5
 800930c:	10a4      	asrs	r4, r4, #2
 800930e:	2600      	movs	r6, #0
 8009310:	42a6      	cmp	r6, r4
 8009312:	d109      	bne.n	8009328 <__libc_init_array+0x24>
 8009314:	4d0b      	ldr	r5, [pc, #44]	; (8009344 <__libc_init_array+0x40>)
 8009316:	4c0c      	ldr	r4, [pc, #48]	; (8009348 <__libc_init_array+0x44>)
 8009318:	f000 f818 	bl	800934c <_init>
 800931c:	1b64      	subs	r4, r4, r5
 800931e:	10a4      	asrs	r4, r4, #2
 8009320:	2600      	movs	r6, #0
 8009322:	42a6      	cmp	r6, r4
 8009324:	d105      	bne.n	8009332 <__libc_init_array+0x2e>
 8009326:	bd70      	pop	{r4, r5, r6, pc}
 8009328:	f855 3b04 	ldr.w	r3, [r5], #4
 800932c:	4798      	blx	r3
 800932e:	3601      	adds	r6, #1
 8009330:	e7ee      	b.n	8009310 <__libc_init_array+0xc>
 8009332:	f855 3b04 	ldr.w	r3, [r5], #4
 8009336:	4798      	blx	r3
 8009338:	3601      	adds	r6, #1
 800933a:	e7f2      	b.n	8009322 <__libc_init_array+0x1e>
 800933c:	080093d4 	.word	0x080093d4
 8009340:	080093d4 	.word	0x080093d4
 8009344:	080093d4 	.word	0x080093d4
 8009348:	080093d8 	.word	0x080093d8

0800934c <_init>:
 800934c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934e:	bf00      	nop
 8009350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009352:	bc08      	pop	{r3}
 8009354:	469e      	mov	lr, r3
 8009356:	4770      	bx	lr

08009358 <_fini>:
 8009358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935a:	bf00      	nop
 800935c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800935e:	bc08      	pop	{r3}
 8009360:	469e      	mov	lr, r3
 8009362:	4770      	bx	lr
